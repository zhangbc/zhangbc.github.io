<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天堂的鸽子</title>
  
  <subtitle>天道酬勤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-09T15:36:20.715Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bocheng Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Java基础】Java入门知识</title>
    <link href="http://yoursite.com/2019/04/08/java_introductory_knowledge/"/>
    <id>http://yoursite.com/2019/04/08/java_introductory_knowledge/</id>
    <published>2019-04-08T15:52:05.000Z</published>
    <updated>2019-04-09T15:36:20.715Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>【学习参考资料】：<a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener">菜鸟教程-Java教程</a></p></blockquote><h2 id="1，java简介"><a href="#1，java简介" class="headerlink" title="1，java简介"></a>1，java简介</h2><p>   Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。</p><p>   1）<strong>Java分为三个体系</strong>：</p><blockquote><ul><li>JavaSE(J2SE)Java2 Platform Standard Edition，java平台标准版）</li><li>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li><li>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)</li></ul></blockquote><p>   2）<strong>Java的主要特性</strong>：</p><blockquote><ul><li>java语言是简单的；</li><li>java语言是面向对象的（纯面向对象）；</li><li>java语言的分布式的；</li><li>java语言是健壮的（丢弃指针，强类型机制，异常处理，垃圾的自动收集）；</li><li>java语言是安全的（安全防范机制（类ClassLoader），安全管理机制（类SecurityManager））；</li><li>java语言是可移植的；</li><li>java语言是解释型的；</li><li>java是高性能的；</li><li>java语言多线程的；</li><li>java语言是动态的。</li></ul></blockquote><p>   3）<strong>Java的发展史</strong>：诞生于1995年；2014年3月18日，Oracle公司发表Java SE8。</p><p>   4）<strong>Java工具</strong>：Java语言尽量保证系统内存在1G以上。</p><h2 id="2，Java开发环境配置"><a href="#2，Java开发环境配置" class="headerlink" title="2，Java开发环境配置"></a>2，Java开发环境配置</h2><p>1）下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener"><strong>JDK工具</strong></a>解压安装，对应不同的系统选择适合的版本。</p><p>2）<strong>变量设置参数</strong>如下：</p><blockquote><ul><li>变量名：<code>JAVA_HOME</code></li><li>变量值：<code>C:\Program Files (x86)\Java\jdk1.8.0_91</code>        <strong>// 要根据自己的实际路径配置</strong></li><li>变量名：<code>CLASSPATH</code></li><li>变量值：<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code>   <strong>//记得前面有个”<code>.</code>“</strong></li><li>变量名：<code>Path</code></li><li>变量值：<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></li></ul></blockquote><p>3）<strong>测试JDK是否安装成功</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ java -version  # 输出java安装的版本</span><br><span class="line">~ javac -version # 输出javac安装的版本</span><br></pre></td></tr></table></figure></p><p><strong><code>注意</code></strong>：如果使用1.5以上版本的JDK，不用设置CLASSPATH环境变量，也可以正常编译和运行Java程序。</p><p>4）<strong>Java开发工具选择</strong></p><ul><li><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">Eclipse</a></li><li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>(推荐)</li></ul><h2 id="3，Java基础语法"><a href="#3，Java基础语法" class="headerlink" title="3，Java基础语法"></a>3，Java基础语法</h2><p>1）<strong>相关概念</strong><br>   <strong><code>类</code></strong>：类是一个模板，描述一个对象的行为和状态。<br>    java中的<code>类</code>：  </p><blockquote><ul><li><code>局部变量</code>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li><code>成员变量</code>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li><code>类变量</code>：类变量也声明在类中，方法体之外，但必须声明为<code>static</code>类型。</li><li><code>构造方法</code>：每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。 </li></ul></blockquote><p>   创建对象：在<code>Java</code>中，使用关键字<code>new</code>创建一个新的对象，主要有三步：<code>声明</code>，<code>实例化（new）</code>，<code>初始化</code>。<br>   <code>对象</code>：对象是一个类的实例，有状态和行为。<br>   在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。<br>    <code>方法</code>：方法即行为，一个类可以有很多方法。<br>    <code>实例变量</code>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p><p>2）<strong>编程注意点</strong></p><blockquote><ul><li>大小写敏感</li><li>类名每个单词的首字母大写（帕斯卡命名法）</li><li>方法名以小写字母开头，之后每个单词首字母大写（驼峰命名法）</li><li>源文件名必须和类名相同</li><li>主方法入口，所有的<code>Java</code>程序由<code>public static void main(String []args)</code>方法开始执行</li></ul></blockquote><p>3）<strong>Java标识符</strong></p><p><code>标识符</code>：类名，变量名及方法名都称为<code>标识符</code>。</p><blockquote><ul><li>所有的<code>标识符</code>都应该以字母（<code>A-Z</code>或者<code>a-z</code>）,美元符（<code>$</code>）、或者下划线（<code>_</code>）开始；</li><li>首字符之后可以是字母（<code>A-Z</code>或者<code>a-z</code>）,美元符（<code>$</code>）、下划线（<code>_</code>）或数字的任何字符组合；</li><li><code>关键字</code>不能用作标识符；</li><li><code>标识符</code>是大小写敏感的；</li><li>合法标识符举例：<code>age</code>、<code>$salary</code>、<code>_value</code>、<code>__1_value</code>；</li><li>非法标识符举例：<code>123abc</code>、<code>-salary</code>；</li></ul></blockquote><p>4）<strong>Java修饰符</strong></p><p>（1）访问控制： <code>default</code>, <code>public</code>, <code>protected</code>, <code>private</code> </p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">当前类</th><th style="text-align:center">同一包内</th><th style="text-align:center">子孙类（同一包）</th><th style="text-align:center">子孙类（不同包）</th><th style="text-align:center">其他包</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y /N</td><td style="text-align:center">N</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr></tbody></table><p><strong><code>protected</code>说明</strong>：</p><blockquote><ul><li>子类与基类在同一包中：被声明为<code>protected</code>的变量、方法和构造器能被同一个包中的任何其他类访问；</li><li>子类与基类不在同一包中：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的<code>protected</code>方法。</li></ul></blockquote><p>（2）访问控制和继承，注意以下原则：</p><blockquote><ul><li>父类中声明为<code>public</code>的方法在子类中也必须为<code>public</code>。</li><li>父类中声明为<code>protected</code>的方法在子类中要么声明为<code>protected</code>，要么声明为 <code>public</code>，不能声明为<code>private</code>。</li><li>父类中声明为<code>private</code>的方法，不能够被继承。                </li></ul></blockquote><p>（3）非访问控制：<code>final</code>, <code>abstract</code>,<code>static</code>, <code>synchronized</code>,<code>volatile</code></p><blockquote><ul><li><code>static</code>：创建类方法和类变量；</li><li><code>final</code>：修饰类，方法和变量。修饰的类不可被继承；修饰的方法不能被继承的类重新定义；修饰的变量为常量，不可修改。</li><li><code>abstract</code>：创建抽象类和抽象方法；</li><li><code>synchronized</code>：用于线程编程，synchronized声明的方法同一时间只能被一个线程访问；</li><li><code>transient</code>：序列化的对象包含被 <code>transient</code>修饰的实例变量时，<code>Java</code>虚拟机(<code>JVM</code>)跳过该特定的变量；该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</li><li><code>volatile</code>：用于线程编程， 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值，当成员变量发生变化时，会强制线程将变化值回写到共享内</li></ul></blockquote><p>5）<strong>Java变量</strong></p><p><code>局部变量</code>：类的方法中的变量。</p><blockquote><ul><li>局部变量声明在方法、构造方法或者语句块中；</li><li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li><li>访问修饰符不能用于局部变量；</li><li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li><li>局部变量是在<code>栈</code>上分配的。</li><li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li></ul></blockquote><p><code>类变量（静态变量）</code>：独立于方法之外的变量，用<code>static</code>修饰。<br><code>成员变量（非静态变量）</code>：独立于方法之外的变量，不用<code>static</code>修饰。</p><p>6）<strong>Java数组</strong>：储存在堆上的对象，可以保存多个同类型变量。</p><p>7）<strong>Java枚举</strong>：Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的bug。</p><p>8）<strong>Java关键字</strong>：参见<a href="http://www.runoob.com/java/java-basic-syntax.html" target="_blank" rel="noopener">Java关键字列表</a></p><p>9）<strong>Java注释</strong></p><p>10）<strong>Java空行</strong>：空白行，或者有注释的行，Java编译器都会忽略掉。</p><p>11）<strong>Java继承</strong><br>在Java中，一个类可以由其他类派生。被继承的类称为<code>超类</code>（<code>super class</code>），派生类称为<code>子类</code>（<code>subclass</code>）。</p><p>12）<strong>Java接口</strong>：在Java中，接口可以理解为对象间相互通信的协议。</p><p>13）<strong>源文件声明规则</strong></p><blockquote><ul><li>一个源文件中只能有一个public类</li><li>一个源文件可以有多个非public类</li><li>源文件的名称应该和public类的类名保持一致</li><li>如果一个类定义在某个包中，那么package语句应该在源文件的首行</li><li>如果源文件包含import语句，那么应该放在package语句和类定义之间；如果没有package语句，那么import语句应该在源文件中最前面。</li><li>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li></ul></blockquote><p>14）<strong>Java包</strong>：包主要用来对类和接口进行分类。</p><p>15）<strong>Import语句</strong></p><p>16）<strong>Java运算符</strong></p><blockquote><ul><li>算术运算符</li><li>关系运算符</li><li>位运算符：Java定义类位运算符，应用于整数类型（int），长整型（long），短整型（short），字符型（char）和字节型（byte）等类型。</li><li>逻辑运算符</li><li>赋值运算符</li><li>其他运算符（instanceof，自增，自减，条件运算符）</li></ul></blockquote><p>17）<strong>Java 源程序与编译型运行区别</strong><br><img src="/images/java_code_difference.png" alt="Java 源程序与编译型运行区别"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;【学习参考资料】：&lt;a href=&quot;http://www.runoob.com/java/java-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程-Java教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>【数据库实战】SQL Server数据库常用脚本</title>
    <link href="http://yoursite.com/2019/04/07/sql_used_script/"/>
    <id>http://yoursite.com/2019/04/07/sql_used_script/</id>
    <published>2019-04-07T08:40:27.000Z</published>
    <updated>2019-04-09T13:11:32.517Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1，创建链接远程服务器及其删除"><a href="#1，创建链接远程服务器及其删除" class="headerlink" title="1，创建链接远程服务器及其删除"></a>1，创建链接远程服务器及其删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exec sp_addlinkedserver  'web','','SQLOLEDB','192.168.10.106'</span><br><span class="line">exec sp_addlinkedsrvlogin 'web','false',null,'sa','123'</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除链接服务器</span></span><br><span class="line">exec sp_dropserver 'web','droplogins'</span><br></pre></td></tr></table></figure><h4 id="2，重置SQLSERVER表的自增列，让自增列重新计数"><a href="#2，重置SQLSERVER表的自增列，让自增列重新计数" class="headerlink" title="2，重置SQLSERVER表的自增列，让自增列重新计数"></a>2，重置SQLSERVER表的自增列，让自增列重新计数</h4><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DBCC CHECKIDENT</span><br><span class="line">(</span><br><span class="line">  table_name</span><br><span class="line">  [, &#123; NORESEED | &#123; RESEED [,new_reseed_value ] &#125; &#125; ]</span><br><span class="line"> )</span><br><span class="line"> [ WITH NO_INFOMSGS ]</span><br></pre></td></tr></table></figure></p><blockquote><p>参数：</p><blockquote><ul><li>table_name:是要对其当前标识值进行检查的表名。指定的表必须包含标识列。表名必须符合标识符规则。</li><li>NORESEED:指定不应更改当前标识值。</li><li>RESEED:指定应该更改当前标识值。</li><li>new_reseed_value:用作标识列的当前值的新值。</li><li>WITH NO_INFOMSGS:取消显示所有信息性消息。</li></ul></blockquote></blockquote><p>查看某表当前的种子值，示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbcc checkident('mainTable',noreseed);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-------------显示如下--------------</span><br><span class="line">--检查标识信息: 当前标识值 &apos;2707&apos;，当前列值 &apos;2707&apos;。</span><br><span class="line">--DBCC 执行完毕。如果 DBCC 输出了错误信息，请与系统管理员联系。</span><br></pre></td></tr></table></figure><p>重置表mainTable的当前标识值为1，示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbcc checkident('mainTable',reseed,1);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-------------显示如下--------------</span><br><span class="line">--检查标识信息: 当前标识值 &apos;NULL&apos;，当前列值 &apos;1&apos;。</span><br><span class="line">--DBCC 执行完毕。如果 DBCC 输出了错误信息，请与系统管理员联系。</span><br></pre></td></tr></table></figure><h4 id="3，几个有用的存储过程"><a href="#3，几个有用的存储过程" class="headerlink" title="3，几个有用的存储过程"></a>3，几个有用的存储过程</h4><ul><li><p>修改xx表中所有值null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************</span></span><br><span class="line"><span class="comment">   功能：修改xx表中所有列为NULL=''</span></span><br><span class="line"><span class="comment">   作者：by zhangbc</span></span><br><span class="line"><span class="comment">   时间：2015-10-19</span></span><br><span class="line"><span class="comment">*************************/</span></span><br><span class="line">if (OBJECT_ID('modifyNull','P') is not null)</span><br><span class="line">     <span class="keyword">drop</span> <span class="keyword">procedure</span> modifyNull</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> modifyNull(@<span class="keyword">table</span> <span class="built_in">char</span>(<span class="number">100</span>))</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">--定义游标</span></span><br><span class="line">    <span class="keyword">declare</span> col_cur <span class="keyword">cursor</span> <span class="keyword">scroll</span> dynamic <span class="comment">--scroll表示可以向前或向后移动    dynamic：表示可写也可读</span></span><br><span class="line"> <span class="keyword">for</span></span><br><span class="line"> <span class="keyword">select</span> b.name <span class="keyword">from</span> sysobjects a</span><br><span class="line">  <span class="keyword">inner</span> <span class="keyword">join</span> syscolumns b <span class="keyword">on</span> a.id=b.id</span><br><span class="line">  <span class="keyword">where</span> a.name=@<span class="keyword">table</span></span><br><span class="line">    <span class="comment">--打开游标</span></span><br><span class="line">    <span class="keyword">open</span> col_cur</span><br><span class="line"> <span class="keyword">declare</span> @columnName <span class="keyword">nvarchar</span>(<span class="number">100</span>)</span><br><span class="line"> <span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> col_cur <span class="keyword">into</span> @columnName</span><br><span class="line"> <span class="keyword">declare</span> @<span class="keyword">sql</span> <span class="keyword">nvarchar</span>(<span class="number">1000</span>)</span><br><span class="line"> <span class="keyword">while</span> (@@FETCH_STATUS=<span class="number">0</span>)</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">set</span> @<span class="keyword">sql</span>=<span class="string">'update '</span> + @<span class="keyword">table</span> + <span class="string">' set '</span> + @columnName + <span class="string">' = ISNULL('</span> + @columnName + <span class="string">', '''')'</span></span><br><span class="line">   exec(@<span class="keyword">sql</span>)</span><br><span class="line">   <span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> col_cur <span class="keyword">into</span> @columnName</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"> <span class="comment">--关闭游标</span></span><br><span class="line"> <span class="keyword">close</span> col_cur</span><br><span class="line"> <span class="comment">--释放游标</span></span><br><span class="line"> <span class="keyword">deallocate</span> col_cur</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>修改数据库中所有表的所有列为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************</span></span><br><span class="line"><span class="comment">   功能：修改数据库中所有表的所有列为NULL=''</span></span><br><span class="line"><span class="comment">   作者：by zhangbc</span></span><br><span class="line"><span class="comment">   时间：2015-10-19</span></span><br><span class="line"><span class="comment">*************************/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> [dbo].[modifyAllNull]</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> tab_cur <span class="keyword">cursor</span> <span class="keyword">scroll</span> dynamic <span class="comment">--scroll表示可以向前或向后移动    dynamic：表示可写也可读</span></span><br><span class="line"> <span class="keyword">for</span></span><br><span class="line"> <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> sysobjects <span class="keyword">where</span> xtype=<span class="string">'U'</span></span><br><span class="line">    <span class="comment">--打开游标</span></span><br><span class="line">    <span class="keyword">open</span> tab_cur</span><br><span class="line"> <span class="keyword">declare</span> @tableName <span class="keyword">nvarchar</span>(<span class="number">100</span>)</span><br><span class="line"> <span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> tab_cur <span class="keyword">into</span> @tableName</span><br><span class="line"> <span class="keyword">declare</span> @<span class="keyword">sql</span> <span class="keyword">nvarchar</span>(<span class="number">1000</span>)</span><br><span class="line"> <span class="keyword">while</span> (@@FETCH_STATUS=<span class="number">0</span>)</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">set</span> @<span class="keyword">sql</span>=<span class="string">'exec dbo.modifyNull '</span> +<span class="string">''''</span> + @tableName + <span class="string">''''</span></span><br><span class="line">   exec(@<span class="keyword">sql</span>)</span><br><span class="line">   <span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> tab_cur <span class="keyword">into</span> @tableName</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"> <span class="comment">--关闭游标</span></span><br><span class="line"> <span class="keyword">close</span> tab_cur</span><br><span class="line"> <span class="comment">--释放游标</span></span><br><span class="line"> <span class="keyword">deallocate</span> tab_cur</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1，创建链接远程服务器及其删除&quot;&gt;&lt;a href=&quot;#1，创建链接远程服务器及其删除&quot; class=&quot;headerlink&quot; title=&quot;1，创建链接远程服务器及其删除&quot;&gt;&lt;/a&gt;1，创建链接远程服务器及其删除&lt;/h4&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="数据库技术" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库实战" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>【数据库理论】绪论</title>
    <link href="http://yoursite.com/2019/04/06/db_introduction/"/>
    <id>http://yoursite.com/2019/04/06/db_introduction/</id>
    <published>2019-04-06T10:42:18.000Z</published>
    <updated>2019-04-09T13:11:32.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。<br><img src="/images/db_book.png" alt="数据库系统与应用"></p></blockquote><h2 id="一，数据库的概念"><a href="#一，数据库的概念" class="headerlink" title="一，数据库的概念"></a>一，数据库的概念</h2><ol><li><strong>数据库定义</strong>：<code>数据库（DB）</code>是长期保存在计算机的存储设备上并按照某种模型组织起来的，可以被各种用户或应用共享的数据集合。</li><li><strong>数据库分类</strong>：<code>关系数据库</code>，<code>层次数据库</code>，<code>网状数据库</code>.</li><li><strong>数据库基本特征</strong>：<br>1）具有较高的数据独立性；<code>数据独立性</code>是指数据的组织方法和储存方法与应用程序互不依赖，彼此独立的特性，包括<code>物理独立性</code>和<code>逻辑独立性</code>。<br>2）数据库用综合的方法组织数据，保证尽可能高的访问效率；<br>3）具有较小的数据冗余，可以供多个用户共享；<br>4）具有安全控制机制，能够保证数据的安全，可靠；<br>5）数据允许多用户共享，能够有效，及时地处理数据，并能够保证数据的一致性和完整性。</li></ol><h2 id="二，数据库管理系统（DBMS）"><a href="#二，数据库管理系统（DBMS）" class="headerlink" title="二，数据库管理系统（DBMS）"></a>二，数据库管理系统（<code>DBMS</code>）</h2><ol><li><p><strong>DBMS的定义</strong>：<code>DBMS</code>是位于用户与操作系统之间的<code>数据管理软件</code>，数据库在建立，运用和维护时由数据库管理系统统一管理，控制。</p></li><li><p><strong>DBMS的目标</strong>：<br> 1）用户界面友好；<br> 2）功能完备；<br> 3）效率高，DBMS应该具有较高的系统效率和高的用户生产率，其中系统效率包括：</p><blockquote><p>（1）<strong>计算机内部资源的利用率</strong>，即能够充分利用磁盘空间，CPU，设备等资源，并注意使各种资源的负载均衡以提高整个系统的效率；<br>（2）<strong>DBMS本身的运行效率</strong>，根据系统目标确定恰当的体系结构，数据结构和算法，保证DBMS运行的高效率；<code>用户生产率</code>是指用户设计和开发应用程序的效率；</p></blockquote><p> 4）结构清晰：DBMS内部结构清新，层次分明既便于支持其外层开发环境的构造，也便于自身的设计、开发与维护；<br> 5）开放性：DBMS的开放性是指符合标准和规范，如<code>ODBC标准</code>，<code>SQL标准</code>等。</p></li><li><p><strong>DBMS的基本功能</strong>：</p><p>1）数据库定义功能：<code>DDL</code>可以定义数据库中数据之间的联系，可以定义数据的完整性约束条件和保证完整性的触发机制等，包括全局逻辑数据结构（模式）的定义，局部逻辑数据结构（外模式）的定义，保密定义等；<br>2）数据库操纵功能：<code>DML</code>可以接收，分析和执行用户提出的访问数据库的各种要求，完成对数据库的各种基本操作，如对数据库的检索，插入，删除和修改等操作，可以重新组织数据的存储结构，可以完成数据库的备份和恢复等操作；<br>3）数据库的控制功能：<code>DCL</code>包括整个数据库系统的运行控制，数据库的完整性控制，数据库的安全性控制及多用户环境下的数据库并发访问控制等；<br>4）数据库的运行管理功能：指<code>DBMS</code>运行机制和管理功能；<br>5）数据库组织和存储管理功能<br>6）数据库的建立和维护功能<br>7）数据库通信功能</p></li><li><p><strong>DBMS的组成</strong>：</p><p> 1）数据库定义语言及其翻译程序：</p></li></ol><blockquote><p> <code>DDL</code>用于描述数据库中要存储的现实世界实体的语言，包括数据字典中数据库的逻辑结构，完整性约束，物理存储结构的表述，数据库的各种数据操作和数据库的维护管理的各种依据。包括：</p><blockquote><p> <code>模式DDL</code>：定义全局逻辑数据结构(包括所有字段的名称，特征及其相互关系)，数据的完整性，安全性约束；<br><code>外模式DDL</code>：为用户定义所用的局部逻辑数据结构(包括与用户的应用程序有关的字段名称，特征及其相互关系)，描述外模式到模式之间的映射关系；<br><code>内模式DDL</code>：用于描述数据在存储介质上的安排和存放方式，描述模式到内模式之间的映射关系；</p></blockquote></blockquote><p>   2）数据库操纵语言及其编译（或解释）程序：</p><blockquote><p><code>DML</code>用于实现对数据库的一些基本操作，如数据检索，数据插入，数据修改和数据删除，其中数据插入，数据修改和数据删除操作又称为<code>数据更新操作</code>。分为：</p><blockquote><p><code>宿主型DML</code>：本身不能独立使用，必须嵌入到宿主语言中，如<code>C</code>，<code>COLBOL</code>，<code>PASCAL</code>等，因此也称<code>嵌入型DML</code>，仅负责对数据库数据的操纵，其他工作都由宿主语言完成；<br><code>自主型DML</code>，又称<code>自含型DML</code>，可以独立进行数据查询，数据更新等操作，语法简单，使用方便，适合终端用户使用；</p></blockquote></blockquote><p>   3）数据库运行控制程序：包括系统初启程序(<code>DBMS</code>的<code>神经中枢</code>)，访问控制程序，安全性控制程序，完整性检查程序，并发控制程序，数据存取/更新程序，通信控制程序；<br>   4）数据库服务实用程序：包括数据装入程序，工作日志程序，性能监督程序，数据库重新组织程序，系统恢复程序，转储/编辑/打印程序。</p><ol start="5"><li><p><strong>数据库管理与数据库管理员(<code>DBA</code>)</strong>：</p><p>   1）<code>DBA</code>：从事数据库管理工作的人员，不是数据库的“占有者”，而是数据库的“保护者”。<br>   2)  <code>DBA</code>职责</p><blockquote><ul><li>在数据库设计开始之前，<code>DBA</code>首先调查数据库的用户需求。</li><li>在数据库设计阶段，<code>DBA</code>要负责数据库标准的制定和功用数据字典的研制，要负责各级数据库模式的设计，负责数据库安全，可靠方面的设计，决定文件组织的方法。</li><li>在数据库运行阶段，<code>DBA</code>要负责对用户进行数据库方面的培训，负责数据库的转储和恢复，数据维护，用户的使用权限等，负责监控数据库的性能。</li></ul></blockquote></li></ol><h2 id="三，数据库系统（DBS）"><a href="#三，数据库系统（DBS）" class="headerlink" title="三，数据库系统（DBS）"></a>三，数据库系统（<code>DBS</code>）</h2><ol><li><strong>DBS定义</strong>：指在计算机系统中引入数据库后的系统构成，一般由<code>数据库</code>，<code>数据库系统运行环境</code>，<code>数据库管理系统及其开发工具</code>，<code>数据库管理员</code>和<code>用户</code>组成。</li><li><p><strong>数据库系统的三级模式结构</strong>：<br> 1）<strong>模式定义</strong>：数据库中全体数据的逻辑结构和特征的描述，仅仅涉及型的描述，而不涉及具体的值。<br> 2）三级模式结构：</p><blockquote><ul><li><code>外模式</code>：也称<code>子模式</code>或者<code>用户模式</code>，是数据库用户看见和使用的局部数据的逻辑结构和特征的描述，是数据库的用户视图，是和某个应用相关的数据逻辑表示；一个数据库可以有多个外模式；</li><li><code>模式</code>：也称<code>逻辑模式</code>，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共视图，是数据库的整个逻辑描述，并说明一个数据库所采用的数据模型；一个数据库只有一个模式；</li><li><code>内模式</code>：也称<code>存储模式</code>，是数据物理结构和存储方式的描述，是数据库的内部表示方式；一个数据库只有一个内模式。</li></ul></blockquote></li><li><p><strong>二级映像功能和数据独立性</strong>：<br>  1）<strong>外模式/模式映像</strong>：当模式改变时，<code>DBA</code>对各个外模式/模式的映像做出相应改变，使外模式保持不变，从而使应用程序不改变，保证了<code>数据的逻辑独立性</code>；<br>  2）<strong>模式/内模式映像</strong>：唯一定义了数据全局逻辑结构和存储方式之间的对应关系。当数据库的存储方式改变时，<code>DBA</code>将对模式/内模式映像做出相应的改变，使模式保持不变，从而保证了<code>数据的物理独立性</code>。</p></li><li><p><strong>数据库系统的体系结构</strong>：<br> 1）<code>单用户结构</code>的数据库系统：最早最简单，不能共享数据；<br> 2）<code>主从式结构</code>的数据库系统：结构简单，数据易于维护维护和管理，但系统的可靠性不高；<br> 3）<code>分布式结构</code>的数据库系统：数据在逻辑上上一个整体，但是分布在计算机网络的不同结点上。<br> 4）<code>客户端/服务器结构</code>的数据库系统</p></li><li><p><strong>数据库系统的工作流程</strong>：<br> 1）<code>DBA</code>建立并维护数据库；<br> 2）用户编写应用程序；<br> 3）应用程序在<code>DBMS</code>支持下运行，在模式，外模式，内模式，用户源程序翻译为目标代码后，即可启动目标程序。</p></li></ol><h2 id="四，数据库的发展"><a href="#四，数据库的发展" class="headerlink" title="四，数据库的发展"></a>四，数据库的发展</h2><ol><li><p><strong>人工管理阶段</strong>：<br> 1）特点：数据不保存；应用程序管理数据；数据不共享；数据不具有独立性。</p></li><li><p><strong>文件系统阶段</strong>：<br> 1）优点：数据可以长期保存；有专门的软件即文件系统管理数据，文件系统把数据组织成相互独立的数据文件；文件的形式多样化；<br> 2）缺点：数据共享性差，冗余度大；数据独立性差；数据联系弱。</p></li><li><p><strong>数据库系统阶段</strong></p></li><li><p><strong>数据库技术的研究，应用领域和发展方向</strong></p></li></ol><blockquote><ul><li>数据模型</li><li>数据库管理系统软件的研制</li><li>数据操作</li><li>数据库理论：主要集中在关系的规范化理论，关系数据理论等。<blockquote><p>代表性的数据库应用领域和发展方向：</p><ul><li>因特网上的Web数据库</li><li>面向对象数据库</li><li>多媒体数据库</li></ul></blockquote></li><li>并行数据库</li></ul></blockquote><blockquote><ul><li>人工智能领域的知识库和主动数据库</li></ul></blockquote><blockquote><ul><li>模糊数据库系统</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。&lt;br&gt;&lt;img src=&quot;/images/db_book.png&quot; alt=&quot;数据库系统与应用&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，数据库的概念&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="数据库技术" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库理论" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>【数据库理论】数据模型</title>
    <link href="http://yoursite.com/2019/04/06/db_data_model/"/>
    <id>http://yoursite.com/2019/04/06/db_data_model/</id>
    <published>2019-04-06T04:48:52.000Z</published>
    <updated>2019-04-09T13:11:32.520Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。</p></blockquote><h2 id="一，数据描述"><a href="#一，数据描述" class="headerlink" title="一，数据描述"></a>一，数据描述</h2><ol><li><p><strong>数据的三种范畴</strong><br>  1）<code>现实世界</code>（<code>客观世界</code>）：<code>现实世界</code>所反映的客观存在的事物及其相互之间的联系，指数处理对象最原始的表现形式。<br>  2）<code>信息世界</code>（<code>观念世界</code>）：是<code>现实世界</code>在人们头脑中的反映，经过一定的选择，命名和分类而形成的。以下为相关概念：</p><blockquote><ul><li><code>实体（Entity）</code>：客观存在的事物在人们头脑中的反映，或说，客观存在并可相互区别的客观事物或抽象事件。</li><li><code>属性（Attribute）</code>：实体所具有的某一方面的特性。</li><li><code>域（Domain）</code>：一个属性可能取的所有属性值的范围称为该属性的域。</li><li><code>码（Key）</code>：唯一标识实体的属性集。</li><li><code>实体型（Entity Type）</code>：用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。</li><li><code>实体集（Entity Set）</code>：同一类型实体的集合。</li></ul></blockquote><p>3）<code>机器世界</code>（<code>数据世界</code>或<code>存储世界</code>）<br>数据化后的信息称为<code>数据</code>，所以说<code>数据</code>是信息的符号表示。以下为相关概念：</p><blockquote><ul><li><code>数据项（字段，Field）</code>：对应于信息世界中的属性。</li><li><code>记录（Record）</code>：对应于每个实体所对应的数据。</li><li><code>记录型（Record Type）</code>：对应于信息世界中的实体型。</li><li><code>文件（File）</code>：对应于信息世界中的实体集。</li><li><code>关键字（Key）</code>：对应于能够唯一标识一个记录的字段集。</li></ul></blockquote></li><li><p><strong>实体间的联系</strong></p><blockquote><ul><li><code>一对一联系</code>：如果实体集<code>A</code>中每个实体，实体集<code>B</code>中至多有一个实体与之联系，反之亦然，则称实体集A与实体集B具有<code>一对一联系</code>，记作<code>1:1</code>；</li><li><code>一对多联系</code>：如果实体集<code>A</code>中每个实体，实体集<code>B</code>中有n（n&gt;=0）个实体与之联系，反之，实体集<code>B</code>中每个实体，实体集<code>A</code>中至多有一个实体与之联系，则称实体集A与实体集B具有<code>一对多联系</code>，记作<code>1:n</code>；</li><li><code>多对多联系</code>：如果实体集<code>A</code>中每个实体，实体集<code>B</code>中有n（n&gt;=0）个实体与之联系，反之，实体集<code>B</code>中每个实体，实体集<code>A</code>中有m（m&gt;=0）个实体与之联系，则称实体集A与实体集B具有<code>多对多联系</code>，记作<code>n:m</code>。</li></ul></blockquote></li></ol><h2 id="二，概念模型与E-R方法"><a href="#二，概念模型与E-R方法" class="headerlink" title="二，概念模型与E-R方法"></a>二，概念模型与E-R方法</h2><ol><li><p><strong>数据模型</strong><br>  1）数据模型应满足以下要求：</p><blockquote><p>i）能够比较真实地模拟现实世界；<br>ii）容易为人所理解；<br>iii）便于在计算机上实现。</p></blockquote><p>  2）数据模型分类：</p><blockquote><p>i）<code>概念模型</code>：即<code>信息模型</code>，是按用户的观点来对数据和信息建模的，主要用于数据设计；<br>ii）<code>基本数据模型</code>：主要包括<code>网状模型</code>，<code>层次模型</code>，<code>关系模型</code>等，是按计算机系统的观点对数据建模的，主要用于DBMS的实现。</p></blockquote></li><li><p><strong>数据模型的三要素</strong><br>  1）<code>数据结构</code>：用于描述系统的静态特性。<code>数据结构</code>是所有研究对象类型的集合，这些对象是数据库的组成部分，分为两大类：</p><blockquote><ul><li>与数据类型，内容，性质有关的对象；</li><li>与数据之间联系有关的对象。</li></ul></blockquote><p>  2）<code>数据操作</code>：用于描述系统的动态特征。<code>数据操作</code>是指对数据库中各种对象（型）的实例（值）允许执行的操作的集合，包括操作及有关的操作规则。数据库主要有<strong>检索</strong>和<strong>修改</strong>（插入，删除，更新）两大数据操作。<br>  3）<code>数据完整性约束</code>：是一组完整性规则的集合。<code>完整性规则</code>是给定的数据模型中的数据及其联系所具有的制约和存储规则，用于限制符合数据模型的数据库状态及状态的变化，用于确保数据的<code>正确</code>、<code>有效</code>和<code>相容</code>。</p></li><li><p><strong>概念数据模型</strong><br>  1）<code>概念模型</code>的定义：按用户的观点对现实世界进行数据建模而形成的，是一种独立于计算机系统的模型，完全不涉及信息在计算机系统中的表示，也不依赖于具体的数据库管理系统，用于描述某个特定组织所关心的信息结构。<br>  2）<code>概念模型</code>的相关基本概念：<code>实体</code>、<code>属性</code>、<code>域</code>、<code>码</code>、<code>实体型</code>和<code>实体集</code>。<br>  3）<code>概念模型</code>的基本关系：在<code>概念模型</code>中主要解决问题是实体间的联系。</p></li><li><p><strong>E-R图表示法</strong><br>  1）<code>实体型</code>：用<code>矩形</code>表示，矩形框内写明实体名；<br>  2）<code>属性</code>：用<code>椭圆</code>表示，椭圆内写明属性名；<br>  3）<code>联系</code>：用<code>菱形</code>表示，菱形框内写明联系名，并用无向边分别与有关实体连接起来，同时在无向边旁标注联系的类型（<code>1:1</code>，<code>1:n</code>，<code>n:m</code>）。<br>  <code>E-R模型</code>优点：</p><blockquote><p>i）接近人的思想，容易理解；<br>ii）与计算机无关，用户容易接受。</p></blockquote></li></ol><h2 id="三，传统的三大数据模型"><a href="#三，传统的三大数据模型" class="headerlink" title="三，传统的三大数据模型"></a>三，传统的三大数据模型</h2><ol><li><p><strong>层次模型</strong><br>  1）<code>层次模型</code>定义：用<code>树形结构</code>表示实体之间的联系的模型称为<code>层次模型</code>。<br>  2）建立数据的<code>层次模型</code>需要满足以下条件：</p><blockquote><p>i）有且仅有一个结点没有父结点，这个结点即为树根结点；<br>ii）其他数据记录有且仅有一个父结点。</p></blockquote><p>  3）<code>层次模型</code>的<strong>基本特点</strong>：任何一个给定的记录值只有按其路径查看，才能体现它的全部含义，没有一个子记录值能够脱离父记录值而独立存在的。<br>  4）<code>层次模型</code>的<strong>最明显特点</strong>：层次清晰，构造简单，易于实现，可以很方便地表示一对一和一对多这两种实体之间的联系。<br>  5）<code>层次模型</code>的主要优点：</p><blockquote><p>i）<code>层次模型</code>本身比较简单；<br>ii）实体间联系是固定的，且预先定义好的应用系统采用<code>层次模型</code>来实现，其性能优于<code>关系模型</code>的性能，不低于<code>网状模型</code>的性能；<br>iii）<code>层次模型</code>提供了良好的完整性支持。</p></blockquote><p> 6）<code>层次模型</code>的主要缺点：</p><blockquote><p>i）现实世界中很多联系是非层次性的，层次模型表示这类联系的方法很笨拙，只能通过引入冗余数据或创建非自然组织（引入虚结点）来解决；<br>ii）对插入和删除操作的限制比较多；<br>iii）查询子结点必须通过父结点；<br>iv）由于结构严谨，层次命令趋于程序化。</p></blockquote></li><li><p><strong>网状模型</strong><br>  1）<code>网状模型</code>的定义： 网状模型是一种有向图，在数据库中，把满足以下两个条件的基本层次联系集合称为网状模型：</p><blockquote><p>i）允许一个以上的结点无父结点；<br>ii）一个结点可以有多于一个的父结点。</p></blockquote><p>  2）为了描述网状模型的记录之间的联系，引进了<code>系（Set）</code>的概念，所谓<code>系</code>可以理解为命名了的<code>联系</code>，它由一个父记录型和一个或多个子记录型构成。<br>  3）<code>网状数据库</code>的定义：用网状模型设计出来的数据库称为<code>网状数据库</code>。<br>  4）<code>网状模型</code>的主要优点：</p><blockquote><p>i）能够更为直接地描述现实世界，如一个结点可以有多个父结点；<br>ii）具有良好的性能，存取效率较高。</p></blockquote><p>  5）<code>网状模型</code>的主要缺点：</p><blockquote><p>i）结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于用户最终掌握；<br>ii）其DDL，DML语言复杂，用户不易使用。</p></blockquote></li><li><p><strong>关系模型</strong><br>  1）<code>关系模型</code>的主要优点：</p><blockquote><p>i）数据结构比较简单；<br>ii）具有很高的数据独立性；<br>iii）可以直接处理多对多联系；<br>iv）坚实的理论基础。</p></blockquote><p>  2）<code>值域</code>的定义：在关系模型中，一个n元关系有n个属性，属性的取值范围称为值域。<br>  3）<code>关系模型</code>主要缺点：存取路径对用户透明，查询效率往往不如非关系数据模型。</p></li></ol><h2 id="四，数据独立与三层结构"><a href="#四，数据独立与三层结构" class="headerlink" title="四，数据独立与三层结构"></a>四，数据独立与三层结构</h2><ol><li><p><strong>三级模式结构</strong></p><blockquote><ul><li><code>外模式</code>：又称为<code>用户模式</code>，是数据库用户和数据库系统的接口，是数据库用户的数据视图，是数据库用户可以看得见和使用的局部数据的逻辑结构和特征描述，是与某一个应用有关的数据的逻辑表示。</li><li><code>模式</code>：可分为<code>概念模式</code>和<code>逻辑模式</code>，是所有数据库用户的公共数据视图，是数据库中全部数据的逻辑结构和特征的描述。<blockquote><p>一个数据库只有一个<code>模式</code>，其中<code>概念模式</code>可以用<code>实体-联系模型</code>模型来描述，<code>逻辑模式</code>以某种数据模型为基础，综合考虑所有用户的需求，并将其形成全局逻辑结构。</p></blockquote></li><li><code>内模式</code>：又称为<code>存储模式</code>，是数据库物理结构和存储方式的描述，是数据在数据库内部的表示方式。</li></ul></blockquote></li><li><p><strong>数据的独立性</strong></p><blockquote><ul><li><code>逻辑数据独立性</code>：当<code>模式</code>改变时，只要对<code>外模式/模式映像</code>做相应的改变，就可以使<code>外模式</code>保持不变，以<code>外模式</code>为依据编写的应用程序就不受影响，从而应用程序不必修改，保证了数据与程序之间的<code>逻辑独立性</code>。</li><li><code>存储数据独立性</code>：当<code>内模式</code>改变时，只要对<code>模式/内模式映像</code>做相应的改变，使<code>模式</code>保持不变，应用程序就不受影响，从而保证了数据与程序之间的<code>物理独立性</code>，称为<code>存储数据独立性</code>。</li></ul></blockquote></li></ol><h2 id="五，数据库管理系统"><a href="#五，数据库管理系统" class="headerlink" title="五，数据库管理系统"></a>五，数据库管理系统</h2><ol><li><p><strong><code>DBMS</code>的主要功能</strong><br>  数据库的<code>主要职责</code>就是有效地实现数据库三级模式之间的转换，即把用户或应用程序对数据库的一次访问，从用户级带到概念级，再导向物理级，转换为对存储数据的操作。</p><blockquote><p>1）数据库定义<br>2）数据库操作及查询优化<br>3）数据库控制运行管理<br>4）数据组织，存储和管理<br>5）数据库的恢复和维护<br>6）数据库的多种接口<br>7）其他功能</p></blockquote></li><li><p><strong><code>DBMS</code>的组成</strong><br>  1）<code>DBMS</code>由<code>查询处理器</code>和<code>存储管理器</code>两大部分组成。其中：</p><blockquote><p>(1) <code>查询处理器</code>主要有<code>DDL</code>编译器，<code>DML</code>编译器，<code>嵌入式DML</code>的预编译器及查询运行核心程序；<br>(2) <code>存储管理器</code>有授权和完整性管理器，事务管理器，文件管理器及缓冲区管理器。</p></blockquote><p>  2）<code>查询处理程序</code>：把用较高级的语言所表示的数据库操作（查询、更新等）转换成一系列对数据库的请求。<br>  3）<code>存储管理程序</code>：包括<code>文件管理程序</code>和<code>缓冲区管理程序</code>。<br>  4）<code>事务管理程序</code>：保证数据库中所有事务全部都能正确执行。</p></li><li><p><strong>用户访问数据库的过程</strong>（略）</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，数据描述&quot;&gt;&lt;a href=&quot;#一，数据描述&quot; class=&quot;headerlink&quot; title=&quot;一，数据描述&quot;&gt;&lt;/a&gt;一，数据
      
    
    </summary>
    
      <category term="数据库技术" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库理论" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
</feed>

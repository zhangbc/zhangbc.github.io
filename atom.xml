<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天堂的鸽子</title>
  
  <subtitle>天道酬勤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangbc.github.io/"/>
  <updated>2019-08-08T15:48:32.238Z</updated>
  <id>https://zhangbc.github.io/</id>
  
  <author>
    <name>Bocheng Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【经典算法】字符串旋转和包含算法</title>
    <link href="https://zhangbc.github.io/2019/08/08/algorithm_strings_01/"/>
    <id>https://zhangbc.github.io/2019/08/08/algorithm_strings_01/</id>
    <published>2019-08-08T15:40:40.000Z</published>
    <updated>2019-08-08T15:48:32.238Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《编程之法：面试和算法心得》的读书笔记。</p></blockquote><p>作为一名大龄青年，为了即将踏入研究生之路，特此需要做一些计算机相关基础知识的积累，以弥补算法知识，谨以此开始自己的算法学习之路。</p><h4 id="算法1-1：旋转字符串"><a href="#算法1-1：旋转字符串" class="headerlink" title="算法1.1：旋转字符串"></a>算法1.1：旋转字符串</h4><ul><li><p>题目描述</p><p>  给定一个字符串，要求把字符串前面的若干个字符移动到字符串的尾部，如把字符串“abcdef”前面的2个字符’a’和’b’移动到字符串的尾部，使得原字符串变成字符串“cdefab”。请写一个函数完成此功能，要求对长度为n的字符串操作的时间复杂度为 $O(n)$，空间复杂度为 $O(1)$。</p></li><li><p>分析与解法</p></li></ul><blockquote><p>解法一：暴力移位法</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1.1：旋转字符串，暴力移位法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LeftShiftOne</span><span class="params">(<span class="keyword">char</span>* strs, <span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = strs[i];</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; number; i++)</span><br><span class="line">&#123;</span><br><span class="line">strs[i<span class="number">-1</span>] = strs[i];</span><br><span class="line">&#125;</span><br><span class="line">strs[i<span class="number">-1</span>] = ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LeftRoatateString</span><span class="params">(<span class="keyword">char</span>* strs, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">LeftShiftOne(strs, n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> strs[] = <span class="string">"ABCDEFGH"</span>;</span><br><span class="line">LeftRoatateString(strs, <span class="number">8</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>算法分析：针对长度为n的字符串而言，假设需要移动m个字符到字符串的尾部，总共需要移动 <code>m*n</code> 次操作，同时设立一个变量存储第一个字符，故时间复杂度为 $O(n^2)$，空间复杂度为 $O(1)$，不合题意。</p></blockquote><p>解法二：三步反转法</p><blockquote><p>思路分析：将一个字符串分成X和Y两部分，在每个部分字符串上定义反转操作，如$X^T$，即把X的所有字符反转（例如X=”abc”，则 $X^T$=”cba”），于是得到：$(X^T Y^T)^T$=$YX$。</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1.1：旋转字符串，三步反转法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReverseString</span><span class="params">(<span class="keyword">char</span>* str, <span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(from &lt; to)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = str[from];</span><br><span class="line">str[from++] = str[to];</span><br><span class="line">str[to--] = ch;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LeftReverseString</span><span class="params">(<span class="keyword">char</span>* strs, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m %= n;</span><br><span class="line">ReverseString(strs, <span class="number">0</span>, m<span class="number">-1</span>);</span><br><span class="line">ReverseString(strs, m, n<span class="number">-1</span>);</span><br><span class="line">ReverseString(strs, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> strs[] = <span class="string">"ABCDEFGH"</span>;</span><br><span class="line">LeftReverseString(strs, <span class="number">8</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>算法分析：针对长度为n的字符串而言，假设需要移动m个字符到字符串的尾部，总共需要移动 <code>2*n</code> 次操作，同时设立一个变量存储第一个字符，故时间复杂度为 $O(n)$，空间复杂度为 $O(1)$，符合题意。</p></blockquote></blockquote><ul><li>练习题（自己动手）</li></ul><blockquote><blockquote><ol><li>链表翻转。例如给出一个链表和一个数k，链表为1—&gt;2—&gt;3—&gt;4—&gt;5—&gt;6，k=2，则翻转后为2—&gt;1—&gt;6—&gt;5—&gt;4—&gt;3；若k=3，翻转后3—&gt;2—&gt;1—&gt;6—&gt;5—&gt;4。</li><li>编写程序在原来字符串中把字符串尾部的m个字符移动到字符串的头部，要求：长度为n的字符串操作时间复杂度为 $O(n)$，空间复杂度为 $O(1)$。例如，源字符串为 “Ilovebaofeng”，m=7时输出为：“baofengIlove”。</li><li>单词翻转。输入一个英文句子，翻转句子中单词的顺序，但是单词内字符的顺序不变，句子中单词以空格符号隔开。为简单起见，标点符号和普通字符一样处理。例如，输入”I am a student.”，输出为 “student. a am I”。</li></ol></blockquote></blockquote><h4 id="算法1-2：字符串包含"><a href="#算法1-2：字符串包含" class="headerlink" title="算法1.2：字符串包含"></a>算法1.2：字符串包含</h4><ul><li><p>题目描述</p><p>  给定两个分别由字母组成的字符串A和字符串B，字符串B的长度比字符串A短。请问，如何快速地判断字符串B中的所有字符是否都在字符串A里面？<br>为简单起见，我们规定输入的字符串只包含大写英文字母，请实现函数 bool StringContain(string &amp;A, string &amp;B)。<br>示例一：string 1：ABCD，string 2： BAD，答案为true；<br>示例二：string 1：ABCD，string 2： BCE，答案为false；<br>示例三：string 1：ABCD，string 2： AA，答案为true。</p></li><li><p>分析与解法</p></li></ul><blockquote><p>解法一：常规解法</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1.2：字符串包含，常规方法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StringContain</span><span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; b.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; (j &lt; a.length()) &amp;&amp; (a[j] != b[i]); j++);</span><br><span class="line"><span class="keyword">if</span>(j &gt;= a.length())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> a = <span class="string">"ABCD"</span>;</span><br><span class="line"><span class="built_in">string</span> b = <span class="string">"AA"</span>;</span><br><span class="line"><span class="keyword">bool</span> result = StringContain(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>算法分析：这是一种最直观也是最简单的方法思路。此算法需要 $O（n*m）$ 次操作，时间开销较大。</p></blockquote><p>解法二：排序方法</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1.2：字符串包含，排序方法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StringContainSort</span><span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sort(a.begin(), a.end());   <span class="comment">// 包含于&lt;algorithm&gt;模块内</span></span><br><span class="line">sort(b.begin(), b.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> pa = <span class="number">0</span>, pb = <span class="number">0</span>; pb &lt; b.length(); pb++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>((pa &lt; a.length()) &amp;&amp; (a[pa] &lt; b[pb]))</span><br><span class="line">&#123;</span><br><span class="line">pa++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pa &gt;= a.length() || (a[pa] &gt; b[pb]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>算法分析：两个字符串的排序需要（常规情况）$O(m log m)+O(n log n)$ 次操作（快排算法），然后需要线性扫描 $O(m+n)$ 次操作。</p></blockquote><p>解法三： 转换成素数</p><blockquote><p>思路分析：</p><blockquote><p>1）假定有一个仅由字母组成的字符串，按照从小到大的顺序，让每个字母与一个素数唯一对应，即用26个<strong>素数</strong>分别对应于<code>A</code>~<code>Z</code>；<br>2）遍历长字符串。求得每个字符对应素数的乘积；<br>3）遍历短字符串，判断乘积能否被短字符串中的字符对应的素数整除；<br>4）输出结果。</p></blockquote></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1.2：字符串包含，转换成素数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StringContainPrime</span><span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">26</span>] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, </span><br><span class="line"><span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">array</span>[a[i] - <span class="string">'A'</span>];</span><br><span class="line"><span class="keyword">if</span>(f % x)</span><br><span class="line">&#123;</span><br><span class="line">f *= x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.length(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">array</span>[b[j] - <span class="string">'A'</span>];</span><br><span class="line"><span class="keyword">if</span>(f % x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>算法分析：算法的时间复杂度为 $O(n)$ ，最好的情况为 $O(1)$（遍历短的字符串的第一个数，与长字符串素数的乘积相除，即出现余数，便可退出程序，返回 <code>false</code>）， <code>n</code> 为长字串的长度，空间复杂度为 $O(1)$。<br><strong>注意</strong>：此方法只有理论意义，因为整数乘积很大会造成溢出风险。</p></blockquote><p>解法四：<code>Hashtable</code>方法</p><blockquote><p>思路分析：先把长字符串 <code>A</code>中的所有字符都放入一个 <code>Hashtable</code> 里，然后轮询短字符串 <code>B</code>，看短字符串 <code>B</code> 的每个字符是否都在 <code>Hashtable</code> 里，如果都存在，说明长字符串 <code>A</code> 包含短字符串 <code>B</code>， 否则，说明不包含。</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1.2：字符串包含，Hashtable方法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StringContainHash</span><span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line">hash |= (<span class="number">1</span> &lt;&lt; (a[i] - <span class="string">'A'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.length(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(hash &amp; (<span class="number">1</span> &lt;&lt; (b[j] - <span class="string">'A'</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>算法分析：此方法实质是用一个整数代替了<code>Hashtable</code>，空间复杂度为 $O(1)$，时间复杂度为 $O(n)$。</p></blockquote></blockquote><ul><li>练习题（自己动手）</li></ul><blockquote><blockquote><p>变位词：如果两个字符串的字符一样，但是顺序不一样，被认为是兄弟字符串，比如 <code>bad</code> 和 <code>adb</code> 即为兄弟字符串，现提供一个字符串，如何在字典中迅速找到它的兄弟字符串，请描述数据结构和查询过程。</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《编程之法：面试和算法心得》的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一名大龄青年，为了即将踏入研究生之路，特此需要做一些计算机相关基础知识的积累，以弥补算法知识，谨以此开始自己的算法学习之路。&lt;/p&gt;
&lt;h4 id=&quot;算
      
    
    </summary>
    
      <category term="C++" scheme="https://zhangbc.github.io/categories/C/"/>
    
    
      <category term="数据结构与算法" scheme="https://zhangbc.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【Python编码规范】设计模式</title>
    <link href="https://zhangbc.github.io/2019/06/13/python_code91_05/"/>
    <id>https://zhangbc.github.io/2019/06/13/python_code91_05/</id>
    <published>2019-06-13T14:55:38.000Z</published>
    <updated>2019-08-08T15:33:23.828Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。</p></blockquote><p><strong>温馨提醒</strong>：在阅读本书之前，强烈建议先仔细阅读：<a href="https://legacy.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener"><strong>PEP</strong>规范</a>，增强代码的可阅读性，配合优雅的<a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">pycharm</a>编辑器(开启<code>pep8</code>检查)写出规范代码，是<code>Python</code>入门的第一步。</p><h2 id="建议50：利用模块实现单例模式"><a href="#建议50：利用模块实现单例模式" class="headerlink" title="建议50：利用模块实现单例模式"></a>建议50：利用模块实现单例模式</h2><p>1）所有的变量都会绑定到模块；<br>2）模块只初始化一次；<br>3）<code>import</code>机制是线程安全的。</p><h2 id="建议51-用mixin模式让程序更加灵活"><a href="#建议51-用mixin模式让程序更加灵活" class="headerlink" title="建议51: 用mixin模式让程序更加灵活"></a>建议51: 用mixin模式让程序更加灵活</h2><p><code>模板方法模式</code>：在一个方法中定义一个算法的骨架，并将一些实现步骤延迟到子类中。</p><p><code>Python</code> 中每一个类都有一个<code>__base__</code>属性，是一个元组，用来存放所有的基类，基类在运行中可以动态改变。</p><h2 id="建议52：用发布订阅模式实现松耦合"><a href="#建议52：用发布订阅模式实现松耦合" class="headerlink" title="建议52：用发布订阅模式实现松耦合"></a>建议52：用发布订阅模式实现松耦合</h2><p> 发布订阅模式（publish/subscribe或pub/sub）是一种编程模式，消息的发送者（发布者）不会发送其消息给特定的接收者（订阅者），而是将发布的消息分为不同的类别直接发布，并不关注订阅者是谁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">发布订阅模式实现</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="keyword">import</span> message</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">route_table = defaultdict(list)</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(topic, callback)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">    :param topic:</span></span><br><span class="line"><span class="string">    :param callback:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">​</span><br><span class="line">    <span class="keyword">if</span> callback <span class="keyword">in</span> route_table[topic]:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">​</span><br><span class="line">    route_table[topic].append(callback)</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub</span><span class="params">(topic, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">    :param topic:</span></span><br><span class="line"><span class="string">    :param args:</span></span><br><span class="line"><span class="string">    :param kwargs:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">​</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> route_table[topic]:</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">    :param name:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">​</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Hello, &#123;0&#125;.'</span>.format(name)</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">​</span><br><span class="line">    sub(<span class="string">'greet'</span>, greeting)</span><br><span class="line">    pub(<span class="string">'greet'</span>, <span class="string">'LaiYonghao'</span>)</span><br><span class="line">​</span><br><span class="line">    message.sub(<span class="string">'greet'</span>, greeting)</span><br><span class="line">    message.pub(<span class="string">'greet'</span>, <span class="string">'Welcome to Python'</span>)</span><br></pre></td></tr></table></figure><h2 id="建议53：用状态模式美化代码"><a href="#建议53：用状态模式美化代码" class="headerlink" title="建议53：用状态模式美化代码"></a>建议53：用状态模式美化代码</h2><p><code>状态模式</code>：当一个对象的内在状态改变时允许改变其行为，但这个对象看起来像是改变了其类。主要用于控制一个对象状态的条件表达式过于复杂的情况，其可把状态的判断逻辑转移到表示不同状态的一系列类中，进而把复杂的判断逻辑简化。<br>@stateful修饰函数，重载了被修饰类的<strong>getattr</strong>()方法从而使得类的实例方法能调用当前状态类的方法。被@stateful修饰后的类的实例是带有状态的，能够使用curr()查询当前状态，也可以使用switch()进行状态切换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">状态模式实现</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="keyword">from</span> state <span class="keyword">import</span> switch, stateful, State, behavior</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="meta">@stateful</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">​</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Workday</span><span class="params">(State)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">​</span><br><span class="line">        default = <span class="literal">True</span></span><br><span class="line">​</span><br><span class="line"><span class="meta">        @behavior</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">day</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'work hard.'</span></span><br><span class="line">​</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weekend</span><span class="params">(State)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">​</span><br><span class="line"><span class="meta">        @behavior</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">day</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'play harder.'</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">​</span><br><span class="line">    people = People()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">6</span>:</span><br><span class="line">            switch(people, People.Weekend)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            switch(people, People.Workday)</span><br><span class="line">        people.day()</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">​</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;温馨提醒&lt;/strong&gt;：在阅读本书之前，强烈建议先仔细阅读：&lt;a href=&quot;https://legacy.py
      
    
    </summary>
    
      <category term="Python" scheme="https://zhangbc.github.io/categories/python/"/>
    
    
      <category term="Python编码规范" scheme="https://zhangbc.github.io/tags/python-coding-convention/"/>
    
  </entry>
  
  <entry>
    <title>【Python编码规范】库</title>
    <link href="https://zhangbc.github.io/2019/05/12/python_code91_04/"/>
    <id>https://zhangbc.github.io/2019/05/12/python_code91_04/</id>
    <published>2019-05-12T15:01:16.000Z</published>
    <updated>2019-05-12T15:21:55.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。</p></blockquote><p><strong>温馨提醒</strong>：在阅读本书之前，强烈建议先仔细阅读：<a href="https://legacy.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener"><strong>PEP</strong>规范</a>，增强代码的可阅读性，配合优雅的<a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">pycharm</a>编辑器(开启<code>pep8</code>检查)写出规范代码，是<code>Python</code>入门的第一步。</p><h2 id="建议36：掌握字符串的基本用法"><a href="#建议36：掌握字符串的基本用法" class="headerlink" title="建议36：掌握字符串的基本用法"></a>建议36：掌握字符串的基本用法</h2><p><strong><code>Python</code>小技巧</strong>：<code>Python</code>遇到未闭合的小括号会自动将多行代码拼接为一行和把相邻的两个字符串字面量拼接在一起的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>st = (<span class="string">'select * '</span></span><br><span class="line"><span class="meta">... </span>      <span class="string">'from table '</span></span><br><span class="line"><span class="meta">... </span>      <span class="string">'whre field="value";'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>st</span><br><span class="line"><span class="string">'select * from table whre field="value";'</span></span><br></pre></td></tr></table></figure><ul><li>字符串用法举例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> isinstance(<span class="string">'hello world'</span>, basestring)  <span class="comment"># basestring是str与unicode的基类</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> isinstance(<span class="string">'hello world'</span>, unicode)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> isinstance(<span class="string">'hello world'</span>, str)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> isinstance(<span class="string">u'hello world'</span>, unicode)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li><code>split()</code>的陷阱示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' Hello World'</span>.split(<span class="string">' '</span>)</span><br><span class="line">[<span class="string">''</span>, <span class="string">'Hello'</span>, <span class="string">'World'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' Hello   World'</span>.split()</span><br><span class="line">[<span class="string">'Hello'</span>, <span class="string">'World'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' Hello   World'</span>.split(<span class="string">' '</span>)</span><br><span class="line">[<span class="string">''</span>, <span class="string">'Hello'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'World'</span>]</span><br></pre></td></tr></table></figure><ul><li><code>title()</code>应用示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.capwords(<span class="string">'hello  wOrld'</span>)</span><br><span class="line"><span class="string">'Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.capwords(<span class="string">' hello  wOrld '</span>)</span><br><span class="line"><span class="string">'Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' hello  wOrld '</span>.title()</span><br><span class="line"><span class="string">' Hello  World '</span></span><br></pre></td></tr></table></figure><h2 id="建议37：按需选择sort-或者sorted"><a href="#建议37：按需选择sort-或者sorted" class="headerlink" title="建议37：按需选择sort()或者sorted()"></a>建议37：按需选择sort()或者sorted()</h2><p><code>sorted(iterable[, cmp[, key[, reverse]]])</code>：作用于任何可迭代对象，返回一个排序后的列表；</p><p><code>sort(cmp[, key[, reverse]]])</code>：一般作用于列表，直接修改原有列表，返回为<code>None</code>。</p><p>1）<strong>对字典进行排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>phone_book = &#123;<span class="string">'Linda'</span>: <span class="string">'775'</span>, <span class="string">'Bob'</span>: <span class="string">'9349'</span>, <span class="string">'Carol'</span>: <span class="string">'5834'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_pb = sorted(phone_book.iteritems(), key=itemgetter(<span class="number">1</span>))  ​<span class="comment"># 按照字典的value进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> phone_book</span><br><span class="line">&#123;<span class="string">'Linda'</span>: <span class="string">'775'</span>, <span class="string">'Bob'</span>: <span class="string">'9349'</span>, <span class="string">'Carol'</span>: <span class="string">'5834'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> sorted_pb</span><br><span class="line">[(<span class="string">'Carol'</span>, <span class="string">'5834'</span>), (<span class="string">'Linda'</span>, <span class="string">'775'</span>), (<span class="string">'Bob'</span>, <span class="string">'9349'</span>)]</span><br></pre></td></tr></table></figure><p> 2）<strong>多维<code>list</code>排序</strong><br>​<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>game_result = [[<span class="string">'Linda'</span>, <span class="number">95</span>, <span class="string">'B'</span>], [<span class="string">'Bob'</span>, <span class="number">93</span>, <span class="string">'A'</span>], [<span class="string">'Carol'</span>, <span class="number">69</span>, <span class="string">'D'</span>], [<span class="string">'zhangs'</span>, <span class="number">95</span>, <span class="string">'A'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_res = sorted(game_result, key=itemgetter(<span class="number">1</span>, <span class="number">2</span>))  <span class="comment"># 按照学生成绩排序，成绩相同的按照等级排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> game_result</span><br><span class="line">[[<span class="string">'Linda'</span>, <span class="number">95</span>, <span class="string">'B'</span>], [<span class="string">'Bob'</span>, <span class="number">93</span>, <span class="string">'A'</span>], [<span class="string">'Carol'</span>, <span class="number">69</span>, <span class="string">'D'</span>], [<span class="string">'zhangs'</span>, <span class="number">95</span>, <span class="string">'A'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> sorted_res</span><br><span class="line">[[<span class="string">'Carol'</span>, <span class="number">69</span>, <span class="string">'D'</span>], [<span class="string">'Bob'</span>, <span class="number">93</span>, <span class="string">'A'</span>], [<span class="string">'zhangs'</span>, <span class="number">95</span>, <span class="string">'A'</span>], [<span class="string">'Linda'</span>, <span class="number">95</span>, <span class="string">'B'</span>]]</span><br></pre></td></tr></table></figure></p><p>3）<strong>字典中混合<code>list</code>排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_dict = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">'Li'</span>: [<span class="string">'M'</span>, <span class="number">7</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">'Zhang'</span>: [<span class="string">'E'</span>, <span class="number">2</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">'Du'</span>: [<span class="string">'P'</span>, <span class="number">3</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">'Ma'</span>: [<span class="string">'C'</span>, <span class="number">9</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">'Zhe'</span>: [<span class="string">'H'</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_ld = sorted(list_dict.iteritems(), key=<span class="keyword">lambda</span> (k, v): itemgetter(<span class="number">1</span>)(v))  <span class="comment"># 按照字典的value[m,n]中的n值排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> list_dict</span><br><span class="line">&#123;<span class="string">'Zhe'</span>: [<span class="string">'H'</span>, <span class="number">7</span>], <span class="string">'Zhang'</span>: [<span class="string">'E'</span>, <span class="number">2</span>], <span class="string">'Ma'</span>: [<span class="string">'C'</span>, <span class="number">9</span>], <span class="string">'Du'</span>: [<span class="string">'P'</span>, <span class="number">3</span>], <span class="string">'Li'</span>: [<span class="string">'M'</span>, <span class="number">7</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> sorted_ld</span><br><span class="line">[(<span class="string">'Zhang'</span>, [<span class="string">'E'</span>, <span class="number">2</span>]), (<span class="string">'Du'</span>, [<span class="string">'P'</span>, <span class="number">3</span>]), (<span class="string">'Zhe'</span>, [<span class="string">'H'</span>, <span class="number">7</span>]), (<span class="string">'Li'</span>, [<span class="string">'M'</span>, <span class="number">7</span>]), (<span class="string">'Ma'</span>, [<span class="string">'C'</span>, <span class="number">9</span>])]</span><br></pre></td></tr></table></figure><p>4）<strong><code>list</code>中混合字典排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>game_result = [</span><br><span class="line"><span class="meta">... </span>    &#123;<span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'wins'</span>: <span class="number">10</span>, <span class="string">'losses'</span>: <span class="number">3</span>, <span class="string">'rating'</span>: <span class="number">75</span>&#125;,</span><br><span class="line"><span class="meta">... </span>    &#123;<span class="string">'name'</span>: <span class="string">'David'</span>, <span class="string">'wins'</span>: <span class="number">3</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'rating'</span>: <span class="number">57</span>&#125;,</span><br><span class="line"><span class="meta">... </span>    &#123;<span class="string">'name'</span>: <span class="string">'Carol'</span>, <span class="string">'wins'</span>: <span class="number">4</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'rating'</span>: <span class="number">57</span>&#125;,</span><br><span class="line"><span class="meta">... </span>    &#123;<span class="string">'name'</span>: <span class="string">'Patty'</span>, <span class="string">'wins'</span>: <span class="number">9</span>, <span class="string">'losses'</span>: <span class="number">3</span>, <span class="string">'rating'</span>: <span class="number">71.48</span>&#125;</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_res = sorted(game_result, key=itemgetter(<span class="string">'rating'</span>, <span class="string">'name'</span>))   <span class="comment"># 按照name和rating排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> game_result</span><br><span class="line">[&#123;<span class="string">'wins'</span>: <span class="number">10</span>, <span class="string">'losses'</span>: <span class="number">3</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'rating'</span>: <span class="number">75</span>&#125;, &#123;<span class="string">'wins'</span>: <span class="number">3</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'name'</span>: <span class="string">'David'</span>, <span class="string">'rating'</span>: <span class="number">57</span>&#125;, &#123;<span class="string">'wins'</span>: <span class="number">4</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'name'</span>: <span class="string">'Carol'</span>, <span class="string">'rating'</span>: <span class="number">57</span>&#125;, &#123;<span class="string">'wins'</span>: <span class="number">9</span>, <span class="string">'losses'</span>: <span class="number">3</span>, <span class="string">'name'</span>: <span class="string">'Patty'</span>, <span class="string">'rating'</span>: <span class="number">71.48</span>&#125;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> sorted_res</span><br><span class="line">[&#123;<span class="string">'wins'</span>: <span class="number">4</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'name'</span>: <span class="string">'Carol'</span>, <span class="string">'rating'</span>: <span class="number">57</span>&#125;, &#123;<span class="string">'wins'</span>: <span class="number">3</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'name'</span>: <span class="string">'David'</span>, <span class="string">'rating'</span>: <span class="number">57</span>&#125;, &#123;<span class="string">'wins'</span>: <span class="number">9</span>, <span class="string">'losses'</span>: <span class="number">3</span>, <span class="string">'name'</span>: <span class="string">'Patty'</span>, <span class="string">'rating'</span>: <span class="number">71.48</span>&#125;, &#123;<span class="string">'wins'</span>: <span class="number">10</span>, <span class="string">'losses'</span>: <span class="number">3</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'rating'</span>: <span class="number">75</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="建议38：使用copy模块深拷贝对象"><a href="#建议38：使用copy模块深拷贝对象" class="headerlink" title="建议38：使用copy模块深拷贝对象"></a>建议38：使用copy模块深拷贝对象</h2><ul><li><code>浅拷贝(shallow copy)</code>：构造一个新的复合对象并将从原对象中发现的引用插入该对象中。实现方式有：工厂函数，切片操作，<code>copy</code>模块中<code>copy</code>操作等；</li><li><p><code>深拷贝(deep copy)</code>：构造一个新的复合对象，但是遇到引用会继续递归拷贝其所指向的具体内容，也就是说它会针对引用所指向的对象继续进行拷贝，因此产生的对象不受其他引用对象操作的影响。实现方式有<code>copy</code>模块中的<code>deepcopy()</code>操作。</p></li><li><p>实例</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, size, price)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.size = size</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_pizza_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name, self.size, self.price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_pizza_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Pizza name: &#123;0&#125;, size: &#123;1&#125;, price: &#123;2&#125;"</span>.format(self.name, self.size, self.price)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_size</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param size:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        self.size = size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_price</span><span class="params">(self, price)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param price:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.customer_name = name</span><br><span class="line">        self.pizza_list = list()</span><br><span class="line">        self.pizza_list.append(Pizza(<span class="string">"Mushroom"</span>, <span class="number">12</span>, <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order_more</span><span class="params">(self, pizza)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param pizza:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        self.pizza_list.append(pizza)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        self.customer_name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_oder_detail</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Customer name: &#123;0&#125;"</span>.format(self.customer_name)</span><br><span class="line">        <span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(self.pizza_list):</span><br><span class="line">            item.show_pizza_info()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_pizza</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param number:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.pizza_list[number]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customer_one</span><span class="params">()</span>:</span></span><br><span class="line">    c1 = Order(<span class="string">"zhang San"</span>)</span><br><span class="line">    c1.order_more(Pizza(<span class="string">"seafood"</span>, <span class="number">9</span>, <span class="number">40</span>))</span><br><span class="line">    c1.order_more(Pizza(<span class="string">"fruit"</span>, <span class="number">12</span>, <span class="number">35</span>))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"==============Customer one order info================="</span></span><br><span class="line">    c1.get_oder_detail()</span><br><span class="line"></span><br><span class="line">    c2 = copy(c1)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"==============Customer two order info(copy)================="</span></span><br><span class="line">    c2.change_name(<span class="string">"Li Si"</span>)</span><br><span class="line">    c2.get_pizza(<span class="number">2</span>).change_size(<span class="number">9</span>)</span><br><span class="line">    c2.get_pizza(<span class="number">2</span>).change_price(<span class="number">30</span>)</span><br><span class="line">    c2.get_oder_detail()</span><br><span class="line"></span><br><span class="line">    c3 = deepcopy(c1)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"==============Customer three order info(deepcopy)================="</span></span><br><span class="line">    c3.change_name(<span class="string">"Li Si"</span>)</span><br><span class="line">    c3.get_pizza(<span class="number">1</span>).change_size(<span class="number">10</span>)</span><br><span class="line">    c3.get_pizza(<span class="number">1</span>).change_price(<span class="number">50</span>)</span><br><span class="line">    c3.get_oder_detail()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"==============Customer one order info================="</span></span><br><span class="line">    c1.get_oder_detail()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    customer_one()</span><br></pre></td></tr></table></figure><ul><li>运行结果如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">==============Customer one order info=================</span><br><span class="line">Customer name: zhang San</span><br><span class="line">Pizza name: Mushroom, size: <span class="number">12</span>, price: <span class="number">30</span></span><br><span class="line">Pizza name: seafood, size: <span class="number">9</span>, price: <span class="number">40</span></span><br><span class="line">Pizza name: fruit, size: <span class="number">12</span>, price: <span class="number">35</span></span><br><span class="line">==============Customer two order info(copy)=================</span><br><span class="line">Customer name: Li Si</span><br><span class="line">Pizza name: Mushroom, size: <span class="number">12</span>, price: <span class="number">30</span></span><br><span class="line">Pizza name: seafood, size: <span class="number">9</span>, price: <span class="number">40</span></span><br><span class="line">Pizza name: fruit, size: <span class="number">9</span>, price: <span class="number">30</span></span><br><span class="line">==============Customer three order info(deepcopy)=================</span><br><span class="line">Customer name: Li Si</span><br><span class="line">Pizza name: Mushroom, size: <span class="number">12</span>, price: <span class="number">30</span></span><br><span class="line">Pizza name: seafood, size: <span class="number">10</span>, price: <span class="number">50</span></span><br><span class="line">Pizza name: fruit, size: <span class="number">9</span>, price: <span class="number">30</span></span><br><span class="line">==============Customer one order info=================</span><br><span class="line">Customer name: zhang San</span><br><span class="line">Pizza name: Mushroom, size: <span class="number">12</span>, price: <span class="number">30</span></span><br><span class="line">Pizza name: seafood, size: <span class="number">9</span>, price: <span class="number">40</span></span><br><span class="line">Pizza name: fruit, size: <span class="number">9</span>, price: <span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="建议39：使用Counter进行计数统计"><a href="#建议39：使用Counter进行计数统计" class="headerlink" title="建议39：使用Counter进行计数统计"></a>建议39：使用Counter进行计数统计</h2><ul><li>使用<code>dict</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_data = [<span class="string">'a'</span>, <span class="number">2</span>, <span class="string">'2'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'2'</span>, <span class="string">'b'</span>, <span class="number">7</span>, <span class="string">'a'</span>, <span class="number">5</span>, <span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count_frq = dict()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(some_data):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> item <span class="keyword">in</span> count_frq:</span><br><span class="line"><span class="meta">... </span>        count_frq[item] += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        count_frq[item] = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> count_frq</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">2</span>, <span class="number">7</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">1</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>defaultdict</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_data = [<span class="string">'a'</span>, <span class="number">2</span>, <span class="string">'2'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'2'</span>, <span class="string">'b'</span>, <span class="number">7</span>, <span class="string">'a'</span>, <span class="number">5</span>, <span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count_frq = defaultdict(int)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(some_data):</span><br><span class="line"><span class="meta">... </span>    count_frq[item] += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> count_frq</span><br><span class="line">defaultdict(&lt;type <span class="string">'int'</span>&gt;, &#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">2</span>, <span class="number">7</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">1</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用<code>set</code>与<code>list</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_data = [<span class="string">'a'</span>, <span class="number">2</span>, <span class="string">'2'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'2'</span>, <span class="string">'b'</span>, <span class="number">7</span>, <span class="string">'a'</span>, <span class="number">5</span>, <span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count_set = set(some_data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count_list = list()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(some_data):</span><br><span class="line"><span class="meta">... </span>    count_list.append((item, some_data.count(item)))</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> count_list</span><br><span class="line">[(<span class="string">'a'</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="string">'2'</span>, <span class="number">2</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">5</span>, <span class="number">2</span>), (<span class="string">'2'</span>, <span class="number">2</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="number">7</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">2</span>), (<span class="string">'d'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">3</span>), (<span class="string">'z'</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><ul><li>使用更为优雅的<code>Pythonic</code>方法—<code>collections.Counter</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_data = [<span class="string">'a'</span>, <span class="number">2</span>, <span class="string">'2'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'2'</span>, <span class="string">'b'</span>, <span class="number">7</span>, <span class="string">'a'</span>, <span class="number">5</span>, <span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Counter(some_data)</span><br><span class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="number">5</span>: <span class="number">2</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">1</span>, <span class="string">'z'</span>: <span class="number">1</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Counter(<span class="string">'success'</span>)</span><br><span class="line">Counter(&#123;<span class="string">'s'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'e'</span>: <span class="number">1</span>, <span class="string">'u'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Counter(s=<span class="number">3</span>, c=<span class="number">2</span>, e=<span class="number">1</span>, u=<span class="number">1</span>)</span><br><span class="line">Counter(&#123;<span class="string">'s'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'u'</span>: <span class="number">1</span>, <span class="string">'e'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Counter(&#123;<span class="string">'s'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'u'</span>: <span class="number">1</span>, <span class="string">'e'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">Counter(&#123;<span class="string">'s'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'u'</span>: <span class="number">1</span>, <span class="string">'e'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> list(Counter(some_data).elements())</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="number">2</span>, <span class="string">'b'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'z'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Counter(some_data).most_common(<span class="number">3</span>) <span class="comment"># 出现频次最高的前三个字符</span></span><br><span class="line">[(<span class="string">'a'</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">2</span>), (<span class="string">'2'</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><h2 id="建议40：深入理解ConfigParser"><a href="#建议40：深入理解ConfigParser" class="headerlink" title="建议40：深入理解ConfigParser"></a>建议40：深入理解ConfigParser</h2><ul><li>实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conf = ConfigParser.ConfigParser()</span><br><span class="line">conf.read(<span class="string">'config.ini'</span>)</span><br><span class="line"><span class="keyword">print</span> conf.get(<span class="string">'default'</span>, <span class="string">'host'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conf = ConfigParser.ConfigParser()</span><br><span class="line">conf.read(<span class="string">'config.ini'</span>)</span><br><span class="line"><span class="keyword">print</span> conf.get(<span class="string">'online'</span>, <span class="string">'conn_str'</span>)   <span class="comment"># 仅在default下</span></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line">====================config.ini=========================</span><br><span class="line"></span><br><span class="line">[default]</span><br><span class="line">conn_str = %(dbn)s://%(user)s:%(pw)s@%(host)s:%(port)s/%(db)s</span><br><span class="line">dbn = msyql</span><br><span class="line">host = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">user = root</span><br><span class="line">port = <span class="number">3306</span></span><br><span class="line">pw = xxxxxx</span><br><span class="line">db = test</span><br><span class="line"></span><br><span class="line">[online]</span><br><span class="line">conn_str = %(dbn)s://%(user)s:%(pw)s@%(host)s:%(port)s/%(db)s</span><br><span class="line">dbn = msyql</span><br><span class="line">host = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">user = root</span><br><span class="line">port = <span class="number">3306</span></span><br><span class="line">pw = xxxxxx</span><br><span class="line">db = test</span><br></pre></td></tr></table></figure><h2 id="建议41：使用argparese处理命令行参数"><a href="#建议41：使用argparese处理命令行参数" class="headerlink" title="建议41：使用argparese处理命令行参数"></a>建议41：使用argparese处理命令行参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, dest=<span class="string">'verbose'</span>, action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args</span><br></pre></td></tr></table></figure><h2 id="建议42：使用pandas处理大型csv文件"><a href="#建议42：使用pandas处理大型csv文件" class="headerlink" title="建议42：使用pandas处理大型csv文件"></a>建议42：使用pandas处理大型csv文件</h2><p><code>csv</code>作为一种逗号分隔型值的纯文本格式文件，常见于数据库数据的导入导出、数据分析中记录的存储等。</p><p>以下列举几个与<code>csv</code>处理相关的<code>API</code>：</p><ul><li><code>csv.reader(csvfile[, dialect=&#39;excel&#39;][, fmtparam])</code>：用于<code>CSV</code>文件的读取，返回一个<code>reader</code>对象用于在<code>CSV</code>文件中进行行迭代；</li><li><code>csv.writer(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code>：用于写入<code>CSV</code>文件；</li><li><code>csv.DictReader(csvfile, fieldnames=None, restKey=&#39;&#39;, restval=&#39;&#39;, dialect=&#39;excel&#39;, *args, **kwds)</code>：用于支持字典的读取；</li><li><p><code>csv.DictReader(csvfile, fieldnames=None, restval=&#39;&#39;, extrasaction=&#39;raise&#39;, dialect=&#39;excel&#39;, *args, **kwds)</code>：用于支持字典的写入。</p></li><li><p>实例</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入csv</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'csv_test.csv'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fields = [<span class="string">'Tran_date'</span>, <span class="string">'Product'</span>, <span class="string">'Price'</span>, <span class="string">'PaymentType'</span>]</span><br><span class="line">    writer = csv.DictWriter(fp, fieldnames=fields)</span><br><span class="line">    writer.writerow(dict(zip(fields, fields)))</span><br><span class="line">    data = &#123;<span class="string">'Tran_date'</span>: <span class="string">'1/2/09 6:17'</span>,</span><br><span class="line">            <span class="string">'Product'</span>: <span class="string">'Nick'</span>,</span><br><span class="line">            <span class="string">'Price'</span>: <span class="string">'1200'</span>,</span><br><span class="line">            <span class="string">'PaymentType'</span>: <span class="string">'Mastercard'</span>&#125;</span><br><span class="line">    writer.writerow(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取csv</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'csv_test.csv'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> csv.DictReader(fp):</span><br><span class="line">        <span class="keyword">print</span> item</span><br></pre></td></tr></table></figure><p><code>csv</code>使用非常简单，基本可以满足大部分需求，但是对于上百<code>MB</code>或<code>G</code>级别以上的文件处理无能为力。这种情况下，可以考虑使用<code>pandas</code>模块，它支持以下两种数据结构。</p><ul><li><code>Series</code>：是一种类似数组的带索引的一维数据结构，支持的类型与<code>NumPy</code>兼容。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = Series([<span class="number">1</span>, <span class="string">'a'</span>, (<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a         <span class="number">1</span></span><br><span class="line">b         a</span><br><span class="line">c    (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">d         <span class="number">3</span></span><br><span class="line">dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj_dic = Series(&#123;<span class="string">'Book'</span>: <span class="string">'Python'</span>, <span class="string">'Author'</span>: <span class="string">'Dan'</span>, <span class="string">'ISBN'</span>: <span class="string">'011334'</span>, <span class="string">'Price'</span>: <span class="number">25</span>&#125;, index=[<span class="string">'book'</span>, <span class="string">'Author'</span>, <span class="string">'ISBN'</span>, <span class="string">'Price'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj_dic</span><br><span class="line">book         NaN  <span class="comment"># 匹配失败，导致数据丢失</span></span><br><span class="line">Author       Dan</span><br><span class="line">ISBN      <span class="number">011334</span></span><br><span class="line">Price         <span class="number">25</span></span><br><span class="line">dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj_dic.isnull()</span><br><span class="line">book       <span class="literal">True</span></span><br><span class="line">Author    <span class="literal">False</span></span><br><span class="line">ISBN      <span class="literal">False</span></span><br><span class="line">Price     <span class="literal">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><ul><li><code>DataFrame</code>：类似于电子表格，其数据为排好序的数据列的集合，每一列都可以是不同的数据类型，类似一个二维数组，支持行和列的索引。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'OrderDate'</span>: [<span class="string">'1-6-10'</span>, <span class="string">'1-23-10'</span>, <span class="string">'2-9-10'</span>, <span class="string">'2-26-10'</span>, <span class="string">'3-15-10'</span>],</span><br><span class="line"><span class="meta">... </span>        <span class="string">'Region'</span>: [<span class="string">'East'</span>, <span class="string">'Central'</span>, <span class="string">'Central'</span>, <span class="string">'West'</span>, <span class="string">'East'</span>],</span><br><span class="line"><span class="meta">... </span>        <span class="string">'Rep'</span>: [<span class="string">'Jones'</span>, <span class="string">'Kivell'</span>, <span class="string">'Jardine'</span>, <span class="string">'Gill'</span>, <span class="string">'Sorvino'</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>DataFrame(data, columns=[<span class="string">'OrderDate'</span>, <span class="string">'Region'</span>, <span class="string">'Rep'</span>])</span><br><span class="line">  OrderDate   Region      Rep</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span><span class="number">-6</span><span class="number">-10</span>     East    Jones</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span><span class="number">-23</span><span class="number">-10</span>  Central   Kivell</span><br><span class="line"><span class="number">2</span>    <span class="number">2</span><span class="number">-9</span><span class="number">-10</span>  Central  Jardine</span><br><span class="line"><span class="number">3</span>   <span class="number">2</span><span class="number">-26</span><span class="number">-10</span>     West     Gill</span><br><span class="line"><span class="number">4</span>   <span class="number">3</span><span class="number">-15</span><span class="number">-10</span>     East  Sorvino</span><br></pre></td></tr></table></figure><p><code>pandas</code>中处理<code>CSV</code>文件的函数主要为<code>read_csv()</code>和<code>to_csv()</code>。</p><ul><li>指定读取部分列和文件的行数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.read_csv(<span class="string">'/home/projects/pythoner/quality_code/csv_test.csv'</span>, nrows=<span class="number">5</span>, usecols=[<span class="string">'Tran_date'</span>, <span class="string">'Product'</span>, <span class="string">'Price'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">     Tran_date Product  Price</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span></span><br><span class="line"><span class="number">3</span>  <span class="number">4</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span></span><br><span class="line"><span class="number">4</span>  <span class="number">5</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span></span><br></pre></td></tr></table></figure><ul><li>设置<code>CSV</code>文件与<code>excel</code>兼容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> csv</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dia = csv.excel()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dia.delimiter = <span class="string">","</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="string">'/home/projects/pythoner/quality_code/csv_test.csv'</span>, dialect=dia, error_bad_lines=<span class="literal">False</span>)</span><br><span class="line">      Tran_date Product  Price PaymentType</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">2</span>   <span class="number">3</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">4</span>   <span class="number">5</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">5</span>   <span class="number">6</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">6</span>   <span class="number">7</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">7</span>   <span class="number">8</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">8</span>   <span class="number">9</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">9</span>  <span class="number">10</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br></pre></td></tr></table></figure><ul><li>对文件进行分块处理并返回一个可迭代的对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reader = pd.read_table(<span class="string">'/home/projects/pythoner/quality_code/csv_test.csv'</span>, chunksize=<span class="number">5</span>, iterator=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter(reader).next()</span><br><span class="line">  Tran_date,Product,Price,PaymentType</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br><span class="line"><span class="number">1</span>    <span class="number">2</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br><span class="line"><span class="number">2</span>    <span class="number">3</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br><span class="line"><span class="number">3</span>    <span class="number">4</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br><span class="line"><span class="number">4</span>    <span class="number">5</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter(reader).next()</span><br><span class="line">  Tran_date,Product,Price,PaymentType</span><br><span class="line"><span class="number">5</span>    <span class="number">6</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br><span class="line"><span class="number">6</span>    <span class="number">7</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br><span class="line"><span class="number">7</span>    <span class="number">8</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br><span class="line"><span class="number">8</span>    <span class="number">9</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br><span class="line"><span class="number">9</span>   <span class="number">10</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>,Nick,<span class="number">1200</span>,Mastercard</span><br></pre></td></tr></table></figure><ul><li>当文件格式相似时，支持多个文件合并处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>file_list = [<span class="string">'/home/projects/pythoner/quality_code/csv_test1.csv'</span>, <span class="string">'/home/projects/pythoner/quality_code/csv_test2.csv'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dfs = [pd.read_csv(f) <span class="keyword">for</span> f <span class="keyword">in</span> file_list]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>total_df = pd.concat(dfs)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>total_df</span><br><span class="line">      Tran_date Product  Price PaymentType</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">2</span>   <span class="number">3</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">4</span>   <span class="number">5</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">0</span>   <span class="number">6</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">1</span>   <span class="number">7</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">2</span>   <span class="number">8</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">3</span>   <span class="number">9</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br><span class="line"><span class="number">4</span>  <span class="number">10</span>/<span class="number">2</span>/<span class="number">09</span> <span class="number">6</span>:<span class="number">17</span>    Nick   <span class="number">1200</span>  Mastercard</span><br></pre></td></tr></table></figure><h2 id="建议43：一般情况使用ElementTree解析XML"><a href="#建议43：一般情况使用ElementTree解析XML" class="headerlink" title="建议43：一般情况使用ElementTree解析XML"></a>建议43：一般情况使用ElementTree解析XML</h2><p><code>ElementTree</code>解析<code>XML</code>具有以下特性：</p><ul><li>使用简单，将整个<code>XML</code>文件以树的形式展示，每一个元素的属性以字典的形式表示，非常方便处理；</li><li>内存上消耗明显低于<code>DOM</code>解析；</li><li>支持<code>XPath</code>查询，非常方便获取任意结点的值。</li></ul><h2 id="建议44：理解模块pickle优劣"><a href="#建议44：理解模块pickle优劣" class="headerlink" title="建议44：理解模块pickle优劣"></a>建议44：理解模块pickle优劣</h2><p>1）<code>pickle.dump(obj,file[,protocol])</code>：序列化数据到一个文件描述符。 其中：<code>protocol</code>为序列化使用的协议版本，0表示<code>ASCII</code>协议，为默认值；1表示老式的二进制协议；2表示2.3版本引入的新二进制协议。</p><p>2）<code>pickle.load()</code>：表示把文件中的对象恢复为原来的对象，这个过程也被称为<code>反序列化</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cPickle <span class="keyword">as</span> pickle</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">my_data = &#123;<span class="string">"name"</span>: <span class="string">"Python"</span>, <span class="string">"type"</span>: <span class="string">"language"</span>, <span class="string">"version"</span>: <span class="string">"2.7.6"</span>&#125;</span><br><span class="line">fp = open(<span class="string">'pickle.dat'</span>, <span class="string">'wb'</span>)</span><br><span class="line">pickle.dump(my_data, fp)</span><br><span class="line">fp.close()</span><br><span class="line">​</span><br><span class="line">fp = open(<span class="string">'pickle.dat'</span>, <span class="string">'rb'</span>)</span><br><span class="line">out = pickle.load(fp)</span><br><span class="line"><span class="keyword">print</span> out</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><ul><li><code>pickle</code>的优点：</li></ul><blockquote><p>1）接口简单，容易使用；<br>2）<code>pickle</code>的存储格式具有通用性，能够被不同平台的<code>Python</code>解析器共享；<br>3）支持的数据类型广泛；<br>4）<code>pickle</code>模块是可扩展的；<br>5）能够自动维护对象间的引用。</p></blockquote><ul><li><code>pickle</code>的缺点：</li></ul><blockquote><p>1）<code>pickle</code>不能保证操作的原子性；<br>2）<code>pickle</code>存在安全性问题；<br>3）<code>pickle</code>协议是<code>Python</code>特定的，不同语言之间的兼容性难以保证。</p></blockquote><h2 id="建议45：序列化的另一个不错的选择—JSON"><a href="#建议45：序列化的另一个不错的选择—JSON" class="headerlink" title="建议45：序列化的另一个不错的选择—JSON"></a>建议45：序列化的另一个不错的选择—JSON</h2><p><code>JSON</code>具有以下优势：</p><ul><li>使用简单，支持多种数据类型；仅存在两大数据结构：名称/值对的集合（对象，记录，结构，字典，散列表，键列表，关联数组等）；值的有序列表（数组，向量，列表，序列等）。</li><li>存储格式可读性好，容易修改；</li><li><code>json</code>支持跨平台跨语言操作，能够轻易被其他语言解析，存储格式较紧凑，所占空间较小；</li><li>具有较强的扩展性；</li><li><code>json</code>在序列化<code>datetime</code>时会抛出<code>TypeError</code>异常，需要对<code>json</code>本身的<code>JSONEncoder</code>进行扩展。</li></ul><h2 id="建议46：使用traceback获取栈信息"><a href="#建议46：使用traceback获取栈信息" class="headerlink" title="建议46：使用traceback获取栈信息"></a>建议46：使用traceback获取栈信息</h2><ul><li>实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> trackback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    g_list[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">return</span> g()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> h()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">del</span> g_list[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> i()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">i</span><span class="params">()</span>:</span></span><br><span class="line">    g_list.append(<span class="string">'i'</span>)</span><br><span class="line">    <span class="keyword">print</span> g_list[<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f()</span><br><span class="line">    <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Error: &#123;0&#125;'</span>.format(e)</span><br><span class="line">        traceback.print_exc()</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Error: list index out of range</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/home/projects/pythoner/quality_code/configure_parser.py"</span>, line <span class="number">33</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    f()</span><br><span class="line">  File <span class="string">"/home/projects/pythoner/quality_code/configure_parser.py"</span>, line <span class="number">13</span>, <span class="keyword">in</span> f</span><br><span class="line">    <span class="keyword">return</span> g()</span><br><span class="line">  File <span class="string">"/home/projects/pythoner/quality_code/configure_parser.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> g</span><br><span class="line">    <span class="keyword">return</span> h()</span><br><span class="line">  File <span class="string">"/home/projects/pythoner/quality_code/configure_parser.py"</span>, line <span class="number">22</span>, <span class="keyword">in</span> h</span><br><span class="line">    <span class="keyword">return</span> i()</span><br><span class="line">  File <span class="string">"/home/projects/pythoner/quality_code/configure_parser.py"</span>, line <span class="number">27</span>, <span class="keyword">in</span> i</span><br><span class="line">    <span class="keyword">print</span> g_list[<span class="number">7</span>]</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><h2 id="建议47：使用logging记录日志信息"><a href="#建议47：使用logging记录日志信息" class="headerlink" title="建议47：使用logging记录日志信息"></a>建议47：使用logging记录日志信息</h2><p>1，<strong>日志级别</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">Level</th><th style="text-align:left">使用情形</th></tr></thead><tbody><tr><td style="text-align:left">DEBUG</td><td style="text-align:left">详细的信息，在追踪问题时使用</td></tr><tr><td style="text-align:left">INFO</td><td style="text-align:left">正常的信息</td></tr><tr><td style="text-align:left">WARNING</td><td style="text-align:left">一些不可预见的问题发生，或者将要发生，如磁盘空间低等，但不影响程序的运行</td></tr><tr><td style="text-align:left">ERROR</td><td style="text-align:left">由于某些严重的问题，程序中的一些功能受到影响</td></tr><tr><td style="text-align:left">CRITICAL</td><td style="text-align:left">严重的错误，或者程序本身不能继续运行</td></tr></tbody></table></div><p>2， <strong><code>logging lib</code>的四个主要对象</strong></p><ul><li><strong><code>logger</code></strong>：程序信息输出的接口，分散在不同的代码中，使得程序可以在运行时记录相应的信息，并根据设置的日志级别或者<code>filter</code>来决定哪些信息需要输出，并将这些信息分发到其关联的<code>handler</code>。</li><li><strong><code>Handler</code></strong>：用来处理信息的输出，可以将信息输出到控制台、文件或者网络。</li><li><strong><code>Formatter</code></strong>：决定<code>log</code>信息的格式。</li><li><strong><code>Filter</code></strong>：决定哪些信息需要输出，可以被<code>handler</code>和<code>logger</code>使用，支持层次关系。</li></ul><p><code>logging.basicConfig([**kwargs])</code> 提供对日志系统的基本配置，默认使用<code>StreamHandler</code>和<code>Formatter</code>并添加到<code>root logger</code>。字典参数列表如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">格式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">filename</td><td style="text-align:left">指定FileHandler的文件名，而不是默认的StreamHandler</td></tr><tr><td style="text-align:left">filemode</td><td style="text-align:left">打开文件的模式，默认为‘a’</td></tr><tr><td style="text-align:left">format</td><td style="text-align:left">输出格式字符串</td></tr><tr><td style="text-align:left">datefmt</td><td style="text-align:left">日期格式</td></tr><tr><td style="text-align:left">level</td><td style="text-align:left">设置root logger的日志级别</td></tr><tr><td style="text-align:left">stream</td><td style="text-align:left">指定StreamHandler，若与filename冲突，忽略stream</td></tr></tbody></table></div><ul><li>实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">(file_name, level=logging.INFO)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    设置日志文件输出</span></span><br><span class="line"><span class="string">    :param file_name: 文件名称</span></span><br><span class="line"><span class="string">    :param level: 日志严重级别 ==&gt; CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    logger = logging.getLogger()</span><br><span class="line">    logger.setLevel(level)</span><br><span class="line">    file_handler = logging.FileHandler(file_name, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">    file_handler.setLevel(level)</span><br><span class="line">    formatter = logging.Formatter(<span class="string">"%(asctime)s %(name)s %(levelname)s [line %(lineno)s]: %(message)s"</span>)</span><br><span class="line">    file_handler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(file_handler)</span><br></pre></td></tr></table></figure><p>3，<strong>使用建议</strong></p><blockquote><p>1）尽量为<code>logging</code>取一个名字而不是采用默认，<code>eg</code>：<code>logger=logging.getLogger(__name__)；</code><br>2）为了方便找出问题，<code>logging</code>的名字建议以模块或者<code>class</code>命名；<br>3）<code>logging</code>只是线程安全的，不支持多进程写入同一个日志文件。</p></blockquote><h2 id="建议48：使用threading模块编写多线程程序"><a href="#建议48：使用threading模块编写多线程程序" class="headerlink" title="建议48：使用threading模块编写多线程程序"></a>建议48：使用threading模块编写多线程程序</h2><ul><li><code>Python</code>多线程支持两种方式创建：</li></ul><blockquote><p>1）通过继承<code>Thread</code>类，重写其<code>run()</code>方法(不是<code>start()</code>方法)；不支持守护线程；<br>2）创建<code>threading.Thread</code>对象,在它的初始化函数（<code>__init__()</code>）中将可调用对象作为参数传入。</p></blockquote><h2 id="建议49：使用Queue使多线程编程更加安全"><a href="#建议49：使用Queue使多线程编程更加安全" class="headerlink" title="建议49：使用Queue使多线程编程更加安全"></a>建议49：使用Queue使多线程编程更加安全</h2><p><code>Python</code>中的<code>Queue</code>模块提供了以下队列：</p><ul><li><strong><code>Queue.Queue(maxsize)</code></strong>：先进先出，<code>maxsize</code>为队列大小，其值为非正数时为无限循环队列；</li><li><strong><code>Queue.LifoQueue(maxsize)</code></strong>：后进先出，相当于栈；</li><li><p><strong><code>Queue.PriorityQueue(maxsize)</code></strong>：优先级队列。</p></li><li><p>生产-消费者模式实现<code>demo</code>：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">WRITE_LOCK = threading.Lock()</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生产-消费者模式（生产者）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue, condition, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">        :param queue:</span></span><br><span class="line"><span class="string">        :param condition:</span></span><br><span class="line"><span class="string">        :param name:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">​</span><br><span class="line">        super(Producer, self).__init__()</span><br><span class="line">        self.queue = queue</span><br><span class="line">        self.name = name</span><br><span class="line">        self.condition = condition</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Producer &#123;0&#125; started."</span>.format(self.name)</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">​</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">global</span> WRITE_LOCK</span><br><span class="line">            self.condition.acquire()  <span class="comment"># 获取锁对象</span></span><br><span class="line">            <span class="keyword">if</span> self.queue.full():</span><br><span class="line">                <span class="keyword">with</span> WRITE_LOCK:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'Queue is full, producer wait!'</span></span><br><span class="line">                self.condition.wait()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                value = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">                <span class="keyword">with</span> WRITE_LOCK:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"&#123;name&#125; put value: &#123;value&#125; into queue."</span>\</span><br><span class="line">                        .format(name=self.name, value=value)</span><br><span class="line">                    self.queue.put(<span class="string">"&#123;0&#125;: &#123;1&#125;"</span>.format(self.name, value))</span><br><span class="line">                    self.condition.notify()</span><br><span class="line">            self.condition.release()</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生产-消费者模式（消费者）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue, condition, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">        :param queue:</span></span><br><span class="line"><span class="string">        :param condition:</span></span><br><span class="line"><span class="string">        :param name:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">​</span><br><span class="line">        super(Consumer, self).__init__()</span><br><span class="line">        self.queue = queue</span><br><span class="line">        self.name = name</span><br><span class="line">        self.condition = condition</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Consumer &#123;0&#125; started."</span>.format(self.name)</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">​</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">global</span> WRITE_LOCK</span><br><span class="line">            self.condition.acquire()  <span class="comment"># 获取锁对象</span></span><br><span class="line">            <span class="keyword">if</span> self.queue.empty():</span><br><span class="line">                <span class="keyword">with</span> WRITE_LOCK:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'Queue is empty, consumer wait!'</span></span><br><span class="line">                self.condition.wait()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                value = self.queue.get()</span><br><span class="line">                <span class="keyword">with</span> WRITE_LOCK:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"&#123;name&#125; get value: &#123;value&#125; from queue."</span>\</span><br><span class="line">                        .format(name=self.name, value=value)</span><br><span class="line">                    self.condition.notify()</span><br><span class="line">            self.condition.release()</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">​</span><br><span class="line">    qe = Queue.Queue(<span class="number">10</span>)</span><br><span class="line">    con = threading.Condition()</span><br><span class="line">    producer_1 = Producer(qe, con, <span class="string">"P1"</span>)</span><br><span class="line">    producer_1.start()</span><br><span class="line">    <span class="comment"># producer_2 = Producer(qe, con, "P2")</span></span><br><span class="line">    <span class="comment"># producer_2.start()</span></span><br><span class="line">​</span><br><span class="line">    consumer_1 = Consumer(qe, con, <span class="string">"C1"</span>)</span><br><span class="line">    consumer_1.start()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;温馨提醒&lt;/strong&gt;：在阅读本书之前，强烈建议先仔细阅读：&lt;a href=&quot;https://legacy.py
      
    
    </summary>
    
      <category term="Python" scheme="https://zhangbc.github.io/categories/python/"/>
    
    
      <category term="Python编码规范" scheme="https://zhangbc.github.io/tags/python-coding-convention/"/>
    
  </entry>
  
  <entry>
    <title>【Python爬虫实例】Python解决521反爬方案</title>
    <link href="https://zhangbc.github.io/2019/05/05/python_anti_spider_521/"/>
    <id>https://zhangbc.github.io/2019/05/05/python_anti_spider_521/</id>
    <published>2019-05-05T15:49:14.000Z</published>
    <updated>2019-05-05T16:09:48.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考文献：<a href="https://github.com/xiantang/Spider/blob/master/Anti_Anti_Spider_521/pass_521.py" target="_blank" rel="noopener">https://github.com/xiantang/Spider/blob/master/Anti_Anti_Spider_521/pass_521.py</a></p></blockquote><h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p><code>Python</code>在爬虫方面的优势，想必业界无人不知，随着互联网信息时代的的发展，<code>Python</code>爬虫日益突出的地位越来越明显，爬虫与反爬虫愈演愈烈。下面分析一例关于返回<code>HTTP</code>状态码为<code>521</code>的案例。</p><h2 id="案例准备"><a href="#案例准备" class="headerlink" title="案例准备"></a>案例准备</h2><ul><li>案例网站：<a href="https://www.yidaiyilu.gov.cn" target="_blank" rel="noopener">【中国一带一路官网】</a>， 以抓取文章<a href="https://www.yidaiyilu.gov.cn/xwzx/gnxw/87373.htm" target="_blank" rel="noopener">【“一带一路”建设成果图鉴丨陆海内外联动，湖北推动产能合作纵深推进】</a>为例，进行深度剖析。</li></ul><h2 id="案例剖析"><a href="#案例剖析" class="headerlink" title="案例剖析"></a>案例剖析</h2><p>1） 浏览器访问<a href="https://www.yidaiyilu.gov.cn/xwzx/gnxw/87373.htm" target="_blank" rel="noopener">【“一带一路”建设成果图鉴丨陆海内外联动，湖北推动产能合作纵深推进】</a>：<br><img src="/images/python_anti_spider_521_url_yidaiyilu_20190505.png" alt="URL访问"></p><p>2）写<code>ython</code>代码访问，查看<code>http(s)</code>返回状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USER_AGENT = UserAgent()</span><br><span class="line">ua = USER_AGENT.random</span><br><span class="line">url = <span class="string">r'https://www.yidaiyilu.gov.cn/xwzx/gnxw/87373.htm'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"www.yidaiyilu.gov.cn"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: ua</span><br><span class="line">&#125;</span><br><span class="line">rs = requests.session()</span><br><span class="line">resp = rs.get(url)</span><br><span class="line">print(resp.status_code)</span><br><span class="line">print(resp.text)</span><br></pre></td></tr></table></figure><p>不幸的是，返回的<code>http</code>的状态码却是<code>501</code>，<code>text</code>为一段混淆的<code>js</code>代码。</p><p><img src="/images/python_anti_spider_521_requests_20190505.png" alt="request_501"></p><p>3）百度查资料，推荐为文首的<a href="https://github.com/xiantang/Spider/blob/master/Anti_Anti_Spider_521/pass_521.py" target="_blank" rel="noopener">【参考文献】</a></p><p>继续参照资料修改代码，<code>Python</code>执行<code>JS</code>首选<code>execjs</code>，<code>pip</code>安装如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyExecJS</span><br></pre></td></tr></table></figure></p><p>将请求到的<code>js</code>执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text_521 = <span class="string">''</span>.join(re.findall(<span class="string">'&lt;script&gt;(.*?)&lt;/script&gt;'</span>, resp.text))</span><br><span class="line">func_return = text_521.replace(<span class="string">'eval'</span>, <span class="string">'return'</span>)</span><br><span class="line">content = execjs.compile(func_return)</span><br><span class="line">print(content.call(<span class="string">'f'</span>))</span><br></pre></td></tr></table></figure><p>将返回的结果<code>print</code>发现还是一段<code>JS</code>，标准格式化（<a href="https://www.html.cn/tool/js_beautify/" target="_blank" rel="noopener">【格式化<code>Javascript</code>工具】</a>），结果如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _2i = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="string">'location.href=location.pathname+location.search.replace(/[\?|&amp;]captcha-challenge/,\'\')'</span>, <span class="number">1500</span>);</span><br><span class="line">        <span class="built_in">document</span>.cookie = <span class="string">'__jsl_clearance=1557019601.296|0|'</span> + (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> _2i = [([(-~[] &lt;&lt; -~[])] * (((+!+&#123;&#125;) + [(-~[] &lt;&lt; -~[])] &gt;&gt; (-~[] &lt;&lt; -~[]))) + []), (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]) + [<span class="number">3</span> - ~(+!+&#123;&#125;) - ~(+!+&#123;&#125;)], (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]) + [<span class="number">5</span>], (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]) + [~~<span class="string">''</span>], (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]), [-~~~!&#123;&#125; + [~~</span><br><span class="line">                                []</span><br><span class="line">                            ] - (-~~~!&#123;&#125;)], (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]) + [-~&#123;&#125; - ~[-~&#123;&#125; - ~&#123;&#125;]], (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]) + (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]), [-~(+!+&#123;&#125;)], (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]) + ([(-~[] &lt;&lt; -~[])] * (((+!+&#123;&#125;) + [(-~[] &lt;&lt; -~[])] &gt;&gt; (-~[] &lt;&lt; -~[]))) + []), (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]) + (-~[-~&#123;&#125; - ~&#123;&#125;] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]), (((-~[] &lt;&lt; -~[]) &lt;&lt; (-~[] &lt;&lt; -~[])) + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]), [<span class="number">3</span> - ~(+!+&#123;&#125;) - ~(+!+&#123;&#125;)], (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]) + (((-~[] &lt;&lt; -~[]) &lt;&lt; (-~[] &lt;&lt; -~[])) + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]), [<span class="number">5</span>],</span><br><span class="line">                            [-~&#123;&#125; - ~[-~&#123;&#125; - ~&#123;&#125;]], (-~&#123;&#125; + [] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]) + [-~(+!+&#123;&#125;)], (-~[-~&#123;&#125; - ~&#123;&#125;] + [</span><br><span class="line">                                []</span><br><span class="line">                            ][<span class="number">0</span>]), [~~<span class="string">''</span>]</span><br><span class="line">                        ],</span><br><span class="line">                        _1d = <span class="built_in">Array</span>(_2i.length);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> _5 = <span class="number">0</span>; _5 &lt; _2i.length; _5++) &#123;</span><br><span class="line">                        _1d[_2i[_5]] = [<span class="string">'Bz'</span>, (-~[-~&#123;&#125; - ~&#123;&#125;] + [</span><br><span class="line">                                    []</span><br><span class="line">                                ][<span class="number">0</span>]), [&#123;&#125; + [] + [</span><br><span class="line">                                    []</span><br><span class="line">                                ][<span class="number">0</span>]][<span class="number">0</span>].charAt(-~~~!&#123;&#125;), <span class="string">'DR'</span>, ([(-~[] &lt;&lt; -~[])] / (+!<span class="regexp">/!/</span>) + [] + [</span><br><span class="line">                                    []</span><br><span class="line">                                ][<span class="number">0</span>]).charAt(-~[-~~~!&#123;&#125; - ~(-~[] - ~&#123;&#125; - ~&#123;&#125;)]) + (+[(+!+&#123;&#125;), (+!+&#123;&#125;)] + []).charAt((+!+&#123;&#125;)), [</span><br><span class="line">                                    [][</span><br><span class="line">                                        []</span><br><span class="line">                                    ] + [] + [</span><br><span class="line">                                        []</span><br><span class="line">                                    ][<span class="number">0</span>]</span><br><span class="line">                                ][<span class="number">0</span>].charAt(-~&#123;&#125; - ~[-~&#123;&#125; - ~&#123;&#125;]), <span class="string">'qM'</span>, (((-~[] &lt;&lt; -~[]) &lt;&lt; (-~[] &lt;&lt; -~[])) + [</span><br><span class="line">                                    []</span><br><span class="line">                                ][<span class="number">0</span>]) + (+[(+!+&#123;&#125;), (+!+&#123;&#125;)] + []).charAt((+!+&#123;&#125;)) + (-~&#123;&#125;</span><br><span class="line">                                    /~~<span class="string">''</span>+[]+[[]][<span class="number">0</span>]).charAt((+!<span class="regexp">/!/</span>)),<span class="string">'S'</span>,<span class="string">'g%'</span>,(((-~[]&lt;&lt;-~[])&lt;&lt;(-~[]&lt;&lt;-~[]))+[[]][<span class="number">0</span>]),<span class="string">'HxXL'</span>,[[][[]]+[]+[[]][<span class="number">0</span>]][<span class="number">0</span>].charAt(-~&#123;&#125;-~[-~&#123;&#125;-~&#123;&#125;]),<span class="string">'D'</span>,[-~(+!+&#123;&#125;)],<span class="string">'T%'</span>,<span class="string">'YW'</span>,[&#123;&#125;+[]+[[]][<span class="number">0</span>]][<span class="number">0</span>].charAt(-~~~!&#123;&#125;),<span class="string">'vw'</span>][_5]&#125;;<span class="keyword">return</span> _1d.join(<span class="string">''</span>)&#125;)()+<span class="string">';Expires=Sun, 05-May-19 02:26:41 GMT;Path=/;</span></span><br><span class="line"><span class="string">                                    '</span>&#125;;<span class="keyword">if</span>((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">try</span>&#123;<span class="keyword">return</span> !!<span class="built_in">window</span>.addEventListener;&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;&#125;)())&#123;<span class="built_in">document</span>.addEventListener(<span class="string">'</span></span><br><span class="line"><span class="string">                                    DOMContentLoaded '</span>,_2i,<span class="literal">false</span>)&#125;<span class="keyword">else</span>&#123;<span class="built_in">document</span>.attachEvent(<span class="string">'</span></span><br><span class="line"><span class="string">                                    onreadystatechange '</span>,_2i)&#125;</span><br></pre></td></tr></table></figure><p>4）修改与浏览器相关的代码，然后放入浏览器的<code>console</code>进行调试。</p><p><img src="/images/python_anti_spider_521_js_debug_20190505.png" alt="JS执行结果"></p><p><strong>注意</strong>，在调试过程中，不难发现，<code>js</code>变量是动态生成的。最初还嵌套有<code>document.createElement(&#39;div&#39;)</code>，<code>Python</code>的<code>execjs</code>包不支持处理这类代码，需要做相应处理。</p><p>5）综上分析，完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YiDaiYiLuSpider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    中国一带一路网（521反爬）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    USER_AGENT = UserAgent()</span><br><span class="line">    ua = USER_AGENT.random</span><br><span class="line">    url = <span class="string">r'https://www.yidaiyilu.gov.cn/xwzx/gnxw/87373.htm'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Host"</span>: <span class="string">"www.yidaiyilu.gov.cn"</span>,</span><br><span class="line">        <span class="string">"User-Agent"</span>: ua</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_text521</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        rs = requests.session()</span><br><span class="line">        resp = rs.get(url=cls.url, headers=cls.headers)</span><br><span class="line">        text_521 = <span class="string">''</span>.join(re.findall(<span class="string">'&lt;script&gt;(.*?)&lt;/script&gt;'</span>, resp.text))</span><br><span class="line">        cookie_id = <span class="string">'; '</span>.join([<span class="string">'='</span>.join(item) <span class="keyword">for</span> item <span class="keyword">in</span> resp.cookies.items()])</span><br><span class="line">        <span class="keyword">return</span> cookie_id, text_521</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_cookies</span><span class="params">(cls, func)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param func:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        func_return = func.replace(<span class="string">'eval'</span>, <span class="string">'return'</span>)</span><br><span class="line">        content = execjs.compile(func_return)</span><br><span class="line">        eval_func = content.call(<span class="string">'f'</span>)</span><br><span class="line">        var = str(eval_func.split(<span class="string">'='</span>)[<span class="number">0</span>]).split(<span class="string">' '</span>)[<span class="number">1</span>]</span><br><span class="line">        rex = <span class="string">r"&gt;(.*?)&lt;/a&gt;"</span></span><br><span class="line">        rex_var = re.findall(rex, eval_func)[<span class="number">0</span>]</span><br><span class="line">        mode_func = eval_func.replace(<span class="string">'document.cookie='</span>, <span class="string">'return '</span>).replace(<span class="string">';if((function()&#123;try&#123;return !!window.addEventListener;&#125;'</span>, <span class="string">''</span>). \</span><br><span class="line">            replace(<span class="string">"catch(e)&#123;return false;&#125;&#125;)())&#123;document.addEventListener('DOMContentLoaded',"</span> + var + <span class="string">",false)&#125;"</span>, <span class="string">''</span>). \</span><br><span class="line">            replace(<span class="string">"else&#123;document.attachEvent('onreadystatechange',"</span> + var + <span class="string">")&#125;"</span>, <span class="string">''</span>).\</span><br><span class="line">            replace(<span class="string">r"setTimeout('location.href=location.pathname+location.search.replace(/[\?|&amp;]captcha-challenge/,\'\')',1500);"</span>, <span class="string">''</span>).\</span><br><span class="line">            replace(<span class="string">'return return'</span>, <span class="string">'return'</span>).\</span><br><span class="line">            replace(<span class="string">"document.createElement('div')"</span>, <span class="string">'"https://www.yidaiyilu.gov.cn/"'</span>).\</span><br><span class="line">            replace(<span class="string">r"&#123;0&#125;.innerHTML='&lt;a href=\'/\'&gt;&#123;1&#125;&lt;/a&gt;';&#123;0&#125;=&#123;0&#125;.firstChild.href;"</span>.format(var, rex_var), <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        content = execjs.compile(mode_func)</span><br><span class="line">        cookies_js = content.call(var)</span><br><span class="line">        __jsl_clearance = cookies_js.split(<span class="string">';'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> __jsl_clearance</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawler</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        url = <span class="string">r'https://www.yidaiyilu.gov.cn/zchj/sbwj/87255.htm'</span></span><br><span class="line">        cookie_id, text_521 = cls.get_text521()</span><br><span class="line">        __jsl_clearance = cls.generate_cookies(text_521)</span><br><span class="line">        cookies = <span class="string">"&#123;0&#125;;&#123;1&#125;;"</span>.format(cookie_id, __jsl_clearance)</span><br><span class="line">        cls.headers[<span class="string">"Cookie"</span>] = cookies</span><br><span class="line">        print(cls.headers)</span><br><span class="line">        res = requests.get(url=url, headers=cls.headers)</span><br><span class="line">        res.encoding = <span class="string">'utf-8'</span></span><br><span class="line">        print(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    YiDaiYiLuSpider.crawler()</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/images/python_anti_spider_521_js_result_20190505.png" alt="运行结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考文献：&lt;a href=&quot;https://github.com/xiantang/Spider/blob/master/Anti_Anti_Spider_521/pass_521.py&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="Python" scheme="https://zhangbc.github.io/categories/python/"/>
    
    
      <category term="Python爬虫实例" scheme="https://zhangbc.github.io/tags/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Python编码规范】基础语法</title>
    <link href="https://zhangbc.github.io/2019/05/05/python_code91_03/"/>
    <id>https://zhangbc.github.io/2019/05/05/python_code91_03/</id>
    <published>2019-05-04T23:59:26.000Z</published>
    <updated>2019-05-04T17:29:21.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。</p></blockquote><p><strong>温馨提醒</strong>：在阅读本书之前，强烈建议先仔细阅读：<a href="https://legacy.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener"><strong>PEP</strong>规范</a>，增强代码的可阅读性，配合优雅的<a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">pycharm</a>编辑器(开启<code>pep8</code>检查)写出规范代码，是<code>Python</code>入门的第一步。</p><p><code>Python</code> 基础语法，即<code>Python</code>程序的基本要素，分为：</p><blockquote><ul><li>基本数据类型：数字、字符串、列表、字典、集合、元组等；</li><li>常见的语法：条件、循环、函数、列表解析等。</li></ul></blockquote><h2 id="建议19：有节制地使用from…import语句"><a href="#建议19：有节制地使用from…import语句" class="headerlink" title="建议19：有节制地使用from…import语句"></a>建议19：有节制地使用from…import语句</h2><p><code>Python</code>提供了3种方式引入外部模块：<code>import</code>语句，<code>from...import...</code>及<code>__import__</code>函数。</p><p><code>__import__</code>函数可以显式地将模块名称作为字符串传递并赋值给命名空间的变量。</p><ul><li>在使用<code>import</code>时需要注意以下事项：</li></ul><blockquote><p>1）一般尽量优先使用<code>import a</code>形式，如果访问<code>B</code>时需要使用<code>a.B</code>的形式；<br>2）有节制地使用<code>from a import B</code>形式，可以直接访问<code>B</code>；<br>3）尽量避免使用<code>from a import *</code>，减少污染命名空间。</p></blockquote><p><code>Python</code>的<code>import</code>机制：<code>Python</code>在初始化运行环境的时候会预先加载一批内建模块到内存中，其相关信息被存放在<code>sys.modules</code>中。</p><ul><li><code>from a import ...</code>无节制的使用产生的问题：</li></ul><blockquote><p>1）命名空间的冲突；</p></blockquote><p>文件<code>a.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"add in module A."</span></span><br></pre></td></tr></table></figure><p>文件<code>b.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"add in module B."</span></span><br></pre></td></tr></table></figure><p>测试文件<code>importtest.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> b <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">add()</span><br></pre></td></tr></table></figure><blockquote><p>2）循环嵌套导入的问题。</p></blockquote><ul><li>可以考虑<code>from...import</code>的情况：</li></ul><blockquote><p>1）当只需要导入部分属性或方法时；<br>2）模块中的这些属性和方法访问频率较高导致使用“模块名.名称”的形式进行访问过于烦琐时；<br>3）模块的文档明确说明需要使用<code>from...import</code>形式，导入的是一个包下面的子模块，且使用<code>from...import</code>形式能够更为简单和便捷时。</p></blockquote><h2 id="建议20：优先使用absolute-import来导入模块"><a href="#建议20：优先使用absolute-import来导入模块" class="headerlink" title="建议20：优先使用absolute import来导入模块"></a>建议20：优先使用absolute import来导入模块</h2><p>在<code>Python2.4</code>以前默认为隐式的<code>relative import</code>，局部范围的模块将覆盖同名的全局范围的模块。<code>Python2.5</code>后虽然默认的仍是<code>relative import</code>，但它为<code>absolute import</code>提供了一种新的机制，在模块中使用<code>from __future__ import absolute_import</code>语句进行说明后再进行导入。同时还通过点号<strong><code>.</code></strong>提供了一种显式进行<code>relative import</code>的方法。</p><p>相比于<code>absolute import</code>，<code>relative import</code>在实际应用中反馈的问题较多(<code>Python3</code>中已移除)，<code>absolute import</code>的可读性和出现问题后的可跟踪性更好，因此，推荐优先使用<code>absolute import</code>。</p><h2 id="建议21：i-1不等于-i"><a href="#建议21：i-1不等于-i" class="headerlink" title="建议21：i+=1不等于++i"></a>建议21：i+=1不等于++i</h2><p><code>Python</code>解释器会将<code>++i</code>操作解释为<code>+(+i)</code>，其中<code>+</code>表示正数符号。对于<code>--i</code>也是类似。</p><ul><li>实例一</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>++i</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>实例二：无限循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">while</span> i &lt; len(ls):</span><br><span class="line"><span class="keyword">print</span> ls[<span class="number">0</span>]</span><br><span class="line">++i</span><br></pre></td></tr></table></figure><h2 id="建议22：使用with自动关闭资源"><a href="#建议22：使用with自动关闭资源" class="headerlink" title="建议22：使用with自动关闭资源"></a>建议22：使用with自动关闭资源</h2><ul><li><code>with</code> 语句的语法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> 表达式 [<span class="keyword">as</span> 目标]:</span><br><span class="line">代码块</span><br></pre></td></tr></table></figure><ul><li>包含<code>with</code>语句的代码块执行过程如下：</li></ul><blockquote><p>1）计算表达式的值，返回一个上下文管理器对象；<br>2）加载上下文管理器对象的<code>__exit__()</code>方法以备后用；<br>3）调用上下文管理器对象的<code>__enter__()</code>方法；<br>4）若<code>with</code>语句中设置了目标对象，则将<code>__enter__()</code>方法的返回值赋值给目标对象；<br>5）执行<code>with</code>中的代码块；<br>6）若步骤5)中的代码正常结束，调用上下文管理器对象的<code>__exit__()</code>方法，其返回值直接忽略；<br>7）若步骤5)中的代码执行过程中发生异常，调用上下文管理器对象的<code>__exit__()</code>方法，并将异常类型，值及<code>traceback</code>信息作为参数传递给<code>__exit__()</code>方法。若<code>__exit__()</code>的返回值为false，则异常会被重新抛出；若<code>__exit__()</code>的返回值为<code>true</code>，则异常会被挂起，程序继续执行。</p></blockquote><h2 id="建议23：使用else子句简化循环（异常处理）"><a href="#建议23：使用else子句简化循环（异常处理）" class="headerlink" title="建议23：使用else子句简化循环（异常处理）"></a>建议23：使用else子句简化循环（异常处理）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">    :param number:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">​</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>, number):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">2</span>, i):</span><br><span class="line">            <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'&#123;0&#125; is a prime number.'</span>.format(i)</span><br></pre></td></tr></table></figure><p>当循环“自然”终结（循环条件为假）时<code>else</code>从句会被执行一次；当循环是由<code>break</code>语句得到中断时，<code>else</code>子句就不被执行。</p><h2 id="建议24：遵循异常处理的几点原则"><a href="#建议24：遵循异常处理的几点原则" class="headerlink" title="建议24：遵循异常处理的几点原则"></a>建议24：遵循异常处理的几点原则</h2><p><code>Python</code>中常用的异常处理语法是：<code>try</code>，<code>except</code>，<code>else</code>，<code>finally</code>，可以有多种组合。</p><ul><li>异常处理流程图如下：</li></ul><p><img src="/images/python_code91_03_try_20190505.png" alt="异常处理流程图"></p><ul><li>异常处理遵循的基本原则：</li></ul><blockquote><p>1）注意异常的粒度，不推荐在<code>try</code>中放入过多的代码；<br>2）谨慎使用单独的<code>except</code>语句处理所有异常，最好能定位具体的异常；<br>3）注意异常捕捉的顺序，在合适的层次处理异常；向上层传递的时候需要警惕异常被丢失的情况，可以使用不带参数的<code>raise</code>来传递；<br>4）使用更为友好的异常信息，遵循异常参数的规范。</p></blockquote><h2 id="建议25：避免finally中可能发生的陷阱"><a href="#建议25：避免finally中可能发生的陷阱" class="headerlink" title="建议25：避免finally中可能发生的陷阱"></a>建议25：避免finally中可能发生的陷阱</h2><p>无论<code>try</code>语句中是否有异常抛出，<code>finally</code>语句总会被执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:UTF-8 -*-</span></span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> a &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"data can not be negative."</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="keyword">print</span> ex</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"The end!"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">print</span> test(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> test(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="建议26：深入理解None，正确判断对象是否为空"><a href="#建议26：深入理解None，正确判断对象是否为空" class="headerlink" title="建议26：深入理解None，正确判断对象是否为空"></a>建议26：深入理解None，正确判断对象是否为空</h2><p><code>Python</code>中以下数据会被当作空处理：</p><ul><li>常量<code>None</code>；</li><li>常量<code>False</code>；</li><li>任何形式的数值类型零，如<code>0</code>，<code>0L</code>，<code>0.0</code>，<code>0j</code>；</li><li>空的序列，如<code>‘’</code>，<code>()</code>，<code>[]</code>；</li><li>空字典，如<code>{}</code>；</li><li>当用户定义的类中定义了<code>nonzero()</code>方法和<code>len()</code>方法，并且该方法返回整数<code>0</code>或者布尔值<code>False</code>。</li></ul><p><strong>注意</strong>：<code>None</code>的特殊性体现在它既不是<code>0</code>，<code>False</code>，也不是空字符串，它就是一个空值对象；其数据类型为<code>NoneType</code>，遵循单例模式，是唯一的，因而不能创建<code>None</code>对象。所有赋值为<code>None</code>的变量都相等，并且<code>None</code>与任何其他非<code>None</code>的对象比较结果都是<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(<span class="literal">None</span>)</span><br><span class="line"><span class="number">140735411631784</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span> == <span class="number">0</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span> == <span class="string">""</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">140735411631784</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b   <span class="comment"># 所有赋值为`None`的变量都相等</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>实例：列表判空</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls = []</span><br><span class="line"><span class="keyword">if</span> ls <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"ls is: "</span>, ls</span><br><span class="line">esle:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"ls is None"</span></span><br></pre></td></tr></table></figure><ul><li>以上程序运行输出为：<code>ls is: []</code>，显然不是我们的预期结果。应修正为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls = []</span><br><span class="line"><span class="keyword">if</span> ls:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"ls is: "</span>, ls</span><br><span class="line">esle:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"ls is None"</span></span><br></pre></td></tr></table></figure><h2 id="建议27：连接字符串优先使用join而不是"><a href="#建议27：连接字符串优先使用join而不是" class="headerlink" title="建议27：连接字符串优先使用join而不是+"></a>建议27：连接字符串优先使用join而不是+</h2><p>1）使用操作符<code>+</code>连接字符串的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1, str2, str3 = <span class="string">"testing "</span>, <span class="string">"string "</span>, <span class="string">"concatenation "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 + str2 + str3</span><br><span class="line"><span class="string">'testing string concatenation '</span></span><br></pre></td></tr></table></figure><p>2）使用<code>join</code>方法连接字符串的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join([str1, str2, str3])</span><br><span class="line"><span class="string">'testing string concatenation '</span></span><br></pre></td></tr></table></figure><ul><li>性能测试函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:UTF-8 -*-</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">​</span><br><span class="line">str_list = [<span class="string">"It is a long value string will not keep in memory "</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> xrange(<span class="number">10000</span>)]</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">join_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(str_list)</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus_test</span><span class="params">()</span>:</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(str_list):</span><br><span class="line">        res += v</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">​</span><br><span class="line">    join_timer = timeit.Timer(<span class="string">"join_test()"</span>, <span class="string">"from __main__ import join_test"</span>)</span><br><span class="line">    <span class="keyword">print</span> join_timer.timeit(number=<span class="number">10</span>)    <span class="comment"># 0.00255298614502    </span></span><br><span class="line">    <span class="keyword">print</span> join_timer.timeit(number=<span class="number">100000</span>)    <span class="comment"># 13.4903669357</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    plus_timer = timeit.Timer(<span class="string">"plus_test()"</span>, <span class="string">"from __main__ import plus_test"</span>)</span><br><span class="line">    <span class="keyword">print</span> plus_timer.timeit(number=<span class="number">10</span>)    <span class="comment"># 0.0193991661072</span></span><br><span class="line">    <span class="keyword">print</span> plus_timer.timeit(number=<span class="number">100000</span>)    <span class="comment"># 400.628134012</span></span><br></pre></td></tr></table></figure><p>从以上测试效果看，<code>join()</code>方法的效率要高于<code>+</code>操作符，尤其是字符串规模较大时，两者的效率十分明显。</p><p>执行一次<code>+</code>，就会申请一块新的内存空间，并将上一次的操作结果和本次的右操作数复制到新申请的内存空间。时间复杂度为 $O(n^2)$;<br>对于<code>join()</code>，会首先计算需要申请的总的内存空间，然后一次性申请所需内存并将字符序列中的每一个元素复制到内存中去，时间复杂度为$O(n)$。</p><h2 id="建议28：格式化字符串时尽量使用-format方式而不是"><a href="#建议28：格式化字符串时尽量使用-format方式而不是" class="headerlink" title="建议28：格式化字符串时尽量使用.format方式而不是%"></a>建议28：格式化字符串时尽量使用.format方式而不是%</h2><p><code>Python</code>中内置<code>%</code>操作符和<code>.format</code>方式都可以用作格式化字符串。</p><ul><li><code>%</code>转换说明符的基本形式为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%[转标记][宽度[.精确度]] 转换类型</span><br></pre></td></tr></table></figure><p><img src="/images/python_code91_03_format_convert_flag_20190505.png" alt="格式化字符串转换标记"></p><p><img src="/images/python_code91_03_format_convert_type_20190505.png" alt="格式化字符串转换类型"></p><p><strong>常见用法</strong></p><p>1）直接格式化字符或者数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"your score is %06.1f"</span> % <span class="number">9.5</span></span><br><span class="line">your score <span class="keyword">is</span> <span class="number">0009.5</span></span><br></pre></td></tr></table></figure><p>2）以元组的形式格式化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item_name = <span class="string">'circumference'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>radius = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"The %s of a circle with radius %f is %0.3f"</span> % \</span><br><span class="line"><span class="meta">... </span>      (item_name, radius, math.pi*radius*<span class="number">2</span>)</span><br><span class="line">The circumference of a circle <span class="keyword">with</span> radius <span class="number">3.000000</span> <span class="keyword">is</span> <span class="number">18.850</span></span><br></pre></td></tr></table></figure><p>3）以字典的形式格式化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>item_dict = &#123;<span class="string">'item_name'</span>: <span class="string">'circumference'</span>, <span class="string">'radius'</span>: <span class="number">3</span>, <span class="string">'value'</span>: math.pi*radius*<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"The %(item_name)s of a circle with radius %(radius)f is %(value)0.3f"</span> % (item_dict)</span><br><span class="line">The circumference of a circle <span class="keyword">with</span> radius <span class="number">3.000000</span> <span class="keyword">is</span> <span class="number">18.850</span></span><br></pre></td></tr></table></figure><ul><li><code>.format</code>方式格式化字符串的基本语法为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.format([[填充符]对齐方式][符号][<span class="comment">#][0][宽度][,][.精度][转换类型])</span></span><br></pre></td></tr></table></figure><p><img src="/images/python_code91_03_format_align_20190505.png" alt="format对齐方式"></p><p><img src="/images/python_code91_03_format_list_20190505.png" alt="format符号列表"></p><p><strong>常见用法</strong></p><p>1）使用位置符号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"The number &#123;0:,&#125; in hex is: &#123;0:#x&#125;,"</span> \</span><br><span class="line"><span class="meta">... </span>      <span class="string">"The number &#123;1&#125; in oct is: &#123;1:#o&#125;"</span>.format(<span class="number">4746</span>, <span class="number">45</span>)</span><br><span class="line">The number <span class="number">4</span>,<span class="number">746</span> <span class="keyword">in</span> hex <span class="keyword">is</span>: <span class="number">0x128a</span>,The number <span class="number">45</span> <span class="keyword">in</span> oct <span class="keyword">is</span>: <span class="number">0o55</span></span><br></pre></td></tr></table></figure></p><p>2）使用名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"The max number is &#123;max&#125;, the min number is &#123;min&#125;, the average number is &#123;avg&#125;"</span>\</span><br><span class="line"><span class="meta">... </span>    .format(max=<span class="number">9</span>, min=<span class="number">3</span>, avg=<span class="number">6</span>)</span><br><span class="line">The max number <span class="keyword">is</span> <span class="number">9</span>, the min number <span class="keyword">is</span> <span class="number">3</span>, the average number <span class="keyword">is</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>3）通过属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Customer</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sex, phone)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span>        self.sex = sex</span><br><span class="line"><span class="meta">... </span>        self.phone = phone</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'Customer (&#123;self.name&#125;, &#123;self.sex&#125;, &#123;self.phone&#125;)'</span>.format(self=self) </span><br><span class="line"><span class="meta">... </span>   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Customer(<span class="string">"Lisa"</span>, <span class="string">"F"</span>, <span class="string">"13304634561"</span>)</span><br><span class="line">Customer (Lisa, F, <span class="number">13304634561</span>)</span><br></pre></td></tr></table></figure><p>4）格式化元组的具体项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>point = (<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'X:&#123;0[0]&#125;; Y:&#123;0[1]&#125;'</span>.format(point)</span><br><span class="line">X:<span class="number">1</span>; Y:<span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>为什么要尽量使用<code>format</code>方式而不是<code>%</code>操作符来格式化字符串？</li></ul><blockquote><p>1）<code>format</code>方式在使用上较<code>%</code>操作符更为灵活；使用<code>format</code>方式时，参数的顺序与格式化的顺序不必完全相同；<br>2）<code>format</code>方式可以方便地作为参数传递；<br>3）<code>%</code>最终会被<code>.format</code>方式替代；<br>4）<code>%</code>方法在某些特殊情况下使用需要特别小心。如下例，特别小心 <strong><code>,</code></strong> 。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = (<span class="string">"mouse"</span>, <span class="string">"mobilephone"</span>, <span class="string">"cup"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"items list are %s"</span> % (items)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;input&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="keyword">not</span> all arguments converted during string formatting</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"items list are %s"</span> % (items,)</span><br><span class="line">items list are (<span class="string">'mouse'</span>, <span class="string">'mobilephone'</span>, <span class="string">'cup'</span>)</span><br></pre></td></tr></table></figure><h2 id="建议29：区别对待可变对象和不可变对象"><a href="#建议29：区别对待可变对象和不可变对象" class="headerlink" title="建议29：区别对待可变对象和不可变对象"></a>建议29：区别对待可变对象和不可变对象</h2><p><code>Python</code>中一切皆对象，每一个对象都有一个唯一的标识符(<code>id()</code>)，类型(<code>type()</code>)以及值。</p><ul><li><strong>可变对象</strong>：字典，字节数组，列表；</li><li><p><strong>不可变对象</strong>：数字，字符串，元组。</p></li><li><p>实例</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    区别可变对象与不可变对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, course=list<span class="params">()</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.course = course</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_course</span><span class="params">(self, course_name)</span>:</span></span><br><span class="line">        self.course.append(course_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_course</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(self.course):</span><br><span class="line">            <span class="keyword">print</span> item, <span class="string">' '</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    stu_a = Student(<span class="string">"Wang Yi"</span>)</span><br><span class="line">    stu_a.add_course(<span class="string">"English"</span>)</span><br><span class="line">    stu_a.add_course(<span class="string">"Math"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;0&#125;'s course: "</span>.format(stu_a.name)</span><br><span class="line">    stu_a.print_course()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"================================="</span></span><br><span class="line"></span><br><span class="line">    stu_b = Student(<span class="string">"Li san"</span>)</span><br><span class="line">    stu_b.add_course(<span class="string">"Chinese"</span>)</span><br><span class="line">    stu_b.add_course(<span class="string">"Physics"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;0&#125;'s course: "</span>.format(stu_b.name)</span><br><span class="line">    stu_b.print_course()</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Wang Yi<span class="string">'s course: </span></span><br><span class="line"><span class="string">English  </span></span><br><span class="line"><span class="string">Math  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=================================</span></span><br><span class="line"><span class="string">Li san'</span>s course: </span><br><span class="line">English  </span><br><span class="line">Math  </span><br><span class="line">Chinese  </span><br><span class="line">Physics</span><br></pre></td></tr></table></figure><ul><li>修正建议：传入<code>None</code>作为默认参数，在创建对象时动态生成列表。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, course=None)</span>:</span></span><br><span class="line">    self.name = name</span><br><span class="line">    <span class="keyword">if</span> course <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        course = list()</span><br><span class="line">    self.course = course</span><br></pre></td></tr></table></figure><h2 id="建议30：-，-，-：一致的容器初始化形式-gt-列表解析"><a href="#建议30：-，-，-：一致的容器初始化形式-gt-列表解析" class="headerlink" title="建议30：[]，()，{}：一致的容器初始化形式==&gt;列表解析"></a>建议30：[]，()，{}：一致的容器初始化形式==&gt;列表解析</h2><ul><li>列表解析的语法为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[expr <span class="keyword">for</span> iter_item <span class="keyword">in</span> iterable <span class="keyword">if</span> cond_expr]</span><br></pre></td></tr></table></figure><ul><li>列表解析的使用</li></ul><p>1）支持多重嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nested_list = [[<span class="string">'Hello'</span>, <span class="string">'World'</span>], [<span class="string">'Goodbye'</span>, <span class="string">'World'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> [[s.upper() <span class="keyword">for</span> s <span class="keyword">in</span> xs] <span class="keyword">for</span> xs <span class="keyword">in</span> nested_list]</span><br><span class="line">[[<span class="string">'HELLO'</span>, <span class="string">'WORLD'</span>], [<span class="string">'GOODBYE'</span>, <span class="string">'WORLD'</span>]]</span><br></pre></td></tr></table></figure><p>2）支持多重迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(a, b) <span class="keyword">for</span> a <span class="keyword">in</span> [<span class="string">'a'</span>, <span class="string">'1'</span>, <span class="number">1</span>, <span class="number">2</span>] <span class="keyword">for</span> b <span class="keyword">in</span> [<span class="string">'1'</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'b'</span>] <span class="keyword">if</span> a != b]</span><br><span class="line">[(<span class="string">'a'</span>, <span class="string">'1'</span>), (<span class="string">'a'</span>, <span class="number">3</span>), (<span class="string">'a'</span>, <span class="number">4</span>), (<span class="string">'a'</span>, <span class="string">'b'</span>), (<span class="string">'1'</span>, <span class="number">3</span>), (<span class="string">'1'</span>, <span class="number">4</span>), (<span class="string">'1'</span>, <span class="string">'b'</span>), (<span class="number">1</span>, <span class="string">'1'</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="string">'b'</span>), (<span class="number">2</span>, <span class="string">'1'</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="string">'b'</span>)]</span><br></pre></td></tr></table></figure><p>3）列表解析语法中的表达式可以是简单表达式，也可以是复杂表达式，甚至函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(v)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> v % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        v = v ** <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        v = v + <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> v</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> [f(v) <span class="keyword">for</span> v <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-1</span>] <span class="keyword">if</span> v &gt; <span class="number">0</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">4</span>, <span class="number">16</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> [v ** <span class="number">2</span> <span class="keyword">if</span> v % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> v + <span class="number">1</span> <span class="keyword">for</span> v <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-1</span>] <span class="keyword">if</span> v &gt; <span class="number">0</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">4</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><p>4）列表解析语法中的<code>iterable</code>可以是任意可迭代对象。</p><h2 id="建议31：记住函数传参既不是传值也不是传引用-gt-而是传对象（的引用）"><a href="#建议31：记住函数传参既不是传值也不是传引用-gt-而是传对象（的引用）" class="headerlink" title="建议31：记住函数传参既不是传值也不是传引用==&gt;而是传对象（的引用）"></a>建议31：记住函数传参既不是传值也不是传引用==&gt;而是传对象（的引用）</h2><p>1）<strong>传引用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> id(n)</span><br><span class="line"><span class="meta">... </span>    n = n + <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> id(n)</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(n)</span><br><span class="line"><span class="number">140407485781272</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inc(n)</span><br><span class="line"><span class="number">140407485781272</span></span><br><span class="line"><span class="number">140407485781248</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> n</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong>：按照传引用的观点，结果输出应为4，并且<code>inc()</code>函数里面执行操作<code>n=n+1</code>的前后<code>n</code>的<code>id</code>值应该是不变的。</p><p>2）<strong>传值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">change_list</span><span class="params">(org_list)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"orginator list is: "</span>, org_list</span><br><span class="line"><span class="meta">... </span>    new_list = org_list</span><br><span class="line"><span class="meta">... </span>    new_list.append(<span class="string">"I am new."</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"new list is: "</span>, new_list </span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> new_list</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>org_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_list = change_list(org_list)</span><br><span class="line">orginator list <span class="keyword">is</span>:  [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">new list <span class="keyword">is</span>:  [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'I am new.'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> new_list</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'I am new.'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> org_list</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'I am new.'</span>]</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：通过程序输出不难发现，在传值过程中，原来的列表对象随着新对象的变化随之发生变化。</p><p>3）<strong>可变对象传引用，不可变对象传值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(org_list)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> id(org_list)</span><br><span class="line"><span class="meta">... </span>    new_list = org_list</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> id(new_list)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> len(new_list) &gt; <span class="number">5</span>:</span><br><span class="line"><span class="meta">... </span>        new_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i, e <span class="keyword">in</span> enumerate(new_list):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> isinstance(e, list):</span><br><span class="line"><span class="meta">... </span>            new_list[i] = <span class="string">"***"</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> new_list</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> id(new_list)</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test1 = [<span class="number">1</span>, [<span class="string">'a'</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">1</span>], <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>change(test1)</span><br><span class="line"><span class="number">4512473528</span></span><br><span class="line"><span class="number">4512473528</span></span><br><span class="line">[<span class="number">1</span>, <span class="string">'***'</span>, <span class="string">'***'</span>, <span class="number">6</span>]</span><br><span class="line"><span class="number">4512473528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> test1</span><br><span class="line">[<span class="number">1</span>, <span class="string">'***'</span>, <span class="string">'***'</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>change(test2)</span><br><span class="line"><span class="number">4511466704</span></span><br><span class="line"><span class="number">4511466704</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="number">4512476552</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> test2</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：传入参数<code>org_list</code>为列表，属于可变对象，按照可变对象传引用的理解，<code>new_list</code>和<code>org_list</code>指向同一块内存，因此两者的<code>id</code>值输出一致，即修改<code>new_list</code>会导致<code>org_list</code>的直接修改；但是在<code>test2</code>中调用函数<code>change()</code>前后并没有发生改变。</p><p><strong><code>Python</code>中的赋值机制理解</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = a</span><br><span class="line">b = <span class="number">7</span></span><br></pre></td></tr></table></figure><p><img src="/images/python_code91_03_python_equals_201900505.png" alt="Python中的赋值机制理解"></p><ul><li>验证上述过程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">140407485781224</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">140407485781224</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">140407485781176</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">140407485781224</span></span><br></pre></td></tr></table></figure><p><strong>小结</strong>：对于<code>Python</code>函数参数传递的正确说法是：<strong><code>传对象</code>或者<code>传对象的引用</code></strong>。函数参数在传递的过程中将整个对象传入，对可变对象对修改在函数外部以及内部都可见，调用者和被调用者之间共享这个对象；而对于不可变对象，由于不能真正被修改，因而修改往往是通过生成一个新对象然后赋值来实现的。</p><h2 id="建议32：警惕默认参数潜在的问题"><a href="#建议32：警惕默认参数潜在的问题" class="headerlink" title="建议32：警惕默认参数潜在的问题"></a>建议32：警惕默认参数潜在的问题</h2><ul><li>实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(new_item, list_a=list<span class="params">()</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> id(list_a)</span><br><span class="line"><span class="meta">... </span>    list_a.append(new_item)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> id(list_a)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> list_a</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="string">'a'</span>, [<span class="string">'b'</span>, <span class="number">2</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="number">4511467712</span></span><br><span class="line"><span class="number">4511467712</span></span><br><span class="line">[<span class="string">'b'</span>, <span class="number">2</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>)</span><br><span class="line"><span class="number">4512439760</span></span><br><span class="line"><span class="number">4512439760</span></span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">4512439760</span></span><br><span class="line"><span class="number">4512439760</span></span><br><span class="line">[<span class="number">1</span>, <span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：在连续调用<code>test(1)</code>和<code>test(‘a’)</code>，结果和预想的完全不一样。</p><ul><li>解决方案：在函数调用过程中动态生成，可以在定义时使用<code>None</code>对象作为占位符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(new_item, list_a=None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> list_a <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="meta">... </span>        list_a = list()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> id(list_a)</span><br><span class="line"><span class="meta">... </span>    list_a.append(new_item)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> id(list_a)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> list_a</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">4511794024</span></span><br><span class="line"><span class="number">4511794024</span></span><br><span class="line">[<span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>)</span><br><span class="line"><span class="number">4512440192</span></span><br><span class="line"><span class="number">4512440192</span></span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="建议33：慎用变长参数"><a href="#建议33：慎用变长参数" class="headerlink" title="建议33：慎用变长参数"></a>建议33：慎用变长参数</h2><p><code>Python</code>支持可变长度的参数列表，可以通过函数定义时使用<code>*args</code>和<code>**kwargs</code>这两个特殊语法实现。</p><ul><li><code>*args</code>：实现可变参数列表； <code>*args</code>用于接收一个包装为元组形式的参数列表来传递非关键字参数，参数个数任意。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">summary</span><span class="params">(*args)</span>:</span></span><br><span class="line"><span class="meta">... </span>    result = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> x <span class="keyword">in</span> args[<span class="number">0</span>:]:</span><br><span class="line"><span class="meta">... </span>        result += x</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> result</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> summary(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> summary(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><ul><li><code>**kwargs</code>：实现字典形式的关键字参数列表。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">category_table</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">print</span> <span class="string">"&#123;0&#125; is a kind of &#123;1&#125;."</span>.format(name, value)</span><br><span class="line"><span class="meta">... </span>        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>category_table(apple=<span class="string">"fruit"</span>, carrot=<span class="string">"vegetable"</span>, python=<span class="string">"programming language"</span>)</span><br><span class="line">python <span class="keyword">is</span> a kind of programming language.</span><br><span class="line">carrot <span class="keyword">is</span> a kind of vegetable.</span><br><span class="line">apple <span class="keyword">is</span> a kind of fruit.</span><br></pre></td></tr></table></figure><h2 id="建议34：深入理解str-和repr-的区别"><a href="#建议34：深入理解str-和repr-的区别" class="headerlink" title="建议34：深入理解str()和repr()的区别"></a>建议34：深入理解str()和repr()的区别</h2><p><strong><code>str()</code>和<code>repr()</code>的区别</strong>：</p><blockquote><p>1）二者的目标不同：<code>str()</code>面向用户，其目的是可读性，返回字符串类型；<code>repr()</code>面向的<code>Python</code>解释器，或者说开发者，其目的是准确性，返回表示<code>Python</code>解释器内部的含义，常作为<code>debug</code>用途；<br>2）在解释器中直接输入<code>a</code>时默认调用<code>repr()</code>，而<code>print a</code>则调用<code>str()</code>；<br>3）<code>repr()</code>的返回值一般可用<code>eval()</code>函数还原对象，即：<code>obj == eval(repr(obj))</code>；<br>4）二者分别调用<code>__str__()</code>和<code>__repr__()</code>方法，一般而言，在类中都应该定义<code>__repr__()</code>方法（默认方法）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"' '"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(s)</span><br><span class="line"><span class="string">"' '"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repr(s)</span><br><span class="line"><span class="string">'"\' \'"'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(repr(s)) == s</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(str(s))</span><br><span class="line"><span class="string">' '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(str(s)) == s</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="建议35：分清staticmethod和classmethod的适用场景"><a href="#建议35：分清staticmethod和classmethod的适用场景" class="headerlink" title="建议35：分清staticmethod和classmethod的适用场景"></a>建议35：分清staticmethod和classmethod的适用场景</h2><p><code>Python</code>中的静态方法(<code>staticmethod</code>)和类方法(<code>classmethod</code>)都依赖于装饰器(<code>decorator</code>)来实现。</p><ul><li><strong>静态方法(<code>staticmethod</code>)</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(args1, args2, ...)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><strong>类方法(<code>classmethod</code>)</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(cls,args1, args2, ...)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>静态方法所带来的问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Fruit类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, area=<span class="string">""</span>, category=<span class="string">""</span>, batch=<span class="string">""</span>)</span>:</span></span><br><span class="line">        self.area = area</span><br><span class="line">        self.category = category</span><br><span class="line">        self.batch = batch</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_product</span><span class="params">(product_info)</span>:</span></span><br><span class="line">        area, category, batch = map(str, product_info.split(<span class="string">'-'</span>))</span><br><span class="line">        fruit = Fruit(area, category, batch)</span><br><span class="line">        <span class="keyword">return</span> fruit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    apple = Apple(<span class="string">'2'</span>, <span class="string">'5'</span>, <span class="string">'10'</span>)</span><br><span class="line">    orange = Orange.init_product(<span class="string">"3-3-9"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"apple is instance of Apple: "</span>, isinstance(apple, Apple)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"orange is instance of Orange: "</span>, isinstance(orange, Orange)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple <span class="keyword">is</span> instance of Apple:  <span class="literal">True</span></span><br><span class="line">orange <span class="keyword">is</span> instance of Orange:  <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong>：静态方法实际上相当于一个定义在类中的函数，<code>init_product()</code>返回的实际是<code>Fruit</code>对象，所以不会是<code>Orange</code>对象。因而静态方法并不能获取期望的结果，类方法才是正确的解决方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Fruit类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, area=<span class="string">""</span>, category=<span class="string">""</span>, batch=<span class="string">""</span>)</span>:</span></span><br><span class="line">        self.area = area</span><br><span class="line">        self.category = category</span><br><span class="line">        self.batch = batch</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_product</span><span class="params">(cls, product_info)</span>:</span></span><br><span class="line">        area, category, batch = map(str, product_info.split(<span class="string">'-'</span>))</span><br><span class="line">        fruit = cls(area, category, batch)</span><br><span class="line">        <span class="keyword">return</span> fruit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    apple = Apple(<span class="string">'2'</span>, <span class="string">'5'</span>, <span class="string">'10'</span>)</span><br><span class="line">    orange = Orange.init_product(<span class="string">"3-3-9"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"apple is instance of Apple: "</span>, isinstance(apple, Apple)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"orange is instance of Orange: "</span>, isinstance(orange, Orange)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;温馨提醒&lt;/strong&gt;：在阅读本书之前，强烈建议先仔细阅读：&lt;a href=&quot;https://legacy.py
      
    
    </summary>
    
      <category term="Python" scheme="https://zhangbc.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>【Python编码规范】编程惯用法</title>
    <link href="https://zhangbc.github.io/2019/04/28/python_code91_02/"/>
    <id>https://zhangbc.github.io/2019/04/28/python_code91_02/</id>
    <published>2019-04-27T16:09:25.000Z</published>
    <updated>2019-04-27T16:41:29.208Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。</p></blockquote><p><strong>温馨提醒</strong>：在阅读本书之前，强烈建议先仔细阅读：<a href="https://legacy.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener"><strong>PEP</strong>规范</a>，增强代码的可阅读性，配合优雅的<a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">pycharm</a>编辑器(开启<code>pep8</code>检查)写出规范代码，是<code>Python</code>入门的第一步。</p><h2 id="建议8：利用assert语句来发现问题"><a href="#建议8：利用assert语句来发现问题" class="headerlink" title="建议8：利用assert语句来发现问题"></a>建议8：利用assert语句来发现问题</h2><ul><li>断言(<code>assert</code>)基本语法如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> expression1 [<span class="string">","</span> expression2]</span><br></pre></td></tr></table></figure><ul><li><code>assert</code>用法举例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> x == y , <span class="string">"not equals"</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;input&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AssertionError: <span class="keyword">not</span> equals</span><br></pre></td></tr></table></figure><ul><li>关于<code>assert</code>的几点说明事项</li></ul><blockquote><p>1）<code>__debug__</code>的值默认为<code>True</code>，且只读，无法修改(<code>Python2.7</code>)。<br>2）断言是有代价的，对性能产生一定影响。禁用断言的方法是在运行脚本的时候加上<code>-O</code>标记(不优化字节码，而是忽略与断言相关的语句)。</p></blockquote><ul><li>使用断言(<code>assert</code>)注意点：</li></ul><blockquote><p>1）不要滥用，这是使用断言<strong>最基本</strong>的原则；<br>2）如果<code>Python</code>本身的异常能够处理就不要再使用断言；<br>3）不要使用断言来检查用户的输入；<br>4）在函数调用后，当需要确认返回值是否合理时可以使用断言；<br>5）当条件时业务逻辑继续下去的先决条件时，可以使用断言。</p></blockquote><h2 id="建议9：数据交换值时不推荐使用中间交换变量"><a href="#建议9：数据交换值时不推荐使用中间交换变量" class="headerlink" title="建议9：数据交换值时不推荐使用中间交换变量"></a>建议9：数据交换值时不推荐使用中间交换变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Timer(<span class="string">'temp=x;x=y;y=temp'</span>,<span class="string">'x=2;y=3'</span>).timeit()</span><br><span class="line"><span class="number">0.03472399711608887</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Timer(<span class="string">'x,y=y,x'</span>,<span class="string">'x=2;y=3'</span>).timeit()</span><br><span class="line"><span class="number">0.031581878662109375</span></span><br></pre></td></tr></table></figure><ul><li><strong>测试用例说明</strong>：不借助中间变量的方式耗费的时间更少，代码简洁，值得推荐。</li></ul><h2 id="建议10：充分利用Lazy-evaluation的特性"><a href="#建议10：充分利用Lazy-evaluation的特性" class="headerlink" title="建议10：充分利用Lazy evaluation的特性"></a>建议10：充分利用Lazy evaluation的特性</h2><p><code>Lazy evaluation</code>常被译作“<code>延时计算</code>”或“<code>惰性计算</code>”，指的是仅仅在真正需要执行的时候才计算表达式的值。<strong>典型例子</strong>：生成器表达式。</p><blockquote><p>1）避免不必要的计算，带来性能上的提升；<br>2）节省空间，使用无限循环的数据结构成为可能。</p></blockquote><ul><li>实例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">()</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line">        a, b = b, a+b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    print(list(islice(fib(), <span class="number">5</span>)))</span><br></pre></td></tr></table></figure><h2 id="建议11：理解枚举替代实现的缺陷"><a href="#建议11：理解枚举替代实现的缺陷" class="headerlink" title="建议11：理解枚举替代实现的缺陷"></a>建议11：理解枚举替代实现的缺陷</h2><p>1）<strong>替代方法</strong></p><ul><li>使用类属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Seasons</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    Spring, Summer, Autumn, Winter = xrange(<span class="number">4</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Seasons.Spring)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>借助函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">enum</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> type(<span class="string">"Enum"</span>, (object,), dict(zip(args, xrange(len(args))), **kwargs))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Seasons = enum(<span class="string">"Spring"</span>, <span class="string">"Summer"</span>, <span class="string">"Autumn"</span>, Winter=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Seasons.Summer</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Seasons.Winter</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>collections.namedtuple</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Seasons = namedtuple(<span class="string">'Seasons'</span>,<span class="string">'Spring Summer Autumn Winter'</span>)._make(xrange(<span class="number">4</span>)) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Seasons</span><br><span class="line">Seasons(Spring=<span class="number">0</span>, Summer=<span class="number">1</span>, Autumn=<span class="number">2</span>, Winter=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Seasons.Autumn</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>2）<strong>替代缺陷</strong></p><ul><li>允许枚举值重复</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Seasons = namedtuple(<span class="string">'Seasons'</span>,<span class="string">'Spring Summer Autumn Winter'</span>)._make(xrange(<span class="number">4</span>)) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Seasons</span><br><span class="line">Seasons(Spring=<span class="number">0</span>, Summer=<span class="number">1</span>, Autumn=<span class="number">2</span>, Winter=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Seasons._replace(Spring=<span class="number">2</span>)   <span class="comment"># 不合理</span></span><br><span class="line">Seasons(Spring=<span class="number">2</span>, Summer=<span class="number">1</span>, Autumn=<span class="number">2</span>, Winter=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li>支持无意义的操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Seasons.Summer + Seasons.Autumn == Seasons.Winter    <span class="comment"># 无意义</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>3）<strong><code>Python2.7</code>的替代方案(<code>Python3.4</code>后引入<code>Enum</code>类型)</strong>：<strong><code>flufl.enum</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flufl.enum <span class="keyword">import</span> Enum</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seasons</span><span class="params">(Enum)</span>:</span></span><br><span class="line">​</span><br><span class="line">    Spring = <span class="string">"Spring"</span></span><br><span class="line">    Summer = <span class="number">2</span></span><br><span class="line">    Autumn = <span class="number">3</span></span><br><span class="line">    Winter = <span class="number">4</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">Seasons = Enum(<span class="string">'Seasons'</span>, <span class="string">'Spring Summer Autumn Winter'</span>)</span><br><span class="line">​</span><br><span class="line"><span class="keyword">print</span> Seasons</span><br><span class="line"><span class="keyword">print</span> Seasons.Summer.value</span><br></pre></td></tr></table></figure><h2 id="建议12：不推荐使用type来进行类型检查"><a href="#建议12：不推荐使用type来进行类型检查" class="headerlink" title="建议12：不推荐使用type来进行类型检查"></a>建议12：不推荐使用type来进行类型检查</h2><p>1）基于内建类型扩展的用户自定义类型，<code>type</code>函数并不能准确返回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInt</span><span class="params">(int)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户类UserInt继承int类实现定制化，不支持操作符（+=）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self._value = int(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(other, UserInt):</span><br><span class="line">            <span class="keyword">return</span> UserInt(self._value + other._value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._value + other</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iadd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"not support operation."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self._value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Integer(&#123;0&#125;)"</span>.format(self._value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    n = UserInt()</span><br><span class="line">    print(n)           <span class="comment"># 输出 0</span></span><br><span class="line"></span><br><span class="line">    m = UserInt(<span class="number">2</span>)</span><br><span class="line">    print(m)           <span class="comment"># 输出 2</span></span><br><span class="line"></span><br><span class="line">    print(n+m)         <span class="comment"># 输出 2</span></span><br><span class="line">    print(type(n) <span class="keyword">is</span> types.IntType)  <span class="comment"># 使用type进行类型判断，输出 False</span></span><br><span class="line">    print(isinstance(n, int))  <span class="comment"># 输出 True</span></span><br></pre></td></tr></table></figure><p>2）在旧式类中，所有类的实例的<code>type</code>值都相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = B()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a) == type(b)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;type <span class="string">'instance'</span>&gt;</span><br></pre></td></tr></table></figure><p>3）可以用<code>isinstance()</code>函数检查。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">2</span>, float)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">"a"</span>, (str, unicode))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((<span class="number">2</span>,<span class="number">3</span>), (str, list))</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((<span class="number">2</span>,<span class="number">3</span>), (str, list, tuple))</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="建议13：尽量转换为浮点类型再做除法"><a href="#建议13：尽量转换为浮点类型再做除法" class="headerlink" title="建议13：尽量转换为浮点类型再做除法"></a>建议13：尽量转换为浮点类型再做除法</h2><p><strong>当涉及除法运算的时候尽量先将操作数转换成浮点类型再做运算。</strong></p><ul><li>浮点数不精确性导致的无限循环：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> i!=<span class="number">1.5</span>:</span><br><span class="line"><span class="meta">... </span>    i=i+<span class="number">0.1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure><h2 id="建议14：警惕eval-的安全漏洞"><a href="#建议14：警惕eval-的安全漏洞" class="headerlink" title="建议14：警惕eval()的安全漏洞"></a>建议14：警惕eval()的安全漏洞</h2><ul><li>实例：根据用户的输入，计算<code>Python</code>表达式的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:UTF-8 -*-</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ExpCalcBot</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Your answer is"</span>, eval(string)</span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"The expression you enter is not valid."</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Please enter a number or operation. Enter e to complete. '</span></span><br><span class="line">    inputStr = raw_input()</span><br><span class="line">    <span class="keyword">if</span> inputStr == <span class="string">'e'</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">elif</span> repr(inputStr) != <span class="string">' '</span>:</span><br><span class="line">        ExpCalcBot(inputStr)</span><br></pre></td></tr></table></figure><p><strong>输入</strong>：<code>__import__(&quot;os&quot;).system(&quot;dir&quot;)</code>：显示当前目录下的所有文件；<br>                <code>__import__(&quot;os&quot;).system(&quot;del */Q&quot;)</code>：删除当前目录下的所有文件。</p><p>因此，在实际应用过程中，<strong>如果使用对象不是信任源，应该尽量避免使用<code>eval</code>，在需要使用<code>eval</code>的地方可以用安全性更好的<code>ast.literal_eval</code>替代</strong>。</p><h2 id="建议15：使用enumerate-获取序列迭代的索引和值"><a href="#建议15：使用enumerate-获取序列迭代的索引和值" class="headerlink" title="建议15：使用enumerate()获取序列迭代的索引和值"></a>建议15：使用enumerate()获取序列迭代的索引和值</h2><p>对序列进行迭代并获取序列中的元素进行处理的几种方法举例：</p><ul><li><strong>方法一</strong>  在每次循环中对索引变量进行自增</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(<span class="string">"index:"</span>, index, <span class="string">"element:"</span>, i)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><strong>方法二</strong> 使用<code>range()</code>和<code>len()</code>方法结合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(li)):</span><br><span class="line">    print(<span class="string">"index:"</span>, i, <span class="string">"element:"</span>, li[i])</span><br></pre></td></tr></table></figure><ul><li><strong>方法三</strong> 使用<code>while</code>循环，用<code>len</code>获取循环次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li):</span><br><span class="line">    print(<span class="string">"index:"</span>, i, <span class="string">"element:"</span>, li[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><strong>方法四</strong> 使用<code>zip()</code>方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="keyword">for</span> i, e <span class="keyword">in</span> zip(range(len(li)), li):</span><br><span class="line">    print(<span class="string">"index:"</span>, i, <span class="string">"element:"</span>, e)</span><br></pre></td></tr></table></figure><ul><li><strong>方法五(推荐)</strong> 使用<code>enumerate()</code>获取序列迭代对索引和值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="keyword">for</span> i, e <span class="keyword">in</span> enumerate(li):</span><br><span class="line">    print(<span class="string">"index:"</span>, i, <span class="string">"element:"</span>, e)</span><br></pre></td></tr></table></figure><p><strong><code>注意</code></strong>：在获取迭代过程中字典的<code>key</code>和<code>value</code>，应该使用如下<code>iteritems()</code>方法(<code>Python3</code>不再适用)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person=&#123;<span class="string">'name'</span>: <span class="string">'Josn'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'hobby'</span>: <span class="string">'football'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k,v <span class="keyword">in</span> person.iteritems():</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> k, <span class="string">":"</span>, v</span><br></pre></td></tr></table></figure><h2 id="建议16：分清-与is的适用场景"><a href="#建议16：分清-与is的适用场景" class="headerlink" title="建议16：分清==与is的适用场景"></a>建议16：分清<code>==</code>与<code>is</code>的适用场景</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">"Hi"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">"Hi"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a==b          <span class="comment"># is 和 == 结果是一样的</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1 =<span class="string">"I am using long string for testing"</span>         <span class="comment"># 注意区分</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b1 =<span class="string">"I am using long string for testing"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1 <span class="keyword">is</span> b1</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1==b1                <span class="comment"># is 和 == 结果是不一样的</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><img src="/images/python_code91_02_idis_20190428.png" alt="is与==的区别"></p><p><strong><code>is</code></strong>：即<code>object identity</code>，表示的是对象标识符，检查对象的标识符是否一致，也就是比较两个对象在内存中是否拥有同一块内存空间；</p><p><strong><code>==</code></strong>：即<code>equal</code>，表示的是值相等，用来判断两个对象的值是否相等，可以被重载。</p><p><strong>字符串驻留(<code>string interning</code>)机制</strong>：对于较小的字符串，为了提高系统性能会保留其值的一个副本，当创建新的字符串时直接指向该副本即可。</p><p><strong>注意</strong>：判断两个对象相等应该使用 <code>==</code> 而不是 <code>is</code>。</p><h2 id="建议17：考虑兼容性，尽可能使用Unicode"><a href="#建议17：考虑兼容性，尽可能使用Unicode" class="headerlink" title="建议17：考虑兼容性，尽可能使用Unicode"></a>建议17：考虑兼容性，尽可能使用Unicode</h2><p><code>Python</code>内建的字符串有两种类型：<code>str</code>和<code>Unicode</code>，共同祖先为<code>basestring</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_uni = <span class="string">u'unicode字符串'</span>  <span class="comment"># 前面加u表示Unicode</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_uni</span><br><span class="line"><span class="string">u'unicode\u5b57\u7b26\u4e32'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str_uni)</span><br><span class="line">unicode字符串</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(str_uni)</span><br><span class="line">&lt;type <span class="string">'unicode'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(str_uni).__bases__</span><br><span class="line">(&lt;type <span class="string">'basestring'</span>&gt;,)</span><br></pre></td></tr></table></figure><ul><li><p><code>Unicode</code>：又称<code>万国码</code>，为每种语言设置了唯一的二进制编码表示方式，提供从数字代码到不同语言字符集之间的映射，从而满足跨平台、跨语言之间的文本处理要求。</p></li><li><p><code>Unicode</code>编码系统分为<strong>编码方式</strong>和<strong>实现方式</strong></p><blockquote><ul><li>在编码方式上，分为<code>UCS-2</code>和<code>UCS-4</code>，<code>UCS-2</code>用两个字节编码；<code>UCS-4</code>用四个字节编码。</li><li>实现方式又称为<code>Unicode</code>转换方式，简称<code>UTF</code>，包括<code>UTF-7</code>、<code>UTF-8</code>、<code>UTF-16</code>、<code>UTF-32</code>等。</li><li><code>UTF-8</code> 较为常见，其特点是对不同范围的字符使用不同长度的编码，其中<code>0x00～0x7F</code>的字符<code>UTF-8</code>编码与<code>ASCII</code>编码完全相同；其最大长度是4个字节。</li></ul></blockquote></li></ul><p><img src="/images/python_code91_02_methodcoding_20190428.png" alt="UTF-8编码方式"></p><ul><li><code>Windows</code>本地默认编码是<code>CP936</code>。</li></ul><blockquote><ul><li>解码：<code>str.decode([编码参数[，错误处理]])</code>  </li><li>编码：<code>str.encode([编码参数[，错误处理]])</code><br>错误处理参数有3种方式：<blockquote><p>（1）<code>strict</code>：默认值，抛出<code>UnicodeError</code>异常；<br>（2）<code>ignore</code>：忽略不可转换的字符；<br>（3）<code>replace</code>：将不可转换字符用<code>?</code>代替。</p></blockquote></li></ul></blockquote><ul><li>常见的编码参数</li></ul><p><img src="/images/python_code91_02_codingargs_20190428.png" alt="常见的编码参数"></p><ul><li>对于A、B两种编码系统之间的相互转换示意图如下：</li></ul><p><img src="/images/python_code91_02_utf8coding_20190428.png" alt="编码转换示意图"></p><ul><li>有些软件在保存<code>UTF-8</code>编码时，会在文件最开始地方插入不可见的<code>BOM</code>(<code>0xEF</code>，<code>0xBB</code>，<code>0xBF</code>，    即<code>BOM</code>)，可以利用<code>codecs</code>模块解决。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">​</span><br><span class="line">content = open(<span class="string">'manage.py'</span>, <span class="string">'r'</span>).read()</span><br><span class="line"><span class="keyword">if</span> content[:<span class="number">3</span>] == codecs.BOM_UTF8:</span><br><span class="line">    content = content[:<span class="number">3</span>]</span><br><span class="line"><span class="keyword">print</span> content.decode(<span class="string">"utf-8"</span>)</span><br></pre></td></tr></table></figure><ul><li>编码声明的三种方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=&lt;encoding name&gt;           #方式一</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:&lt;encoding name&gt; -*-    #方式二</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># vim:set fileencoding=&lt;encoding name&gt;    #方式三</span></span><br></pre></td></tr></table></figure><h2 id="建议18：构建合理的包层次来管理module"><a href="#建议18：构建合理的包层次来管理module" class="headerlink" title="建议18：构建合理的包层次来管理module"></a>建议18：构建合理的包层次来管理module</h2><p>本质上，每一个<code>Python</code>文件都是一个模块，使用模块可以增强代码的可维护性和可重用性。</p><p><strong><code>包</code></strong>    即目录，包含一个<code>__init__.py</code>文件，允许嵌套。包中的模块通过“<strong><code>.</code></strong>”访问符进行访问，即“<strong>包名.模块名</strong>”。</p><ul><li>直接导入一个包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package</span><br></pre></td></tr></table></figure><ul><li>导入子模块或者子包，包嵌套的情况下可以进行嵌套导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> package <span class="keyword">import</span> module</span><br><span class="line"><span class="keyword">import</span> package.module</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> package <span class="keyword">import</span> subpackage</span><br><span class="line"><span class="keyword">import</span> package.subpackage</span><br><span class="line"><span class="keyword">from</span> package.subpackage <span class="keyword">import</span> module</span><br><span class="line"><span class="keyword">import</span> package.subpackage.module</span><br></pre></td></tr></table></figure><ul><li><p>包中<code>__init__.py</code>文件的作用</p><blockquote><p>1）使包和普通目录区分；<br>2）在该文件中声明模块级别的<code>import</code>语句，从而使其变成包级别可见；<br>3）通过该文件中定义<code>__all__</code>变量，控制需要导入的子包或者模块。</p></blockquote></li><li><p>使用包的好处</p><blockquote><p>1）合理组织代码，便于维护和使用；<br>2）能够有效地避免名称空间冲突。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;温馨提醒&lt;/strong&gt;：在阅读本书之前，强烈建议先仔细阅读：&lt;a href=&quot;https://legacy.py
      
    
    </summary>
    
      <category term="Python" scheme="https://zhangbc.github.io/categories/python/"/>
    
    
      <category term="Python编码规范" scheme="https://zhangbc.github.io/tags/python-coding-convention/"/>
    
  </entry>
  
  <entry>
    <title>【Python编码规范】Python编码入门</title>
    <link href="https://zhangbc.github.io/2019/04/25/python_code91_01/"/>
    <id>https://zhangbc.github.io/2019/04/25/python_code91_01/</id>
    <published>2019-04-25T14:56:39.000Z</published>
    <updated>2019-04-26T16:09:59.802Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。</p></blockquote><p><strong>温馨提醒</strong>：在阅读本书之前，强烈建议先仔细阅读：<a href="https://legacy.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener"><strong>PEP</strong>规范</a>，增强代码的可阅读性，配合优雅的<a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">pycharm</a>编辑器(开启<code>pep8</code>检查)写出规范代码，是<code>Python</code>入门的第一步。</p><blockquote><p><em>本书主要内容</em></p><blockquote><p>1）容易被忽视的重要概念和常识，如代码的布局和编写函数的原则等；<br>2）编写<code>Python</code>程序管用的方法，如利用<code>assert</code>语句去发现问题，使用<code>enumerate()</code>获取序列迭代的索引和值等；<br>3）语法中的关键条款，如有节制地使用<code>from…import</code>语句，异常处理的几点基本原则等；<br>4）常见库的使用，如按需选择<code>sort()</code>或者<code>sorted()</code>，使用<code>Queue</code>使多线程更安全等；<br>5）<code>Python</code>设计模式的使用，如用发布订阅模式实现松耦合，用状态模式美化代码等；<br>6）<code>Python</code>内部机制，如名字查找机制，描述符机制等；<br>7）开发工具的使用，如<code>pip</code>等各种开发工具的使用，各种代码测试用具的使用等；<br>8）<code>Python</code>代码的性能分析，优化的原则，工具，技巧，以及常见性能问题的解决等。</p></blockquote></blockquote><h2 id="建议1：理解Pythonic概念"><a href="#建议1：理解Pythonic概念" class="headerlink" title="建议1：理解Pythonic概念"></a>建议1：理解Pythonic概念</h2><p>1）<strong><code>Pythonic</code>的定义</strong>：充分体现<code>Python</code>自身特色的代码风格。</p><ul><li><code>The Zen of Python</code>(<code>Python</code>之禅)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> this</span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than complex.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line">Now <span class="keyword">is</span> better than never.</span><br><span class="line">Although never <span class="keyword">is</span> often better than *right* now.</span><br><span class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">'s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s do more of those!</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>快速排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_quick</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    快速排序</span></span><br><span class="line"><span class="string">    :param array:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    less = list()</span><br><span class="line">    greater = list()</span><br><span class="line">    <span class="keyword">if</span> len(array) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">    pivot = array.pop()</span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(array):</span><br><span class="line">        <span class="keyword">if</span> item &lt;= pivot:</span><br><span class="line">            less.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            greater.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sort_quick(less) + [pivot] + sort_quick(greater)</span><br></pre></td></tr></table></figure><p>2）<strong>代码风格</strong></p><ul><li>交换两个变量的值，<code>packaging/unpackaging</code>机制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2</span></span><br><span class="line">y = <span class="number">3</span></span><br><span class="line">x, y = y, x</span><br><span class="line"><span class="keyword">print</span> x, y</span><br></pre></td></tr></table></figure><ul><li>容器遍历</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(items):</span><br><span class="line">    do_sth_with(item)</span><br></pre></td></tr></table></figure><ul><li>列表逆序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">str_c = <span class="string">'abcdef'</span></span><br><span class="line">print(list(reversed(list_a)))</span><br><span class="line">print(list(reversed(str_c)))</span><br></pre></td></tr></table></figure><ul><li>标准库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串格式化</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Hello %(name)s!'</span> % &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>注解</strong>：<code>%</code>是非常影响可读性的，因为数量多了之后，很难清除哪一个占位符对应哪一个实参。</p><ul><li><code>str.format()</code>：<code>Python</code>最为推荐达到字符串格式化方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串格式化, 替代%</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Hello &#123;name&#125;!'</span>.format(name=<span class="string">'Tom'</span>)</span><br></pre></td></tr></table></figure><p>3）<strong><code>Python</code>的包和模块结构</strong></p><blockquote><p>(1) 包和模块的命名采用小写，单数形式且短小；<br>(2)包通常作为命名空间，如只包含空的<code>__init__.py</code>文件。</p></blockquote><h2 id="建议2：编写pythonic代码"><a href="#建议2：编写pythonic代码" class="headerlink" title="建议2：编写pythonic代码"></a>建议2：编写pythonic代码</h2><p>1）<strong>要避免劣化代码</strong></p><blockquote><p>(1)避免只用大小写来区分不同的对象；<br>(2)避免使用容易引起混淆的名称；<br>(3)不要害怕过长的变量名。</p></blockquote><ul><li>实例1（函数名称，变量名意义均不明）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funA</span><span class="params">(list_items, num)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param list_items: </span></span><br><span class="line"><span class="string">    :param num: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> list_items:</span><br><span class="line">        <span class="keyword">if</span> num == element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>实例2（<strong>推荐</strong>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_num</span><span class="params">(list_search, num)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param list_search:</span></span><br><span class="line"><span class="string">    :param num:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(list_search):</span><br><span class="line">        <span class="keyword">if</span> num == value:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>2）<strong><code>pep8</code>检测工具</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;pip install -U pep8</span><br><span class="line">C:\Users\Administrator\Desktop\zxt&gt;pep8 --first database.py</span><br><span class="line">database.py:83:1: E302 expected 2 blank lines, found 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">pep8 --show-source --show-pep8 waijiao.py</span></span><br></pre></td></tr></table></figure><p>3）<strong>深入认识<code>Python</code>有助于编写<code>Pythonic</code>代码</strong></p><blockquote><ul><li>掌握<code>Python</code>提供的所有特性，包括语言特性和库特性；</li><li>跟进学习<code>Python</code>的最新版本提供的新特性，掌握其变化趋势；</li><li>深入学习公认比较<code>Pythonic</code>的代码，例如<code>Flask</code>、<code>gevent</code>、<code>requests</code>等。</li></ul></blockquote><h2 id="建议3：理解python与C语言的不同之处"><a href="#建议3：理解python与C语言的不同之处" class="headerlink" title="建议3：理解python与C语言的不同之处"></a>建议3：理解python与C语言的不同之处</h2><p>1）<strong>“缩进” 与 “<code>{}</code>“</strong><br><code>Python</code>中使用严格的代码缩进方式分隔代码块，应养成良好的习惯，统一缩进风格，不要混用<code>Tab</code>键和空格。</p><p>2）<strong><code>&#39;</code> 与 <code>&quot;</code></strong><br>在<code>C</code>语言中，二者有严格的区分，但是在<code>Python</code>中，区别较小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">2.7</span><span class="number">.10</span> (default, Jul <span class="number">15</span> <span class="number">2017</span>, <span class="number">17</span>:<span class="number">16</span>:<span class="number">57</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">"He said, \"Hello!\""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">'He said, "Hello!"'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1</span><br><span class="line"><span class="string">'He said, "Hello!"'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2</span><br><span class="line"><span class="string">'He said, "Hello!"'</span></span><br></pre></td></tr></table></figure><p>3）<strong>三元操作符 <code>?:</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">-2</span></span><br><span class="line">print(x <span class="keyword">if</span> x &lt; y <span class="keyword">else</span> y)</span><br><span class="line"><span class="number">-2</span></span><br></pre></td></tr></table></figure><p>4）<strong><code>switch...case</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = raw_input(<span class="string">"please input a number:"</span>)</span><br><span class="line"><span class="keyword">if</span> n == <span class="string">"0"</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"You typed zero."</span></span><br><span class="line"><span class="keyword">elif</span> n == <span class="string">"1"</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"You are in top."</span></span><br><span class="line"><span class="keyword">elif</span> n == <span class="string">"2"</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"N is an even number."</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Error!"</span></span><br></pre></td></tr></table></figure><ul><li>用跳转也可以实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">"0"</span>:  <span class="string">"You typed zero."</span>,</span><br><span class="line">        <span class="string">"1"</span>:  <span class="string">"You are in top."</span>,</span><br><span class="line">        <span class="string">"2"</span>:  <span class="string">"N is an even number."</span></span><br><span class="line">    &#125;.get(n, <span class="string">"Error!"</span>)</span><br></pre></td></tr></table></figure><h2 id="建议4：在代码中适当添加注释"><a href="#建议4：在代码中适当添加注释" class="headerlink" title="建议4：在代码中适当添加注释"></a>建议4：在代码中适当添加注释</h2><p><code>Python</code>有3种形式的代码注释：<code>块注释</code>，<code>行注释</code>，<code>文档注释(docstring)</code>。</p><blockquote><p>(1）使用块或者行注释的时候仅注释复杂的操作，算法，难以理解的技巧或者不够一目了然的代码；<br>(2）注释和代码隔开一定的距离；<br>(3）给外部可访问的函数和方法添加文档注释(<code>docstring</code>)（<code>&quot;&quot;&quot; &quot;&quot;&quot;</code>）；<br>(4）推荐文件头部包含<code>copyright</code>申明，模块描述等。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Requests HTTP library</span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">Requests is an HTTP library, written in Python, for human beings. Basic GET</span></span><br><span class="line"><span class="string">usage:</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; import requests</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; r = requests.get('https://www.python.org')</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; r.status_code</span></span><br><span class="line"><span class="string">   200</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; 'Python is a programming language' in r.content</span></span><br><span class="line"><span class="string">   True</span></span><br><span class="line"><span class="string"><span class="meta">... </span>or POST:</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; payload = dict(key1='value1', key2='value2')</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; r = requests.post('http://httpbin.org/post', data=payload)</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; print(r.text)</span></span><br><span class="line"><span class="string">   &#123;</span></span><br><span class="line"><span class="string">     ...</span></span><br><span class="line"><span class="string">     "form": &#123;</span></span><br><span class="line"><span class="string">       "key2": "value2",</span></span><br><span class="line"><span class="string">       "key1": "value1"</span></span><br><span class="line"><span class="string">     &#125;,</span></span><br><span class="line"><span class="string">     ...</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">The other HTTP methods are supported - see `requests.api`. Full documentation</span></span><br><span class="line"><span class="string">is at &lt;http://python-requests.org&gt;.</span></span><br><span class="line"><span class="string">:copyright: (c) 2015 by Kenneth Reitz.</span></span><br><span class="line"><span class="string">:license: Apache 2.0, see LICENSE for more details.</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="建议5：通过适当添加空行使代码布局更为优雅，合理"><a href="#建议5：通过适当添加空行使代码布局更为优雅，合理" class="headerlink" title="建议5：通过适当添加空行使代码布局更为优雅，合理"></a>建议5：通过适当添加空行使代码布局更为优雅，合理</h2><p><strong><code>Python</code>代码布局应当遵循以下基本规则</strong>：<br>1）在一组代码表达完一个完整的思路之后，应该用空白行进行间隔；</p><ul><li>反例（多余空行）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> guess == number:</span><br><span class="line">    print(<span class="string">"Good job!"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Nope"</span>)</span><br></pre></td></tr></table></figure><p>2）尽量保持上下文语义的易理解性(如调用函数写在被调用函数之上)；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    B()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>3）避免过长的代码行，每行最好不要超过80个字符，超过的部分可以用圆括号、方括号、花括号等进行连接，并保存行连接的元素垂直对齐；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="string">'This is a verey long string.'</span></span><br><span class="line">     <span class="string">'It is used for testing line limited characters'</span>)</span><br></pre></td></tr></table></figure><p>4）不要为了保持水平对齐而使用多余的空格，同时也不要在一行有多个命令；</p><ul><li>反例（多余的空格）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x =                    <span class="number">5</span></span><br><span class="line">Year =                 <span class="number">2013</span></span><br><span class="line">name =                 <span class="string">"Jam"</span></span><br><span class="line">d2 = &#123;<span class="string">'spam'</span>: <span class="number">2</span>, <span class="string">'eggs'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>反例（一行中多个命令）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X = <span class="number">1</span>; Y = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>5）空格的使用要能在需要强调的时候警示读者：<br>（1）二元运算符、比较、布尔运算的左右两边应该有空格；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x == <span class="number">1</span></span><br></pre></td></tr></table></figure><p>（2）逗号和分号前不要使用空格；</p><ul><li>推荐</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">x, y = y, x</span><br></pre></td></tr></table></figure><ul><li>反例（不推荐）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x == <span class="number">4</span> :</span><br><span class="line">    print(x , y)</span><br><span class="line"></span><br><span class="line">x , y = y , x</span><br></pre></td></tr></table></figure><p>（3）函数名和左右括号之间，序列索引操作时序列名和<code>[ ]</code>之间不要空格，函数默认参数两侧不需要空格；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_quick</span><span class="params">(array, if_print=<span class="number">0</span>)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">arrays = [<span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">19</span>, <span class="number">27</span>]</span><br></pre></td></tr></table></figure><p>（4）强调前面的操作符的时候使用空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-2</span> - <span class="number">5</span></span><br><span class="line">b*b + a*a</span><br></pre></td></tr></table></figure><h2 id="建议6：编写函数的4个原则"><a href="#建议6：编写函数的4个原则" class="headerlink" title="建议6：编写函数的4个原则"></a>建议6：编写函数的4个原则</h2><p><strong><code>函数</code></strong> 能够带来最大化的代码重用和最小化的代码冗余，不仅可以提高程序的健壮性，还可以增强可读性，减少维护成本。</p><p>1）<strong>函数设计尽量短小，嵌套层次不宜过深(最好控制在3层以内)</strong>；</p><p>2）<strong>函数声明应该做到合理，简单，易于使用</strong>；</p><p>3）<strong>函数参数设计应该考虑向下兼容</strong>；</p><p>4）<strong>一个函数只做一件事，尽量保证函数语句粒度的一致性</strong>。</p><h2 id="建议7：将常量集中到一个文件"><a href="#建议7：将常量集中到一个文件" class="headerlink" title="建议7：将常量集中到一个文件"></a>建议7：将常量集中到一个文件</h2><p><code>Python</code>使用常量：</p><blockquote><p>通过命名风格来提醒使用者该变量代表的意义为常量，如常量名所有字母大写，用下画线连接各个单词；<br>通过自定义的类实现常量功能。</p></blockquote><ul><li>示例：<code>const.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_const</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ConstError</span><span class="params">(TypeError)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ConstCaseError</span><span class="params">(ConstError)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__dict__.has_key(name):</span><br><span class="line">            <span class="keyword">raise</span> self.ConstError, <span class="string">"Can't change const.&#123;name&#125;"</span>.format(name=name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.isupper():</span><br><span class="line">            <span class="keyword">raise</span> self.ConstCaseError, <span class="string">'const name "&#123;name&#125;" is not all uppercase'</span>.format(name=name)</span><br><span class="line">        self.__dict__[name] = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys.modules[__name__] = _const()</span><br></pre></td></tr></table></figure><ul><li>调用实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> const</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const.COMPANY = <span class="string">"IBM"</span></span><br><span class="line">print(const.COMPANY)</span><br><span class="line"></span><br><span class="line">const.COMPANY = <span class="string">"IBM2"</span></span><br></pre></td></tr></table></figure><ul><li>上述调用会报错，因为代码中的常量一旦生成便不可更改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/home/projects/pythoner/quality_code/algorithm_sort.py"</span>, line <span class="number">40</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    const.COMPANY = <span class="string">"IBM2"</span></span><br><span class="line">  File <span class="string">"/home/projects/pythoner/quality_code/const.py"</span>, line <span class="number">18</span>, <span class="keyword">in</span> __setattr__</span><br><span class="line">    <span class="keyword">raise</span> self.ConstError, <span class="string">"Can't change const.&#123;name&#125;"</span>.format(name=name)</span><br><span class="line">const.ConstError: Can<span class="string">'t change const.COMPANY</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《编写高质量代码-改善Python程序的91个建议》的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;温馨提醒&lt;/strong&gt;：在阅读本书之前，强烈建议先仔细阅读：&lt;a href=&quot;https://legacy.py
      
    
    </summary>
    
      <category term="Python" scheme="https://zhangbc.github.io/categories/python/"/>
    
    
      <category term="Python编码规范" scheme="https://zhangbc.github.io/tags/python-coding-convention/"/>
    
  </entry>
  
  <entry>
    <title>【心路历程】做好自己，面对现实（七）</title>
    <link href="https://zhangbc.github.io/2019/04/22/myself_08/"/>
    <id>https://zhangbc.github.io/2019/04/22/myself_08/</id>
    <published>2019-04-22T14:53:30.000Z</published>
    <updated>2019-04-22T15:00:36.255Z</updated>
    
    <content type="html"><![CDATA[<p>弹指一瞬，已是四年没有更新这个系列的东西，想说的太多却欲言又止，生活的磨练快让我认不得从前的自己了，今日此时此刻翻阅了一下以前的关于自己的想法与历程，觉得有必要继续这个系列的话题了，以记录自己最真实的生活状态，人生旅程漫漫，不能没有梦，不能忘了原有的动力，即使穷生活也得还原生活的本真，揭开虚伪的面纱，还自己一个最真实的人生。</p><p>大学毕业快五年，我一直没有忘记思考自己想要什么样的生活？其实我还是没有想太明白，从不怕被人抛弃，也不怕人笑话，其实我对金钱一直是比较抵触的，但当听说很多朋友已买房的时候，我开始慢慢怀疑自己是不是有点另类了，多少人为了一套房子煞费苦心，得到了之后却并没觉得开心？虽然他们负债累累，谨小慎微的过着余生可数的日子，但是他们实现了人生一个小小的目标，而且时间不算太长。再回头审视自己，从学校出来，拿着微薄的薪水，带着一颗自卑的心，一直就这么撑着，因为身体的原因，还有倔强的性格，一丝丝不甘心的愿望，顿时觉得自己被时代抛弃了美好的青春年华。殊不知是自己缺少一颗闯进的心，缺少一个真正的规划的人生目标，2014年错失了一次从头再来的机会，那些所谓贷款的还款计划，今日想起来，着实应证了那句话，贫困限制了你的视野。穷怕了，连一个利息钱都不想多付一分，如果时时刻刻算着自己的经济账，那如何超脱自己，达到不受金钱的束缚？</p><p>毕业就知道，三年一个小坎，五年一个大坎，跳过了就成功了，没有跳过注定平庸，至少一段相当长的时期会过着不是自己想要的生活。其实毕业这五年，我算是平庸得不能在平庸了，但是至始至终有一颗不甘平庸的心。2013年得力于同窗的举荐进了一家不大不小的医药物流企业做ERP技术支持，从零开始，从维护一个简易的电商平台再到一个分公司ERP业务系统再到整个公司ERP系统，不足一年就已完全掌控，对ERP流程优化，业务系统改造，与部门有效沟通均出了应有之力。尽管如此，对当时的生活状态还是不满意，工资低不说，主要感觉还是无法满足自己的学习欲望，于是乎，各种倒腾自己的业余生活尝试新技术的学习，还是想做一名合格的码农。2014年4月同事离职，两个人的工作推到了我一个人身上，经一个月的调整，也算平稳过渡，就这么撑到了2015年4月离开。其实对我来说得到了极大了锻炼价值，从中慢慢体会了许多东西，什么事情分轻重缓急，哪些任务需要主次分明，哪些工作项得有条不紊，只有亲身体验了方可知其中的奥妙。在这家公司，让我学会了做事，技术没有收获多少，做事的思维大有提升。2015年4月离职，去了上海，原本是拜师傅去的，仅仅半个月由于自己基础实在是太薄弱，最后夭折，开始寻下一份工作。这辈子一定要尝试自己想做的工作，想过的日子，哪怕没钱，哪怕遭无数人鄙视，一定要去做，必须去满足自己小小的虚荣心，哪怕只有一天，无论付出多大的代价。这是我拜师最大的收获，认识了一位开发大神（也是我同乡），后来离开也拒绝了他给我的半个月薪水，不为别的，就为一个承若：干不好，分文不取，拍屁股走人。他给了我很多建议，受益匪浅，时至今日，我们依然保持着联系，我依然能感受他对我无微不至的关怀。花了一个月的时间，拿到两个比较中意的offer，因不想重拾ERP技术，拒绝了业界许多好心人的推荐，当时的想法就是宁可无工作也不去走老路，一定要坚持自己的信念。经过两家工作性质对比思考，最终选择了薪资较低而且极为陌生的领域，开始决定摸爬滚打。技术用上了我业余的学习所得，当然也没有排除我之前掌握的核心技术栈。说是开发工程师，其实进来才发现也不是那么回事，各种杂活脏活还是由我一个人做，创业公司嘛，坑不少，想想能锻炼人，能感受一波创业的辛酸史，便留下了断了其他念头，老板在吃喝玩乐方面也比较阔气。在这家公司最大的感受就是，创业不易，且行且珍惜，要有危机意识，时时刻刻保持一颗清醒的头脑，一句话谨记，逆水行舟不进则退。其实生活工作亦如此。后来，感觉老板心态变了，不断画饼(平生最恶此举)，我就离开了。期间认识了不少人，见识了不少场合，逢场作戏太多，越来越觉得当初毕业拒绝考虑医院单位是明智之举。2015年5月至2017年4月，就这样结束了我的第二份工作，即将有幸迎来我的第三份工作—我在一家互联网金融的创业公司担任爬虫工程师，算是一个真正入门的coder，又一个全新的挑战。从上海转战武汉，回武汉也是我的一个想法—离家进了一小步，故人在，朋友常聚，情谊永存，工作之外，还需要倒腾一下生活，我是一个极度恋旧情的人，很难和新朋友结交为知己。很赞赏那句“人生得一知己足矣”，但是心里还是不乐意这么去想，我始终坚持人之初性本善的理念，只要敞开心扉，就能拥抱世界，拥抱未来。</p><p>面对一个真实的自己，细细回味着自己走过的路，顿时发现自己还是那么的倔强，尝试混迹于各种领域，生活却多了几分艰辛，坚决不留后路，至于生活到底过得如何，我还是靠着勇气战胜了自己，若能克服自卑的心理，或许我的各种尝试才会体现其应有的价值。浪费青春也罢，折腾生活也好，我无怨无悔，我会一如既往地带着人生最初的问题走下去。牛人，就是走到哪里都有可用武之地，都有金钱可挥霍，都有很多有意义的事情等着他去完成。我不是牛人，但我相信这样的人生理念，从一个小白做起，不怕丢失工作，唯恐没有勇气胜任工作。</p><p>by zhangbc<br>2018-04-24</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;弹指一瞬，已是四年没有更新这个系列的东西，想说的太多却欲言又止，生活的磨练快让我认不得从前的自己了，今日此时此刻翻阅了一下以前的关于自己的想法与历程，觉得有必要继续这个系列的话题了，以记录自己最真实的生活状态，人生旅程漫漫，不能没有梦，不能忘了原有的动力，即使穷生活也得还原
      
    
    </summary>
    
      <category term="心路历程" scheme="https://zhangbc.github.io/categories/mental-journey/"/>
    
    
      <category term="心路历程" scheme="https://zhangbc.github.io/tags/mental-journey/"/>
    
  </entry>
  
  <entry>
    <title>【心路历程】做好自己，面对现实（六）</title>
    <link href="https://zhangbc.github.io/2019/04/22/myself_07/"/>
    <id>https://zhangbc.github.io/2019/04/22/myself_07/</id>
    <published>2019-04-22T14:39:55.000Z</published>
    <updated>2019-04-22T14:51:53.849Z</updated>
    
    <content type="html"><![CDATA[<p>晃晃悠悠又是一年时，该到了总结与反思的时候了。想想当初的豪情壮志，如今却被时间磨平了，淡化了，可笑？可恨？可惜？可怜？这一年，不知道用什么言语表达，用什么词汇来描绘，单单是工作那么简单，抑或生活的平淡无奇，或许吧，生性贪婪而又好懒的我，真的不知道怎么总结这一年的得失？该是静下来好好思索思索的时候了，人无远虑，必有近忧。我始终认为人之所以与一般动物有别，就在于思维，靠着自己的思考实现自己应有的价值，思维的宽度决定了人的高度，思维的深度决定了人的价值。活着，本身就体现了一种非凡的价值。基于这个信念，我觉得有必要坦诚地面对现实，做好自己，别人的永远不会是自己的，但是世界是属于每个人的，不要忘却拼搏，终有一天会得到应有的回报。</p><p>这一年，从生活上得到的，工作中学到的，自己充电了解到的，都或多或少懂得了一些东西，少了一些面对未来的恐惧，多了一些生活的切身感悟，不再感怀生活，隐隐约约感到了一种无形的压力，迫使我继续前进，管他前面什么玩意儿，只要知道自己在干什么就足够了。规划赶不上变化，这不叫规划，凡是有成就的人，无不例外的实现了自己的既定目标，按着规划一步一步地去实践了，最后得以收获。所以，像我这样的小罗罗，注定成就不了所谓的事业，至少目前的这种态度，因为现实生活告诉我，成功容不得半点借口，今天计划的事情拖到明天，请问时间会倒流吗？对照一下13年的计划（参见13年终总结《2013与2014之流水》），顿时感慨良多。</p><p>1，补2013的读书空白。</p><p>这个做了一些，但还是严重不足，零零散散涉足了七八本（PDF，包括在读的），接触了Python，MySQL，学习不够深入。</p><p>2，每天坚持听一下VOA，抽点时间学习一下英语；(这一点做得非常差，逢考必败的根源所在) </p><p>这个做的稀烂，死活坚持不下来，不是没有用，订阅的SQLServerCentral没有研读过，稍微看过几篇，东西确实不错，老外就是老外，干货多多。IT不学真不行，永远了解不了最新的东西，最实在的东西。</p><p>3， 计划一次旅行。</p><p>玩嘛，我想这个毫无疑问实现了，时间虽短，但也算是达到了预期的效果，开开眼界，找找年轻疯狂的感觉，我想应该知足了，有游记见证，但是还欠一篇拙作，关于看电影引发的个人思考。</p><p>4，深入SQL学习，做一个SQL学习系列，这也是14年部门分下的培训任务。 </p><p>这个系列没有做，多多少少学了一些，缺乏系统性，至于什么原因，我不想辩解，多说无益。部门人员异动，所谓的培训任务也就不了了之。</p><p>5，独立开发一到两个有价值的系统。 </p><p>初生牛犊不怕邪，尽管雄心勃勃的做了个小系统（博客为证），由于种种原因，还是没有最终使用。这也没干好，那也没有做成，我究竟干了些什么呢？ </p><p>1，同事四月辞职，当时对业务系统还是没有多少头绪，交接的时候很多事情还是模棱两可，两个人的事情突然让我一个新手来做，顿时感到惶惶不可终日，不能怠慢了各路”神仙“，否则吃不了兜着走。 经过一个月的挣扎，算是基本搞定，平稳过渡，工作从开始的畏手畏脚到现在有的放矢。这或许就是所谓的成长吧，要想彻底的深入掌握ERP，我想还远远不够格，技术需要的不多，其实真正高大上的东西未必能普及到企业中去，ERP关键在于对业务的梳理，流程的理解，随业务的变化而变化，认识—&gt;理解—&gt;掌握—&gt;优化，看起来极其容易，做起来却百般不易。在维护的过程中，我逐渐明白一个道理，呆呆地坐在电脑前是开发不了用户满意的软件的，只有现场勘查，调研，充分理解用户实在的需求，站在用户的角度去探究解决问题的模型，我想即使做不到优秀，至少可以让用户用得满意，用得舒心。切忌，空对空的进行需求交流，分析，这是达不到效果的，最终的结果只会陷入bug—&gt;modify—&gt;bug—&gt;modify的泥潭。</p><p>2，生活，其实这没什么好说的，平淡无奇，掀不起半点涟漪。中秋，看了下同学，顺道和亲人过个团圆节，国庆，游了下西湖，走访了一位对我非常有影响力的叔叔，可以这么说，从小学到初中，我从他身上学到了不少东西，跟我讲作业，陪我玩象棋，与我谈未来，每逢寒暑假，只要他在家，我几乎是没有离开过他，对我的生活起着潜移默化的作用。 有这样一位指引者，我是多么的幸运啊！成年了，我们再也不是小孩子了，正因为如此，我们开始忙碌起来，忘记与亲人联系，忘记与朋友聊天，老婆老公，房子车子等一系列话题开始渐入我们的生活，心随之浮躁起来，开始了一些功利化的行为，从此联系似乎带了一种色彩，不再单纯了。疏于亲人，远于儿时最好的玩伴，只要不要同一个城市，作为朋友遗忘的概率极大，新建一个圈子，开始一种新的生活。或许我是一个比较喜欢恋旧的人的缘故吧，总感觉这样不太好，但是又不知如何是好？歌词唱得好：结交了新朋友，别忘了老朋友。感情，是个神奇的东西，它能牵动一个人的每根神经，或远或近，总有一种思念，偶尔总会情不自禁地拿起手中的电话拨拨最熟悉的号码，如果有一天不再联系，我无法想象我的生活有多么凄凉，不会聊谈了，嘴笨了，也许号码就不知不觉地没了，生活与感情，随缘吧。整个年度中，基本保证每周跟外公一次通话，跟父母一次通话，其他亲朋好友随机打，每个月电话费不低于100元，有些人常年未通电话，并非代表我们之间缘分已尽。</p><p>3，关于学习，这点确实做得很糟糕，博客数数几篇，寥寥几语，没有含金量，怎么能这样么？Python学习了基本语法，MySQL写点增删改查，多多接触，多多益善，这是个大忌。贪多必失， 用不到，学得多，忘得快，这个经典教训，一定要要牢记。多做笔记，做做分享，向大牛看齐，选一个切入点深入进去，真正学会融会贯通，做好知识储备，经历了一年的摸索，该是清醒的时候了。</p><p>4，关于经济目标，14年的规划是一年搞定助学贷款，今年实际完成是50%，弥补了去年的负债，再者向家里还了一笔债务，回家过年备点，基本上一年微薄的薪水就OK了， 存钱是没戏了，毕业三年内，我没有希望能存多少，但愿没有虚度光阴，实际还是虚度了一年。</p><p>2014年就这么过去了，总之是离目标有很大差距，主要原因是自己自制力不够，计划过于完美，难以实现。展望2015，希望有一个不一样的收获，所以，规划还是要有的。基于自己贪婪的性格，有必要重新审视一下，计划规划不能是一纸空文。走过的路，见过的人，做过的事，尽量留留痕迹，免得回头追问时间又去哪儿了？延续大四后期的坏习惯，看了大量的战争片，2015年再也不能这样了，否则真的玩完了。</p><p>谨记于此，以警示自己，误入歧途不能自拔，2015年应该没有什么大风浪，没有什么大动作，平平静静，充实365天，多多努力才是王道。</p><p>by zhangbc<br>2014-12-30</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;晃晃悠悠又是一年时，该到了总结与反思的时候了。想想当初的豪情壮志，如今却被时间磨平了，淡化了，可笑？可恨？可惜？可怜？这一年，不知道用什么言语表达，用什么词汇来描绘，单单是工作那么简单，抑或生活的平淡无奇，或许吧，生性贪婪而又好懒的我，真的不知道怎么总结这一年的得失？该是静
      
    
    </summary>
    
      <category term="心路历程" scheme="https://zhangbc.github.io/categories/mental-journey/"/>
    
    
      <category term="心路历程" scheme="https://zhangbc.github.io/tags/mental-journey/"/>
    
  </entry>
  
  <entry>
    <title>【心路历程】做好自己，面对现实（五）</title>
    <link href="https://zhangbc.github.io/2019/04/22/myself_06/"/>
    <id>https://zhangbc.github.io/2019/04/22/myself_06/</id>
    <published>2019-04-22T14:28:05.000Z</published>
    <updated>2019-04-22T14:35:43.822Z</updated>
    
    <content type="html"><![CDATA[<p>上班已有几天了，可是思绪似乎还是停留在十一之行，也许是没有长大的表现，也许是该为这次的所见所闻记下点什么，一种发自内心的声音不停告诉自己，利用有限的时间，拿起一支拙劣的笔，为那个时刻，为已流失的光阴做一些补救脚印吧。此次杭州之行，收获还是蛮大的，且不说杭州风景，杭州美女，我只想说说杭州给我烙下的一个又一个印象。美丽杭州，说得一点也不过，或许在杭州，让我真真切切地感受到了中国梦的一步步逼近。当然，遇到的某些奇葩，我也就不提了，权且当他们小市民无知吧。</p><p>十一，我们花了一整天的时间，沿着西湖的河堤走了很长很长的一段路，西湖如西子，杭州佳人多，风景确实很美，感受在心灵，风景的描述及其感受，恕难从笔，我不擅长优美的散文故事。此篇所探讨的是国庆遇到的一系列的故事。早上，八点出发，坐7路公交，人多拥挤，这是每个城市的最大亮点。提到公交，我不得不感叹下武汉的公交，车猛，两车之间几乎可以保持零距离，人更猛，即使夹在门缝也不愿意下车，真正是做到了“敢为人先”的大无畏精神。相对于武汉，杭州公交略显宽松一点，我们在来回西湖的路上还能找个座位坐坐，恐怕这个待遇在武汉难得，至少我的印象很少，尤其在火车站赶坐公交，或者校门口坐公交，基本都是一路站到底。这或许就是城市生活，几许烦恼几多喜吧。这次出行，让我彻底感到无语的公交是在湖州长兴县城，一下子让我回到了高中时代的县城公交，破就不多说了，可恨的是25分钟一趟，沿途不报站，招手即停，更让你意想不到的是终点站还是高铁站。高铁都有了，还没钱改善一下公交么？从高铁站下来，遇上这样的公交，让我产生无限联想，县城企业无数，高大上的政府大楼（据说30亿建成），我还能说些什么呢？遇到这样的县城，只能是为该城百姓哀其不幸了。想想我们那个穷乡僻壤的小县城，这点还算是好的，年年在改善中，变化中……总体来说，杭州的公交还算不是太拥挤，或许我们赶上最疯狂的那一路吧，暂且留个好印象。</p><p>十一晚上，由于一切临时决定，算是做到了随心所欲，疯到了极点，到处招手打的，各路的士哥都把我们给拒绝了，原因是我们离我们所去之处比较近，不愿意送我们，还好心跟我们顺便指了一下方向。我们靠着导航瞎摸也不是个事儿，最后还是让两辆超破的摩的小坑了一把，以每人10元送我们去电影院，也在这里遇到了奇葩，姑且让我作个怪吧，建议出行尽量少做摩的，每个地方的摩的都不是省油的灯。十一点打的，由于是第一次，怕踩大坑，问了是打表还是一口价，说是打表，那没得说了，毕竟我们三个人都是第一次来这里，随便吧，反正我是抱着被坑的心态上车的，再说时候也不早了，离订房处还有一段相当的路程。为什么我是这种心态？说实在的，我对这些司机的故事早有耳闻，打表绕着走，一口价近道飞奔。四年前，在深圳，就这么深深地被坑了一次。上车和司机寒暄了几句，感觉司机人还算靠谱，下车20元，不算坑，毕竟快凌晨了，在某些地方，我想司机肯定会狠狠宰我们一次，毕竟一看我们就是外来主儿。相比摩的，我心里舒坦多了。接下来的三次的士都是这个价，路程不算太近，想到回家过年问起的士价格，真的感觉自己就是一个外乡人，被宰的主儿。从与司机的寒暄中，感受到了杭州人的生存压力，浙江富有，温州老板遍布神州大地，“5~6万的房价楼盘一天被抢空”，这话不管是不是含水分，含多少水分，但是能让我真正感受到杭州的生活成本不会太低，建筑极具特色。城市公共设施建设比较好，电影院随处可见，第一天费劲地找了两三家，第二天顺眼目睹了两三家。有住的就有吃的，有吃的就有乐的，有乐的就有游的，这或许就是杭州给我的一个印象吧。还有一点收获，是在钱塘江边上无意的收获，那就是漂流书屋，公共书屋，城市中能看到长廊边有这样的书亭设施，恐怕不多见，可以默默地感受一下杭州的城市文化建设。很多时候，谈及文化建设都感觉是知识分子的事情，老百姓能温饱就不错了。其实生活离不开文化，与人交流，感受生活，文化无处不在，与大师交流，心里豁然开明，与同龄人畅谈生，人生向往无限，与父辈交心，真真实实感受生活的酸甜苦辣，作为新一代的穷屌丝，文化不应该成为高大上的东西，我觉得有必要丰富一下自己的文化美餐，应该让文化实实在在地融入我们的日常生活，生活有向往，有期待，才有源源不断的奋斗的动力。但是杭州书亭美中不足的是，有书屋，书很陈旧，很少有人去翻阅，我随手翻看了一本书叫《麻雀》，屠格列夫著，这是当年小学四年级的一篇课文，讲述了一篇关于母爱的故事，印象非常深。记得当时读不懂，老师从教案中跟我们朗读课文中省去的那一部分时，我们更是一股脑的傻了。母爱，是一个伟大的话题，我很庆幸，我有一位勤恳和善仁慈，任劳任怨的母亲，只是感觉亏欠她太多太多……再次，翻开这篇课文，想到昨日的电影，心情顿时沉重了不少。</p><p>本次国庆之行，算是毕业后比较满意的一次旅行，杭州，长兴，两个不同的城市，两种不同的心境，收获却不是二的。浮浮躁躁的心，不知道又丢失了多少瞬间的灵感，不巧赶上工作的繁忙季，又不想丢失这些美好的记忆，所以还是记下来吧。写着写着，不曾想成了一篇回忆之作。</p><p>by zhangbc<br>2014-10-09</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上班已有几天了，可是思绪似乎还是停留在十一之行，也许是没有长大的表现，也许是该为这次的所见所闻记下点什么，一种发自内心的声音不停告诉自己，利用有限的时间，拿起一支拙劣的笔，为那个时刻，为已流失的光阴做一些补救脚印吧。此次杭州之行，收获还是蛮大的，且不说杭州风景，杭州美女，我
      
    
    </summary>
    
      <category term="心路历程" scheme="https://zhangbc.github.io/categories/mental-journey/"/>
    
    
      <category term="心路历程" scheme="https://zhangbc.github.io/tags/mental-journey/"/>
    
  </entry>
  
  <entry>
    <title>【心路历程】做好自己，面对现实（四）</title>
    <link href="https://zhangbc.github.io/2019/04/22/myself_05/"/>
    <id>https://zhangbc.github.io/2019/04/22/myself_05/</id>
    <published>2019-04-22T14:06:46.000Z</published>
    <updated>2019-04-22T14:36:41.331Z</updated>
    
    <content type="html"><![CDATA[<p>水光潋滟晴方好，山色空蒙雨亦奇。<br>欲把西湖比西子，浓妆淡抹总相宜。<br>    ———-苏轼.《饮湖上初晴后雨》</p><p>一次疯狂的旅行，一次没有规划的旅行，一群不靠谱的靠谱的旅行， 除此之外，我实在是找不到什么适合的言语来表达这次国庆之行了。岁月总是在不经意的手指尖划过，用心去捕捉生活一瞬间的美，认认真真地感受其中的乐趣，我想这才是我所期盼的生活吧。写作的灵感也就来源于那一刹那之间，仔细回想学生时代，每当写作文的时候，真的就是这么一回事，其实生活亦如此，此次的国庆之行更是如此。</p><p>关于国庆之行的最初构想，是由大学班长何伟同志提出的，我只是从旁提提意见，准备十一回武汉聚聚，然后找个景点游哉悠哉。毕业一年了，大家是该聚聚的时候了，说长不长的一年，相信大家经历了很多，也收获了很多，相互叨叨，未必没人不期待吧。为此还特地，班长建了一个群，叫“十一去哪儿”，刚开始那会，激情四起，我心中甚喜，提前了一个月跟部门老大说十一想请假（要知道节前假后请个假有多么困难）。临近九月中旬，再次确定人数的时候，发现就不是原来那么回事了，各有各的忙，离别时难聚更难，相聚是多么不容易啊！没有闲人，既然如此，不必强求，也无须介怀，匆匆之间的生活，理解万岁。说实在话，我的内心依然不甘，计划的十一出行难道真的就要被不能班聚而葬送吗？思来想去，还是不甘心，十一不出行又能干嘛呢？他们都忙， 我闲人一个，那就一个人漂泊了，避远就近，人在苏州，苏杭苏杭，那就杭州了。所以一个人就默默地买好票了。原本不想打扰别人已有的安排，这实在不是我的风格，不强求于人，一切随心所愿的好。可我还是没有忍住，问了下何伟，令我意想不到的是他已经买好回家票了，三言两语，他也改签了去往杭州的高铁票，谁叫我们是好哥们呢？算是坑，也愿跳。9月13日，杭州的票就这么定了，最坏的打算是两个爷们独闯杭州，不为别的，只为西湖。期间，我们也各自咨询了很多亲们，问有没有意向去？回复都是模棱两可的，一句话，不靠谱。不靠谱就不靠谱吧，希望与现实总是存在差距的，那就算一次不靠谱的旅行吧。但是我依然没有放弃寻求伙伴的机会，直到9月27日，一条好友的说说振奋了我，平时少聊天，这次竟然答应得如此爽快，让我惊喜让我意外，此次旅行总算不是纯爷们的队伍了，振奋人心啊！杭州附近的城市，费费劲还是搞到了30日的火车票，算是尘埃落定了。</p><p>30日下午，三人分别从不同的三个城市（无锡，杭州，马鞍山）出发，经历火车时间也差不多（5H），就这么开始这次疯子旅行。说是一群疯子，其实也不过，列几个事实，疯不疯，看着说吧：</p><p>一，30日晚上相聚约九点，找个餐馆就餐，边吃边聊，彼此熟悉熟悉，然后开始找房子。都说人多不好找，我们也确实找了一阵子，十点多找到了。</p><p>二，第二天八点出发，临时看公交，上车，游西湖，随身没有一张地图，只是问了一下团价，觉得太贵，没报，索性两腿跑西湖，一天下来，跑的地点有：三潭印月，博物馆，雷峰塔（人多，没有买门票），钱王祠，苏堤（2.8公里，没走完），花巷观鱼，曲院风荷。小有遗憾，六点多出大门未见音乐喷泉。西湖之景，美不胜收，知足就行，开心便罢。开始寻找吃饭的地方，疯疯癫癫地走了不少路，耗时不少，总算找到一家快餐自助餐厅了。</p><p>三，原想着，吃罢饭，该找住的地方，十一游客特多，房子有限，没想到<em>*</em>来了一句，我们去看电影吧。快八点了，我们连电影院都不知道在哪儿，两部手机开始疯狂地搜索，好不容易找到号称浙江省最大的电影院——胜利剧院，话说今天没票了。不达目的决不罢休。又一次次探索，功夫不有心人，错过了《黄金时代》，迎来了《亲爱的》，九点25分准时上演了。</p><p>四，看完电影，十一点二十分了。我们还能找到住宿吗？我们真的要睡大街吗？我们真的要夜行杭州城吗？真的，这点着实让人担心，又是两部手机的开始漫无目标地搜寻，电话咨询，我的电话下午就关机了，电源准备不足（出行的亲们，引以为戒）。时至凌晨，我们找到价格不高不低的房子，说实在的，个人感觉杭州的租房价格有点奇葩，单间竟然和标准间一个价，或许我孤陋寡闻了吧。</p><p>五，第二天一觉睡到八九点，去了钱塘江，真不是时候，空荡荡的。然后，我们又开始找吃的，不能白来杭州，游的（西湖），乐的（亲爱的），就剩吃喝了。 找了一家比较远的自助餐人均价69元/人，对于我们这几个穷屌丝而言还是可以接受的。下午五点陆续离开杭州，杭州，我们不虚此行。</p><p>一篇流水记，即将尾声。写的总是没有亲身经历的来得实在，来得刺激，来得更有价值。许多事情看起来就那么回事，实际上做起来还真不是那么回事，其中的付出，艰辛与快乐并存，恐怕只有当事人才能真真切切地感受了。用朋友的一句话，那就是——一切尽在不言之中。十一行，算是圆满了，完成了我2014年的旅游计划，聚聚聊聊的目的也算达到了，在此特别感谢二位至亲的鼎力相助，我们共同实现了”西湖梦”。这一次疯子旅行，不靠谱的旅行，给我的收获远不止这些，疯疯狂狂的旅行，简简单单的生活，实实在在的人生，何忧之有？</p><p>最后，来一张具有纪念意义而且大家都见过的小照，以此证明我们的西湖之行：</p><p><img src="/images/myself_04_20190422.jpeg" alt="三潭映月"></p><p>by zhangbc<br>2014-10-06</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;水光潋滟晴方好，山色空蒙雨亦奇。&lt;br&gt;欲把西湖比西子，浓妆淡抹总相宜。&lt;br&gt;    ———-苏轼.《饮湖上初晴后雨》&lt;/p&gt;
&lt;p&gt;一次疯狂的旅行，一次没有规划的旅行，一群不靠谱的靠谱的旅行， 除此之外，我实在是找不到什么适合的言语来表达这次国庆之行了。岁月总是在不经意
      
    
    </summary>
    
      <category term="心路历程" scheme="https://zhangbc.github.io/categories/mental-journey/"/>
    
    
      <category term="心路历程" scheme="https://zhangbc.github.io/tags/mental-journey/"/>
    
  </entry>
  
  <entry>
    <title>【心路历程】做好自己，面对现实（三）</title>
    <link href="https://zhangbc.github.io/2019/04/22/myself_04/"/>
    <id>https://zhangbc.github.io/2019/04/22/myself_04/</id>
    <published>2019-04-22T14:02:55.000Z</published>
    <updated>2019-04-22T14:06:07.377Z</updated>
    
    <content type="html"><![CDATA[<p>”露从今夜白，月是故乡明。“</p><p>不知道多少个中秋没有和家人在一起过了，大概是童年的记忆了，也渐渐淡忘了这个团圆佳节，不过，或者一个人默默地过。每到中秋，端午，七夕这样的传统佳节，我都会不停地在打电话，或许只有这样才能弥补我思念的空缺，这也许就是我的生活，注定在寂寞中努力寻找属于自己的一丝丝慰藉，成为我平凡人生中一段看似不平凡的征程罢了。</p><p>毕业一年有余，每天除了工作之外几乎没有什么业余生活，偶尔心中不免有些内疚，生活为什么不能洒脱一些，主动一些，在物欲横流的今天，难道没有钱真的就得被逼上绝路吗？或许性格原因，或许五体不勤的缘故，我总是找不出一条合适的理由说服自己，活个范儿，管别人爱说咋说呢！ 在学校感受不到假期有多长，有多宝贵，所以大多数时间都是无为地被挥霍了，上班了，才渐渐明白，假期是多么地来之不易，春节从一个月或者更长一下子缩短到一周，尤其对一个回乡途中要耗上两天的漂泊浪子来说，其中的感受无以言表。又是一年中秋时，公司放假三天，所以我想不能再挥霍了，临时决定出去走走，向来没有长远计划，说干就干的劲儿还是有的，也许是上天可怜无规划之人吧，每次都能成事。去年十一回校探友也是9月28、29日临时买的票，一次简单的旅行，还是达到了预期的目的。要走的想法有了，可是接下来还是得仔细考虑考虑，去哪儿和谁做什么等等。仅仅一个想法还是不行的，周全规划一下，方使行动成功，所以一个想法只能算是一个成功的萌芽，并不是开始。三天，不可能走得太远，苏州附近的亲朋好友屈指可数，所以很快锁定了目标，探望一下朋友，随便找个地方玩玩，想法简简单单，仅此而已，人生亦应如此。</p><p>中秋三日假，总的来说，还是蛮愉快的。逛了一个景点——昆山周庄，看到古朴的建筑，虽然人少，缺少点氛围，但是总体印象还是不错的，七点回到朋友的住处，临时买菜做饭，两个人的饭菜不一会儿就上桌了，吃着香喷喷的饭菜，仿佛找到了一种久违的感觉。生活就应该这样的，自己动手，丰衣足食，不久的将来有一个新家，开始这样的生活，想想就是一种无比的期待。人的一生终究图个什么，我不知道，但是我应该很清楚地意识到，把握每一个稍纵即逝的幸福时刻，等到踏上黄泉路那一天能够微笑地离开，这或许就是我所理解的人生吧。买菜做饭，虽是一件普通的不能在普通的事，但在这个特殊的时刻，让我陷入了一次思考：生活不就是柴米油盐酱醋吗？为什么很多时候我们无法看清楚它的真面目，不会过日子呢？算一个小账，一顿饭，外面买一顿至少得15元吧，（炒饭另外）两顿就是30元，都说菜价米价上涨，其实去市场走一遭，30元买两顿的饭菜那是绰绰有余的，份量绝对够足，不像外面炒个肉丝，只见青椒不见肉块，其次如果手艺好点，味道也不差，吃着自己做的，心里本来就是美滋滋的。精打细算，学会过日子，否则就是有金山银山也是经不起折腾的。现在生活富裕了，我们的节约意识的确淡薄了不少，想不到这些生活的琐碎，每天只会不停地想，我的工资什么时候涨？或是我的工资都去哪儿了？想起读书那会，尤其是大一的时候，自己拿着一个小本子记录着自己的每一笔开销，小到一个笔记本，牙刷的钱，隔了一个月回头看看清晰的账目，多半会是露出满意的笑脸，俗语说得好，“用钱要用在刀口子”。并不是说要无限制地节约节省，记下来是为了让自己知道钱都花到哪儿去了，不至于花钱花得稀里糊涂，道不出所以然来。一直以来，我好像真没有吝啬过花钱，但是我比较清楚自己的钱都去哪儿了，管理自己的账目应该还算清楚吧。</p><p>完了一天，吃罢饭，九点有余，临时找住处，一切还算顺利，第二天一觉睡到十点半，天热没有安排出行，又做了一顿美食。中午就从朋友住处离开了，转战下一个目标。又是一个临时电话搞定一个新行程——去看看舅舅表哥一家人，打工在外，实属不易。从昆山转战苏北，车多行程非常顺利，虽然天气很热，但还是挡不住我心中的热火，想着第二天就是中秋佳节，应该去走走。去年就想着要去看看他们的，一直不想走动，所以未能如心所愿。和一大家子亲人过个中秋，也算是团圆了，看到舅舅舅母脸上的笑容，夹着额头一丝丝皱纹，顿感心中某种不快，上一辈为我们操劳得太多了，而我们呢？偶尔连他们一个小小的心愿都未能满足，这或许所谓的生活之苦吧，再一次让我深深体会带到：经济基础决定上层建筑，有什么样的工作就有什么样的生活。生活充满了太多的无奈，每一个人的境遇所有不同，但是生活的使命却是一致的，照顾上辈，操劳下辈。中华名族的传统美德，牵扯了太多太多的故事……今年的中秋，才让我知道了中秋的滋味，都说好散好聚，我不得不说散得容易，聚之不易。一个牵动无数家庭心的中秋，总是几多欢笑几多愁，看到的是笑脸，诉不出的却是悲愁，你又何谈一个“佳”字？中秋佳节倍思亲，十五的月亮十六圆，希望终有一天，我心中的月亮也能圆，生活虽不易，但是脚下的路还得继续，一条漫漫无尽头的路，路上有亲朋好友的陪伴，不曾寂寞，不曾落单，希望能加快步伐，不负青春，带着微笑向前去。中秋，往常一个人过，电话多多，今年也不另外，但和亲人相聚，私有时间自然有所减少，未能尽可能多的问候，或许这样的日子以后还会越来越多，各位至亲，理解万岁，不曾问候，思念依旧，没有前世的缘分，哪有现在的你们，又怎么会有今生我的福分？</p><p>中秋过去已久，很久没有提笔，不知所云，以纪念今年不一样的中秋，以上次说说作结，算是给自己一个交代，“莫等闲，白了少年头，空悲切。”生活与责任，人生与使命，记住生活的美，才有源源不断的动力！ 记住以下五点，也不枉过一个美好的中秋：<br>一，旅行是人生的必修课，规划很重要，随机应变往往决定了一件事能成与否;<br>二，可口的饭菜是自己做的，靠山靠水不靠天，学会过日子，生活无处不精彩；<br>三，经济基础决定上层建筑，有什么样的工作就有什么样的生活；<br>四，身在他乡，和亲人过一个节，这才是家的感觉。<br>五，节日的问候，时光渐变，我有可能慢慢疏忽这一点，各位至亲见谅。</p><p>by zhangbc<br>2014-09-15</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;”露从今夜白，月是故乡明。“&lt;/p&gt;
&lt;p&gt;不知道多少个中秋没有和家人在一起过了，大概是童年的记忆了，也渐渐淡忘了这个团圆佳节，不过，或者一个人默默地过。每到中秋，端午，七夕这样的传统佳节，我都会不停地在打电话，或许只有这样才能弥补我思念的空缺，这也许就是我的生活，注定在寂
      
    
    </summary>
    
      <category term="心路历程" scheme="https://zhangbc.github.io/categories/mental-journey/"/>
    
    
      <category term="心路历程" scheme="https://zhangbc.github.io/tags/mental-journey/"/>
    
  </entry>
  
  <entry>
    <title>【心路历程】做好自己，面对现实（二）</title>
    <link href="https://zhangbc.github.io/2019/04/22/myself_03/"/>
    <id>https://zhangbc.github.io/2019/04/22/myself_03/</id>
    <published>2019-04-22T13:54:02.000Z</published>
    <updated>2019-04-22T13:58:58.303Z</updated>
    
    <content type="html"><![CDATA[<p>大学以来几乎没有碰过什么文学著作，心里想法太多，不能成为现实，这或许就是痴人说梦吧。梦，哦，对了，这是2013年整年最火的一个词儿，习总书记登台，让国人看到了希望，看到了一个中国梦，随着个人梦，青春梦，民族梦……应运而生。我也经常在追问自己：自己到底有没有一个梦，有没有一个明确的方向，该往何处去？</p><p>记得刚毕业那会，找工作犹豫过，想做开发，能力明显不足，懂点语言的皮毛，偶尔也会在朋友们中间调侃几句；有人建议做实施，深入实践，懂得用户真正需要的东西，然后转做开发，由于种种原因，未能实现，后来转战到今天的这家不大的公司做运维（并非真正意义上的运维，算是简单的技术支持吧），很幸运，得到了同学的帮助，领导的赏识，慢慢成熟起来。叔叔曾问我：在公司感觉怎么样？我跟他详聊了一些情况，他说，还是要多学习，对一个行业的前景估量很重要，如果不是自己想要的，就得早作打算。很清楚地记得，他跟我说起过他一个关于对行业的前景估量的故事，坚持自己的正确选择，坚定不移的走下去。不知道为什么，时至今日，我都无法看到一个清晰的方向，IT，一个令人向往而又难以令人琢磨的东西，让人几分陶醉，也让人几分忧伤，陶醉的是自己可以在其中发现自己的兴趣，为她彻夜狂欢也不是不可能，新技术层层不穷，激发我们的求知欲，可以借以免去我们的生活烦忧；忧伤的是担心自己看不清方向，一股头脑热，摘了芝麻丢了西瓜，学不到真正的东西。技术是有助于人的，偶尔也会害了人。看到很多人对IT丧失了信心，开发的转测试，测试的转销售，IT的技术更新，IT人的不断更替，真的让我很难预料以后的道路如何？</p><p>在这个部门，不到一年的时间里，我目睹了几拨人马，匆匆而来又匆匆而去，说句实话，心里不知道什么滋味，或许这就是IT界的一个缩影吧。跳槽，年轻人的专利，也是年轻的资本，出来拼的，图的不是稳定，而是快乐与生活的充实。如果我想图一份安逸的生活，我去年毕业就有可能呆在乡镇医院信息科，而且专业也对口，但是我没有，我不想这样的生活，至少不是我前半生想要的生活，给得了我安逸，却给不了我心灵的满足。根据自身的处境，身上的责任，我现在还不敢轻言跳槽，或许我资本不够，来之前，我就想过，我是来学习的，学不到东西，积累不到资本，我去何处都一样。记得有一次和朋友讨论过这个话题，跳槽，跳来跳去，手上没有筹码，在哪儿都一样。我认真思考过，我还是一个新手，什么都不会的新手，加强学习是我的第一要务。再说了，毕业前三年，我有两件事情要做：一，还贷，二，为未完成的梦做最后一搏。没有特殊情况，我是不会轻易的去改变的，即使我愿意付出更多的时间，我会为自己的想法付出行动，无论多么高的代价。这个五月应该是对我有着特殊意义的，感谢猴哥，让我搞掉了第一笔，作为低薪一族，我不觉得钱对我有多么重要，我对它从来不报任何希望，只要生活是自己想要的，没钱日子照样过。现在的生活虽不是很好，但足以让初生牛犊的我好好磨练磨练，值得熬一熬，抹掉我最初的梦想，也许会唤醒我另一个梦。</p><p>在中国梦大浪潮之下，追寻一个真实的自己，需要克服种种阻扰，来自心里的，来自家庭的，来自社会的，如果在乎多了，也就茫然了，不应该不尊重自己心中的想法，一个人如果没有强烈的金钱欲望，我想总会有平静的时刻。静心想想，我是否追随了中国梦而滋生了自己的个人梦，是否付出了行动？做一个会思考的人，在探索中前进，我想终有一天会过上属于自己想要的生活。 </p><p>by zhangbc<br>2014-05-17</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大学以来几乎没有碰过什么文学著作，心里想法太多，不能成为现实，这或许就是痴人说梦吧。梦，哦，对了，这是2013年整年最火的一个词儿，习总书记登台，让国人看到了希望，看到了一个中国梦，随着个人梦，青春梦，民族梦……应运而生。我也经常在追问自己：自己到底有没有一个梦，有没有一个
      
    
    </summary>
    
      <category term="心路历程" scheme="https://zhangbc.github.io/categories/mental-journey/"/>
    
    
      <category term="心路历程" scheme="https://zhangbc.github.io/tags/mental-journey/"/>
    
  </entry>
  
  <entry>
    <title>【心路历程】贫困，不能阻碍你的梦</title>
    <link href="https://zhangbc.github.io/2019/04/22/myself_02/"/>
    <id>https://zhangbc.github.io/2019/04/22/myself_02/</id>
    <published>2019-04-22T13:36:27.000Z</published>
    <updated>2019-04-22T13:58:38.745Z</updated>
    
    <content type="html"><![CDATA[<p>在考研期间，遇到了几个比我低一届的同学存在的困惑，本想尽早写下这篇日志作为答复，由于考研，所以一直耽搁到了现在，现在想结合自己一路走过来的经历谈谈我个人的一些想法，由于涉及家庭因素，所以只能特殊处理。如果是本人看到的，请原谅我的直述，希望不要介怀。</p><p>一个土生土长的农村娃子，经历了太多太多的遭遇，时常会为没钱的日子发愁，是的，我不可否认，农村送出一个大学生的确不容易，本来经济来源相当有限，吃了这顿还得打算下顿。 清苦，节俭，朴素等这些耳熟能详的词语似乎一个一个不但扎根于我们的脑海中，而且我们也是这么走过来的。看看家庭经济比较宽裕的同伴的生活，我们曾经羡慕过，嫉妒过，也抱怨过上天的不公正待遇……因为贫困，眼见了一个个伙伴辍学，很早就迈入了残酷的现实的社会大门；因为贫困，无数父母背井离乡，过着听人使唤的卖苦力的生活，作为子女，当然不希望父母这样，于是一些“懂事”的孩子于心不忍，即使认为自己有能力的也过早地放弃了读书梦。在一次交流中，一位学弟告诉我，他想考研，但又不想读研，顾虑重重，我问其原因。他说主要是家里供不起。还有一位学弟告诉我，他为考研与否一直在纠结，因为家中有个弟弟在读书，家庭超负。这两位哥们其实面对的是同一个经济问题，在经济问题后面应该还有一个更重要的思想问题。烦不烦，很多时候不是取决问题的本身，而是看一个人会不会去思索，能不能去积极主动地面对现实，一味地抱怨只会让你更烦更纠结。</p><p>想考研，是为以后生活得更好，这无可厚非，大学生嘛，想实现自己的人生价值，有点野心未必不是好事；想考研，是为赚大钱，拿高薪，这是一种普众心理行为，在现行的社会制度下，晋级，职称无不与学历挂钩，每个人的职业生活压力都很大，也是完全可以理解的；想考研，是想做一项研究，追随自己的兴趣与爱好，立志于科研事业，这应该是考研的最高境界。单单是为赚钱而考研，我不太赞同，一，很多高薪职位并非需要很高的学历；二，考研应该是一笔物力，财力的巨大投资，是一笔青春代价的付出，而且这种投资与付出未必会收到你所期待的结果。如果你把考研的目的这个首要而且又具有决定性的问题想清楚了，那么对你后期的复习会有更大促进作用。考研，应该说一笔风险投资。你想以后要干什么？报什么专业？考什么档次的学校？这三个问题非常重要，关系着你的复习成效。报考的学校档次应该与投资的风险系数是呈正相关的。现在的研究生经费虽然非常高，但是各种补助也是相当丰厚的。关于经费，我想说的是，这不是重点，只要你足够优秀，上帝会偏袒你的，关键是你努力如何，有几分胜算？现在国家教育投资年年在增加，投资范围逐步扩大，你就认定自己有那么差吗？绿色通道，助学贷款，各种社会资助，就在你身边，就看你主不主动。想到四年的我，曾经也为此发愁过，选学校选专业时，优先挑选较便宜的。就在我感到无助的时候，一个从天而降的好消息来了，我们县城第一次提供生源地助学贷款，这对一个需要帮助的家庭来说，不能不说是雪中送炭啊！来到县教委办理手续时，又得到了一笔助学金，而后在大学里，在同学们的帮助与信任之下，得到了四年的高额助学金。四年的大学，你都走过来了，你还怕什么？又担心什么？你是贫困生，应该享受到了一定的资助，平时省吃节用一点点，有什么困难不能克服呢？     0</p><p>贫困，不能阻碍我们的梦。鲤鱼跳龙门，农村出来的人都应该铭记这句话，这应该是我们读书初衷吧。如果我们不去尝试，怎么可能走出山旮旯？大山窝虽美，虽山清水秀，仁和心善，可是在经济与信息技术高速发展的今天，我们的经济从哪里来？难道还要死守农村自家的一亩三分地过日子吗？为了理想的生活，我们只有一条出路，那就是排除杂念，能走多久走多远，走得越远越好。起点高，不但可以改变生活，创造机会，更重要的是可以实现自己的人生价值。我们从农村走来，应该克服农村人比较狭隘的眼光，但不能说是轻视农民，不是他们无能，而是条件受限，应该用发展的、智慧的眼光正视我们的处境，没有优越感那就得靠自己的十二分努力去打拼、去创造，为不辜负乡亲们对我们的殷殷期望，必须拼。吃点苦算什么，我们又不是没有干过农活，比起插秧收割等田地间的耕作，我们要说有多幸福就有多幸福，不是吗？</p><p>贫困，不是我们的错，不能阻碍我们的梦。贫困，这是个可以改变的事实，真心希望有经济困惑的后生们，不要顾虑太多，用你们的青春做资本去追梦吧！ </p><p>by zhangbc<br>2013-01-08</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在考研期间，遇到了几个比我低一届的同学存在的困惑，本想尽早写下这篇日志作为答复，由于考研，所以一直耽搁到了现在，现在想结合自己一路走过来的经历谈谈我个人的一些想法，由于涉及家庭因素，所以只能特殊处理。如果是本人看到的，请原谅我的直述，希望不要介怀。&lt;/p&gt;
&lt;p&gt;一个土生土
      
    
    </summary>
    
      <category term="心路历程" scheme="https://zhangbc.github.io/categories/mental-journey/"/>
    
    
      <category term="心路历程" scheme="https://zhangbc.github.io/tags/mental-journey/"/>
    
  </entry>
  
  <entry>
    <title>【心路历程】面对现实，做好自己（一）</title>
    <link href="https://zhangbc.github.io/2019/04/22/myself_01/"/>
    <id>https://zhangbc.github.io/2019/04/22/myself_01/</id>
    <published>2019-04-22T13:23:38.000Z</published>
    <updated>2019-04-22T13:33:08.677Z</updated>
    
    <content type="html"><![CDATA[<p>毕业这么长时间，没有写下一则像样的日记，没有关注VOA的动态，没有规划学习，每天除了工作，简单不断重复的工作，余下的时间在双手之间悄悄溜走，从不觉得心痛，从不觉得自己有多么厚颜，感觉自己被某一种可怕的东西不断迁就着，不回头，也不想回头，偶尔还有一种可恶的念头：人活着，怎么活都是一辈子，干嘛非得拼命似的生活？勤一生，堕一生，两者之间无非就是别人的闲言碎语而已。当一个像我这样拥有此种邪恶念头的人，大概真的忘记了什么是厚颜无耻了？是的，人活着，这一生究竟为了什么，这是一个大话题，不是凭头论足就能下结论的，需要亲身实践，正所谓“纸上得来终觉浅，绝知此事要躬行”嘛。一介草民，无能把此话题说破抑或道明，但是真的有时候得想想，否则只会让自己越陷越深，越走越迷茫。</p><p>2013年7月踏出生活四年的大学校门，这次有着非凡的意义。母校，一个平时看不起眼的名称，在那一段时间，一些特定的场合，却总是让我的心在隐隐作痛。小学，初中，高中，大学，经历了这么多次，此次感受最深。这次，离开了母校或许就永远没有下一个母校了，离开虽不是生死离别，但却摆脱不了一种欲言又止的忧伤，轻轻而来，却又悄悄而去，何况还要拜别恩师，道别老乡，送别同窗，这一别就再也找到重逢的那一天了。我的确不知道重逢的那一天去哪儿了？</p><p>这一次走出校门，意味着开始肩负起一份独立的使命，独立生活，独立经济，独立承担责任，来自家庭，事业，还有不远的未来。不远的未来，追逐爱情，抚育下一代，赡养父母……这不是归宿，仅仅是预设的开始，不是来与不来的问题，而是一个时间问题，为了这份使命，你准备了些什么呢？面对毕业，面对当下，我有点开始hold不住了，2013年毕业生699万，毕业不是就业，所以为了生计，解决就业难题才是关键，就业不成，何谈使命，连最起码的经济独立都做不到，还有什么资格空谈人生？一日三顿饱，这是最起码的生活保障。说实在的，当时有很多人为我的就业问题着急了，包括我的父母，我的亲属，我的朋友，我的恩师，社会很现实，将才干才多了去，不缺一个有生理缺陷的残疾人，我最终还是以平常之心坦然面对，走过了，也就习惯了，没有遗憾，没有怨言，从多次面试的经历来看，还是自己的所学甚少，残疾的头衔影响不是很大，毕竟社会还是有一定良知的，相信社会是美好的，你的心才会豁然开朗起来。在此处，也奉劝一些即将就业的后生们，人这一生，自信最重要，实力须有社会实践检测，找准方向，不可人云亦云尔。</p><p>毕业后，虽有一些小波折，但是不算太大，最终还是在苏州落定尘埃，高薪谈不上，至少自保了，也算是实现了经济上的基本独立。“上有天堂，下有苏杭”，说实在的，对我一个宅男而言，没有什么特别的感触，苏州的气候的确宜居，其实我所在的是苏州的一个小小的角落，距离苏州城区还有一定的距离。 毕业工作之余，偶尔回头想想自己的最初打算，顿时觉得有些不可思议，几乎没有办法实现，毕业了，如前所述，来自家庭的压力随之剧增，各种想法铺天盖地卷来，真的，有时候觉得无力从心，但又不得不为。对自己失言了，只能姑且一次次原谅而不了了之。一年内搞定助学贷款不是梦，可是预备的考研梦不得不破之，俗话说得好：鱼与熊掌不可兼得。一个人，不能把美事都想尽了，有得必有失，尊重现实，这才是生存的法则。不过不排除大牛们，若觉这是谬言，就权当过眼烟云。</p><p>2013年过去了很久，却又历历在目，经历了一些比较特殊的事情，真正从梦中把我拉回了现实，脚踏实地才是王道。毕业就业，工作是什么？我始终认为工作不应该成为一种累赘，即使一种累赘，无法改变之时，我们不妨换一种态度去坦然面对之。把痛苦变成一种乐趣，聊以自慰也未尝不可。工作的心态直接影响你的生活态度，与其对着宝马哭，还不如对着自行车笑。宝马显示了你的富有与尊贵，但是他也让你失去了锻炼身体的机会，脚踏车虽卑微，但偶尔也足可以让你感受兜风的乐趣。家中建设，让我开始感受做为家庭的一员，应尽家庭之义务，即使你未婚，谁说未婚的你就可以对家事不闻不问？压力再大，该承担的不该承担都应倾其所能地去承担，再说了，一家之事，何来你不担当之理？亲人的离世，或许你会说这有什么可说的，是的，生死离别，人之常事嘛。可是，这一次很不同，我的表弟，英年早逝，白发人送黑发人，你见得多吗？我是第二次经历，第一次发生2006年的夏天，不足周岁的亲妹妹的离世，那年，我没法忘记，估计是忘不了的，什么是残酷，这就是残酷，不是天意，而是现实。去年，接到舅舅的电话，听到噩耗的瞬间，我愕然了。不敢相信但又不得不相信 ，人死不能复生，这一既定的事实，就是所谓的上帝（本人不信佛，勿怪）也难以挽回，而且根本无法挽回。一个23岁的小伙子，说没就没了，怎么敢叫人轻言相信？23岁，我们都在干什么啊？在读书，正值青春，正当规划人生并为之奋斗的黄金时刻，说在此处，我不得不为每年高校的命案感到震惊。懂得珍惜生命，或许是活着的我们对已逝的人的最好的敬意吧。逝者已矣，活着美好，且行且珍惜。</p><p>以此作文，深知不是写作的料，警示自己误入歧途，越陷越深。</p><p>by zhangbc<br>2014-04-15</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;毕业这么长时间，没有写下一则像样的日记，没有关注VOA的动态，没有规划学习，每天除了工作，简单不断重复的工作，余下的时间在双手之间悄悄溜走，从不觉得心痛，从不觉得自己有多么厚颜，感觉自己被某一种可怕的东西不断迁就着，不回头，也不想回头，偶尔还有一种可恶的念头：人活着，怎么活
      
    
    </summary>
    
      <category term="心路历程" scheme="https://zhangbc.github.io/categories/mental-journey/"/>
    
    
      <category term="心路历程" scheme="https://zhangbc.github.io/tags/mental-journey/"/>
    
  </entry>
  
  <entry>
    <title>【数据库实践】T-SQL语言及其存储过程</title>
    <link href="https://zhangbc.github.io/2019/04/22/db_tsql_procedure/"/>
    <id>https://zhangbc.github.io/2019/04/22/db_tsql_procedure/</id>
    <published>2019-04-22T00:35:17.000Z</published>
    <updated>2019-04-22T11:37:46.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。</p><blockquote><p>课本第11～13章主要知识点</p></blockquote></blockquote><h2 id="一，T-SQL语言"><a href="#一，T-SQL语言" class="headerlink" title="一，T-SQL语言"></a>一，T-SQL语言</h2><p><code>T-SQL</code>语言是<code>Microsoft</code>公司在关系型数据库管理系统<code>SQL Server</code>中的<code>SQL-3</code>标准的实现，是<code>Microsoft</code>公司对结构化查询语言(<code>SQL</code>)的扩展。<code>T-SQL</code>语言是一种交互式的语言，具有功能强大，容易理解和掌握等特点。</p><p>1，<strong>数据定义语言(<code>DDL</code>)</strong>：<code>DDL</code>是指用于定义和管理数据库及数据库中各种对象的语句，包括<code>create</code>，<code>alter</code>，<code>drop</code>等。</p><ul><li><p>创建表的语句格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure></li><li><p>增加列的语句格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 列的描述</span><br></pre></td></tr></table></figure></li><li><p>删除列的语句格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名</span><br></pre></td></tr></table></figure></li><li><p>修改列定义为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">alter</span> <span class="keyword">column</span> 列名 列的描述</span><br></pre></td></tr></table></figure></li><li><p>删除表的语句格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure></li></ul><p>2，<strong>数据操纵语言(<code>DML</code>)</strong>：<code>DML</code>是指用于查询，添加，修改和删除数据库中数据的语句，包括<code>select</code>，<code>insert</code>，<code>update</code>，<code>delete</code>等。</p><p>3，<strong>数据控制语言(<code>DCL</code>)</strong>：<code>DCL</code>是指用于设置或更改数据库用户或者角色权限的语句，包括<code>grant</code>，<code>revoke</code>，<code>deny</code>等。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给所有用户授予select权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> student <span class="keyword">to</span> <span class="keyword">public</span></span><br><span class="line"><span class="keyword">go</span> </span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 给指定用户授予特定权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span> <span class="keyword">on</span> student <span class="keyword">to</span> LiMing,ZhangBin</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 联级授权</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span> <span class="keyword">on</span> student <span class="keyword">to</span> <span class="keyword">user</span> <span class="keyword">with</span> [<span class="keyword">admin</span>] <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">from</span> ZhangWei;</span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span> <span class="keyword">on</span> sc <span class="keyword">from</span> <span class="keyword">User</span>;</span><br><span class="line">deny <span class="keyword">select</span>, <span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span> <span class="keyword">on</span> student <span class="keyword">to</span> LiMing,ZhangBin;</span><br></pre></td></tr></table></figure><p>4，<strong>其他语言元素(<code>ALE</code>)</strong></p><p>1）<strong><code>注释</code></strong>：程序代码中不执行的文本字符串（也称<code>注解</code>），有：<code>--</code>和<code>/* */</code>。</p><p>2）<strong>变量(<code>@</code>)</strong>：局部变量（<code>@</code>），全局变量（<code>@@</code>）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">row</span> <span class="built_in">int</span> </span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">row</span>=(<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> student)</span><br></pre></td></tr></table></figure><p>3）<strong>运算符</strong></p><blockquote><ul><li>算术运算符：<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code>；</li><li>赋值运算符：<code>=</code>；</li><li>位运算符：<code>&amp;</code>，<code>|</code>，<code>^</code>；</li><li>比较运算符：也称关系运算符，用于比较两个表达式的大小或者是否相同，其比较结果是布尔值<code>TRUE</code>，<code>FALSE</code>，<code>UNKNOWN</code>；</li><li>逻辑运算符：<code>and</code>，<code>or</code>，<code>not</code>。优先级别：<code>not</code> &gt; <code>and</code> &gt; <code>or</code>；</li><li>字符串串联运算符：允许通过加号(<code>+</code>)进行字符串串联，这个加号称为<code>字符串串联运算符</code>。</li></ul></blockquote><p>4）<strong>函数</strong></p><p>在<code>T-SQL</code>语言中，<code>函数</code>用于执行一些特殊的运算以支持<code>SQL Server</code>的标准命令。</p><ul><li><p><code>行集函数</code>：在<code>T-SQL</code>语句中当成表引用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> openquery(<span class="keyword">local</span>, <span class="string">'select * from student;'</span>) ta;</span><br></pre></td></tr></table></figure></li><li><p><code>聚合函数</code>：用于对一组值进行计算并返回一个单一的值。除<code>count</code>之外，聚合函数忽略空值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(score) <span class="keyword">as</span> avg_score,<span class="keyword">sum</span>(score) <span class="keyword">as</span> total_score <span class="keyword">from</span> sc;</span><br></pre></td></tr></table></figure></li><li><p><code>Ranking函数</code>：为查询结果数据集分区中的每行返回一个序列值。有：<code>rank</code>，<code>dense_rank</code>，<code>ntile</code>，<code>row_number</code>。</p></li><li><p><code>标量函数</code>：用于对传递给它的一个或多个参数值进行处理和计算，并返回一个单一的值。</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">标量函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">配置函数</td><td style="text-align:left">返回当前的配置信息</td></tr><tr><td style="text-align:left">游标函数</td><td style="text-align:left">返回有关游标的信息</td></tr><tr><td style="text-align:left">日期和时间函数</td><td style="text-align:left">对日期和时间输入值进行处理</td></tr><tr><td style="text-align:left">数学函数</td><td style="text-align:left">对作为函数参数提供的输入值执行计算</td></tr><tr><td style="text-align:left">元数据函数</td><td style="text-align:left">返回有关数据库和数据库对象的信息</td></tr><tr><td style="text-align:left">安全函数</td><td style="text-align:left">返回有关用户和角色的信息</td></tr><tr><td style="text-align:left">字符串函数</td><td style="text-align:left">对字符串(char或者varchar)输入值执行操作</td></tr><tr><td style="text-align:left">系统函数</td><td style="text-align:left">执行操作并返回有关SQL Server中的值、对象和设置的信息</td></tr><tr><td style="text-align:left">系统统计函数</td><td style="text-align:left">返回系统的统计信息</td></tr><tr><td style="text-align:left">文本和图像函数</td><td style="text-align:left">对文本或者图像输入值或者列执行操作，返回有关这些值的信息</td></tr></tbody></table></div><p>5）<strong>流程控制语句</strong></p><ul><li><p><code>if-else</code>语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(score) <span class="keyword">from</span> sc;</span><br><span class="line">if (<span class="keyword">select</span> <span class="keyword">avg</span>(score) <span class="keyword">from</span> sc) &lt; <span class="number">60</span></span><br><span class="line">print <span class="string">'很抱歉，你没有通过考试！'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">print <span class="string">'祝贺你，考试通过了！'</span></span><br></pre></td></tr></table></figure></li><li><p><code>begin-end</code>语句：能够将多个<code>T-SQL</code>语句组合成一个语句块，并将它们视为一个单元处理。</p></li><li><p><code>go</code>语句：批的结束语句。<code>批</code>是一起提交并作为一个组执行的若干<code>T-SQL</code>语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @msg <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">set</span> @msg=<span class="string">'Hello world!'</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure></li><li><p><code>case</code>语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">select</span> <span class="string">'score'</span> = </span><br><span class="line"><span class="keyword">case</span></span><br><span class="line">   <span class="keyword">when</span> score <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'没有成绩'</span></span><br><span class="line">   <span class="keyword">when</span> score &lt; <span class="number">60</span> <span class="keyword">then</span> <span class="string">'不及格'</span></span><br><span class="line">   <span class="keyword">when</span> score &lt; <span class="number">85</span> <span class="keyword">and</span> score &gt;= <span class="number">60</span> <span class="keyword">then</span> <span class="string">'良好'</span></span><br><span class="line">   <span class="keyword">else</span> <span class="string">'优秀'</span> </span><br><span class="line"><span class="keyword">end</span>, </span><br><span class="line">  <span class="keyword">cast</span>(sno <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">20</span>)) <span class="keyword">as</span> sno </span><br><span class="line"><span class="keyword">from</span> sc <span class="keyword">where</span> cno = <span class="string">'C03'</span> <span class="keyword">order</span> <span class="keyword">by</span> score;</span><br></pre></td></tr></table></figure></li><li><p><code>while-continue-break</code>语句</p></li><li><p><code>goto</code>语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">goto label</span><br><span class="line">...</span><br><span class="line">label:</span><br></pre></td></tr></table></figure></li><li><p><code>waitfor</code>语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">waitfor [delay 'time'|time 'time']</span><br></pre></td></tr></table></figure></li><li><p><code>return</code>语句</p></li></ul><h2 id="二，存储过程"><a href="#二，存储过程" class="headerlink" title="二，存储过程"></a>二，存储过程</h2><p>1，<strong><code>存储过程</code>定义</strong>：几乎包含了所有的<code>T-SQL</code>语句，是为了完成特定功能而汇集在一起的一组<code>SQL</code>程序语句，经编译后存储在数据库中。</p><p>2，<strong>存储过程的调用方法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec proc 存储过程名</span><br><span class="line">exec proc 存储过程名  参数值[,参数值...]</span><br></pre></td></tr></table></figure><p>3，<strong>存储过程分类</strong></p><blockquote><p>i）系统存储过程（前缀为<code>SP_</code>）；<br>ii）扩展存储过程（前缀为<code>XP_</code>）；<br>iii）用户自定义存储过程。</p></blockquote><p>4，<strong>存储过程的创建和执行</strong></p><ul><li><p>创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> dbo.pro_sc_insert</span><br><span class="line">@sno <span class="built_in">char</span>(<span class="number">10</span>),@cno <span class="built_in">char</span>(<span class="number">2</span>),@score <span class="built_in">real</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sc(sno, cno, score) <span class="keyword">values</span>(@sno, @cno, @score)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure></li><li><p>执行存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec pro_sc_insert '2010009', 'C1', 88</span><br></pre></td></tr></table></figure></li></ul><p>5，<strong>存储过程中的游标</strong></p><p>1）<code>游标</code>的定义：可以把游标看成一种数据类型，用于遍历结果集，相当于指针，或是数组中的下标，分为<code>局部游标(local)</code>和<code>全局游标(global)</code>。</p><p>2）游标的使用方法</p><ul><li><p>创建游标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 默认为global；</span></span><br><span class="line"><span class="comment">-- forward_only(默认值)：游标只能前进的，只能从头到尾提取记录；</span></span><br><span class="line"><span class="comment">-- scoll：可以在行间来回跳转。</span></span><br><span class="line"><span class="keyword">declare</span> 游标名 <span class="keyword">cursor</span> [<span class="keyword">local</span>|<span class="keyword">global</span>] [forward_only|scoll]</span><br><span class="line"><span class="keyword">for</span> </span><br><span class="line"><span class="keyword">select</span> 查询语句</span><br></pre></td></tr></table></figure></li><li><p>使用游标：增加了服务器的负担，使用游标的效果远没有使用默认结果集的效率高，因此，能不用游标尽量不要用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> cur_select_name <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> sname <span class="keyword">from</span> student;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">open</span> cur_select_name</span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> cur_select_name <span class="keyword">into</span> @<span class="keyword">name</span></span><br><span class="line"><span class="comment">-- fetch_status取值：0正常执行；-1超出了结果集；-2所指向的行已不存在。</span></span><br><span class="line">  <span class="keyword">while</span>(@@fetch_status = <span class="number">0</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">print <span class="string">'姓名：'</span> + @<span class="keyword">name</span></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> cur_select_name <span class="keyword">into</span> @<span class="keyword">name</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">close</span> cur_select_name</span><br><span class="line"><span class="keyword">deallocate</span> cur_select_name</span><br></pre></td></tr></table></figure></li></ul><p>6，<strong>自动执行的存储过程</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">master</span></span><br><span class="line">exec sp_procoption <span class="string">'存储过程名'</span>, <span class="string">'startup'</span>, <span class="string">'on'</span></span><br></pre></td></tr></table></figure><p>7，<strong>存储过程的查看，修改和删除</strong></p><p>1）查看存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示存储过程的参数及其数据类型</span></span><br><span class="line">sp_help[[@name=]name]</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 显示存储过程的源代码</span></span><br><span class="line">sp_helptext[[@objname=]name]</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 显示和存储过程相关的数据库对象</span></span><br><span class="line">sp_depends[@objname=]'object'</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 返回当前数据库中的存储过程列表</span></span><br><span class="line">sp_stored_procedures[[@sp_name=]'name']</span><br><span class="line">[,[@sp_owner=]'owner']</span><br><span class="line">[,[@sp_qualifier=]'sp_qualifier']</span><br></pre></td></tr></table></figure><p>2）修改存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">procedure</span> stu_info</span><br><span class="line"><span class="keyword">with</span> encryption</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">  <span class="keyword">select</span> sno, age <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>3）删除存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> &#123;<span class="keyword">procedure</span>&#125;[, ...n]</span><br></pre></td></tr></table></figure><p>8，<strong><code>扩展存储过程</code></strong>：<code>SQL Server</code> 动态装载并执行的动态链接库（<code>DDL</code>），只能添加到<code>master</code>数据库中。</p><h2 id="三，触发器及其应用"><a href="#三，触发器及其应用" class="headerlink" title="三，触发器及其应用"></a>三，触发器及其应用</h2><p>1，<strong>触发器的概念和工作原理</strong></p><p>1）<strong><code>触发器</code>的概念</strong>：<code>触发器</code>是一种特殊类型的存储过程，在执行语言事件时自动生效。其<code>特殊性</code>表现：它是在执行某些<code>T-SQL</code>语句时自动生效的。</p><p>2）<strong><code>DML</code>触发器</strong>：在数据库中发生<code>DML</code>事件时启动。将触发器和触发它的语句作为可在触发器内回滚的单个事务对待，如果检测到错误，则整个事务即自动回滚。</p><p>3）<strong><code>DDL</code>触发器</strong>：是<code>SQL Server 2005</code>的新功能，当服务器或者数据库中发生<code>DDL</code>事件时将调用这些触发器。</p><p>2，<strong>创建触发器</strong></p><p>1）<code>DML</code>触发器<strong>主要优点</strong></p><blockquote><p>i）<code>DML</code>触发器可通过数据库中相关表实现联级更改；<br>ii）<code>DML</code>触发器可以防止恶意或者错误的<code>INSERT</code>，<code>UPDATE</code>及<code>DELETE</code>操作，并强制执行比<code>CHECK</code>约束定义的限制更为复杂的其他限制；<br>iii）<code>DML</code>触发器可以评估数据修改前后表的状态，并根据该差异采取措施。</p></blockquote><p>2）<code>insert</code>型<code>DML</code>触发器：通常用于更新时间标记字段，或者验证被触发器监控的字段中数据满足要求的标准，以确保数据的完整性。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 检测sc表添加数据的合法性，即添加的数据与student表的数据不匹配时，将删除此数据. */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_sc_ins <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">insert</span> </span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> @sno <span class="built_in">char</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">select</span> @sno=inserted.sno <span class="keyword">from</span> inserted </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> sno <span class="keyword">from</span> student <span class="keyword">where</span> student.sno=@sno)</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">from</span> sc <span class="keyword">where</span> sno=@sno</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>3）<code>update</code>型<code>DML</code>触发器：当在一个有<code>update</code>触发器的表中修改记录时，表中原来的记录被移动到删除表中，修改过的记录插入到了插入表中，触发器可以参考删除表和插入表及被修改的表，以确定如何完成数据库操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 防止用户修改SC表的成绩 */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_sc_update <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">update</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">update</span>(scorce)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    raiserror(<span class="string">'不能修改成绩！'</span>, <span class="number">16</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">rollback</span> <span class="keyword">transaction</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>4）<code>delete</code>型<code>DML</code>触发器</p><blockquote><ul><li>为了防止确实需要删除但会引起数据一致性问题的记录的删除；</li><li>执行可删除主记录的子记录的级联删除操作。</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 当删除student表中的记录时，自动删除sc表对应学号的记录. */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_del_sc </span><br><span class="line"><span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">delete</span> @sno <span class="built_in">char</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">select</span> @sno=deleted.sno <span class="keyword">from</span> deleted</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> sc <span class="keyword">where</span> sno=@sno</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>5）<strong><code>DDL</code>触发器</strong></p><ul><li><code>DDL</code>触发器目的：<blockquote><p>i）防止对数据库架构进行某些更改；<br>ii）希望数据库中发生某种情况以响应数据库架构中的更改；<br>iii）要记录数据库架构中的更改或者事件。</p></blockquote></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 防止数据库中的任意表被修改或者删除. */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_safety</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">database</span></span><br><span class="line"><span class="keyword">for</span> drop_table, alter_table</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">print <span class="string">'You must disable trigger "tri_safety" to drop or alter tables!'</span></span><br><span class="line"><span class="keyword">rollback</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 防止在数据库中创建表 */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_ban_create</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">database</span></span><br><span class="line"><span class="keyword">for</span> create_table</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">print <span class="string">'create table issued.'</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">eventdata</span>().value(<span class="string">'(/event_instance/TSQLCommand/CommandText)[1]'</span>, <span class="string">'nvarchar(max)'</span>)</span><br><span class="line">raiserror(<span class="string">'New tables cannot be created in this database.'</span>, <span class="number">16</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">rollback</span></span><br></pre></td></tr></table></figure><p>3，<strong>查看，修改和删除触发器</strong></p><p>1）查看触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 查看触发器的一般信息，如触发器的名称，属性，类型和创建时间 */</span></span><br><span class="line">sp_help 'trigger_name'</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看触发器的正文信息 */</span></span><br><span class="line">sp_helptext 'trigger_name'</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看指定触发器所引用的表或者指定的表涉及的所有触发器 */</span></span><br><span class="line">sp_depends 'trigger_name'</span><br><span class="line">sp_depends 'table_name'</span><br></pre></td></tr></table></figure><p>2）修改触发器<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_rename oldname, newname</span><br></pre></td></tr></table></figure></p><p>3）删除触发器<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> &#123;<span class="keyword">trigger</span>&#125;[, ...n]</span><br></pre></td></tr></table></figure></p><p>4，<strong>触发器的用途</strong></p><blockquote><p>1）可以实现比约束更为复杂的数据约束；<br>2）可以检查SQL所做的操作是否被允许；<br>3）当一个SQL语句对数据表进行操作时，触发器可以根据该SQL语句的操作情况对另一个数据表进行操作；<br>4）约束的本身是不能调用存储过程的，但是触发器可以调用一个或者多个存储过程；<br>5）在执行完SQL语句之后，触发器可以判断更改过的记录是否达到一定条件，如果达到，触发器可以自动调用SQL Mail来发邮件；<br>6）约束不能返回信息，而触发器可以返回信息；<br>7）可以修改原本要操作的SQL语句；<br>8）为了保护已经建好的数据表，触发器可以在接收到以drop和alter开头的SQL语句中，不进行对数据表的操作。</p></blockquote><h2 id="四，嵌入式SQL"><a href="#四，嵌入式SQL" class="headerlink" title="四，嵌入式SQL"></a>四，嵌入式SQL</h2><p>1，<strong>嵌入式<code>SQL</code>简介</strong></p><p>1）<code>嵌入式SQL</code>定义：<code>嵌入式SQL</code>是一种将<code>SQL</code>语句直接写入<code>C</code>语言，<code>COLBOL</code>，<code>FORTRAN</code>，<code>Ada</code>等编程语言的源代码中的方法。将<code>SQL</code>语句嵌入的目标源码的语言称为<code>宿主语言</code>。</p><p>2，<strong>嵌入式<code>SQL</code>的工作原理</strong></p><blockquote><p>提供对于嵌入式SQL的支持，需要数据库厂商除了提供DBMS之外，还必须提供一些工具。为了实现对于嵌入式SQL的支持，技术上必须解决以下4个问题:</p><blockquote><p>1.宿主语言的编译器不可能识别和接受SQL文，需要解决如何将SQL的宿主语言源代码编译成可执行码;<br>2.宿主语言的应用程序如何与DBMS之间传递数据和消息;<br>3.如何把对数据的查询结果逐次赋值给宿主语言程序中的变量以供其处理;<br>4.数据库的数据类型与宿主语言的数据类型有时不完全对应或等价，如何解决必要的数据类型转换问题。<br>嵌入式SQL源码的处理流程 为了解决上述这些问题，数据库厂商需要提供一个嵌入式SQL的预编译器，把包含有嵌入式SQL文的宿主语言源码转换成纯宿主语言的代码。这样一来，源码即可使用宿主语言对应的编译器进行编译。通常情况下，经过嵌入式SQL的预编译之后，原有的嵌入式SQL会被转换成一系列函数调用。因此，数据库厂商还需要提供一系列函数库，以确保链接器能够把代码中的函数调用与对应的实现链接起来。</p></blockquote></blockquote><p>3，<strong>嵌入式<code>SQL</code>的一般形式</strong></p><blockquote><ul><li>预编译</li><li>修改和扩充主语言使之能处理<code>SQL</code>语句</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;课本第11～13章主要知识点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，T-SQL语言&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="数据库技术" scheme="https://zhangbc.github.io/categories/database/"/>
    
    
      <category term="数据库实践" scheme="https://zhangbc.github.io/tags/db-practice/"/>
    
  </entry>
  
  <entry>
    <title>【数据库实践】 数据表及其SQL基本操作</title>
    <link href="https://zhangbc.github.io/2019/04/21/db_table_sql/"/>
    <id>https://zhangbc.github.io/2019/04/21/db_table_sql/</id>
    <published>2019-04-21T12:05:44.000Z</published>
    <updated>2019-04-21T12:36:46.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。</p><blockquote><p>课本第09～10章主要知识点</p></blockquote></blockquote><h2 id="一，表的概述"><a href="#一，表的概述" class="headerlink" title="一，表的概述"></a>一，表的概述</h2><p>1，<strong><code>表</code>的定义</strong>：表是包含 <code>SQL Server 2005</code>数据库中的所有数据的对象。表定义是一个列集合。</p><p>2，<strong><code>表</code>的类型</strong></p><blockquote><p>1）<code>分区表</code>：将数据水平划分为多个单元的表，这些单元可以分布到数据库中的多个文件组中。<br>2）<code>系统表</code>：存储服务器配置及其所有表的数据。<br>3）<code>用户表</code>：用户自己创建的数据表和表示示例数据表，用于存储用户的信息，用户可以随意更改。<br>4）<code>临时表</code>：分为<code>本地临时表</code>和<code>全局临时表</code>，存储在<code>tempdb</code>中，当不再使用临时表时会自动将其删除。</p></blockquote><h2 id="二，创建表"><a href="#二，创建表" class="headerlink" title="二，创建表"></a>二，创建表</h2><p>1，<strong>表列的数据类型</strong></p><p>1）精确数字型</p><ul><li>整数类型（<code>bigint</code>，<code>int</code>，<code>smallint</code>，<code>tinyint</code>）</li></ul><blockquote><ul><li><code>bigint</code>：存储范围为 $-2^{63}$~$2^{63}-1$；占用8个字节。</li><li><code>int</code>：存储范围为 $-2^{31}$~$2^{31}-1$；占用4个字节。</li><li><code>smallint</code>：存储范围为 $-2^{15}$~$2^{15}-1$；占用2个字节。</li><li><code>tinyint</code>：存储范围为 0~255；占用1个字节。</li></ul></blockquote><ul><li>位数据类型（<code>bit</code>）</li></ul><blockquote><ul><li><code>bit</code>：存储范围是0和1，占用1个字节。常作为逻辑变量使用，用于表示真、假或者是、否等二值选择。</li></ul></blockquote><ul><li>数值类型（<code>decimal</code>，<code>numeric</code>）</li></ul><blockquote><ul><li><code>decimal</code>：和<code>numeric</code>一样，可以用2～17个字节来存储$-10^{38}+1$到$10^{38}-1$之间但是固定精度和小数位数位的数字。表示形式<code>decimal(p,s)</code>，其中<code>p</code>确定精确的总位数，默认为18位；<code>s</code>确定小数位数，默认为0。</li></ul></blockquote><ul><li>货币类型（<code>money</code>，<code>smallmoney</code>）：必须在有效位置前加一个货币单位符号。</li></ul><blockquote><ul><li><code>money</code>：用于存储货币值，数值分为一个正数和一个小数分别存储在两个4字节的整型值中，存储范围为$-2^{63}$~$2^{63}-1$，精确到货币单位的千分之一。</li><li><code>smallmoney</code>：与<code>money</code>数据类型相似，但是存储范为$-2^{31}$~$2^{31}-1$。</li></ul></blockquote><p>2）近似数据类型：<code>real</code>，<code>float</code>。</p><blockquote><ul><li><code>real</code>：存储十进制数值，最大可以为7位精确位数。存储范围为$-3.40 \times 10^{-38}$ ~ $3.40 \times 10^{38}$，占用4个字节。</li><li><code>float</code>：可以精确到15位小数。存储范围为$-1.79 \times 10^{-308}$ ~ $1.79 \times 10^{308}$，占用8个字节。<code>float(n)</code>：<code>n</code>指定<code>float</code>数据的精度，<code>n</code>为1～15的整数值。当<code>n</code>为1～7时，实际上是定义了一个<code>real</code>类型的数据，占用4个字节；当<code>n</code>为8～15时，系统认为其是<code>float</code>类型，占用8个字节。</li></ul></blockquote><p>3）日期和时间数据类型：<code>datetime</code>和<code>smalldatetime</code>。</p><blockquote><ul><li><code>datetime</code>：存储日期和时间的结合体，存储从1753年1月1日0时到9999年12月31日23时59分59秒，其精确度可以达到三百分之一秒，即3.33ms。占用8个字节，日期和时间分别占用4个字节。默认格式为 <code>MM DD YYYY hh:mm A.M./P.M.</code>。</li><li><code>smalldatetime</code>：与<code>datetime</code>类型相似，但是存储范围为1900年1月1日至2079年6月6日。占用4个字节，时间和日期分别占用2个字节，精确度为1min。</li></ul></blockquote><p>4）字符数据类型：<code>char</code>，<code>varchar</code>，<code>text</code>。</p><blockquote><ul><li><code>char</code>：定义形式为<code>char(n)</code>，<code>n</code>表示所有字符占用的存储空间，其取值为1～8000，默认值为1。如果输入数据的字符串长度小于<code>n</code>，则系统自动在其后面添加空格来填充；如果输入的数据过长，将会截掉其超出部分。如果定义一个<code>char</code>数据类型，且允许该列为空，则该字段被当成<code>varchar</code>来处理。</li><li><code>varchar</code>：定义形式为<code>varchar(n)</code>，可存储长达8000个字符的客人变长度字符串。其存储空间是根据存储在表的每列值的字符数变化的。</li><li><code>text</code>：用于存储文本数据，其容量理论上为 1~$2^{31}-1$，实际应用根据硬盘的存储空间而定。</li></ul></blockquote><p>5）<code>unicode</code>字符数据类型：<code>nchar</code>，<code>nvarchar</code>，<code>ntext</code>。</p><blockquote><ul><li><code>nchar</code>：定义形式为<code>nchar(n)</code>，<code>n</code>的取值为1～4000。与<code>char</code>类似，但采用<code>unicode</code>标准字符集，<code>unicode</code>标准用2个字节为1个存储单位。</li><li><code>nvarchar</code>：定义形式为<code>nvarchar(n)</code>，<code>n</code>的取值为1～4000。与<code>varchar</code>类似，但采用<code>unicode</code>标准字符集。</li><li><code>ntext</code>：理论上容量为$2^{30}-1$，与<code>text</code>类似，但采用<code>unicode</code>标准字符集。</li></ul></blockquote><p>6）二进制数据类型：<code>binary</code>，<code>varbinary</code>，<code>image</code>。</p><blockquote><ul><li><code>binary</code>：定义形式为<code>binary(n)</code>，数据存储长度是固定的，即n+4个字节。当输入的二进制数据长度小于n时，余下部分填充0。二进制数据类型的最大长度为8000，常用于存储图像等数据。</li><li><code>varbinary</code>：定义形式为<code>varbinary(n)</code>，数据存储长度是变化的，为实际输入数据的长度加上4个字节，其他类似<code>binary</code>。</li><li><code>image</code>：用于存储图像数据，其理论容量为$2^{31}-1$个字节。</li></ul></blockquote><p>7）其他数据类型：<code>sql_variant</code>，<code>table</code>，<code>timestamp</code>，<code>uniqueidentifier</code>，<code>xml</code>，<code>cursor</code>等。</p><blockquote><ul><li><code>sql_variant</code>：用于存储除文本、图形数据和<code>timestamp</code>类型数据外的其他任何合法的<code>SQL Server 2005</code>数据。</li><li><code>table</code>：用于存储对表或者视图处理后的结果集。</li><li><code>timestamp</code>：时间戳数据类型，提供数据库范围内的唯一值。</li><li><code>uniqueidentifier</code>：用于存储一个16字节长的二进制数据类型，是<code>SQL Server 2005</code>根据计算机网络适配器地址和<code>CPU</code>时钟产生的全局唯一标识符代码（<code>GUID</code>），通过调用 <code>SQL Server 2005</code> 的<code>NEWID()</code>函数获取。</li><li><code>xml</code>：存储<code>xml</code>类型的数据，其数据容量不能超过2GB。</li><li><code>cursor</code>：是变量或者存储过程<code>OUTPUT</code>参数的一种数据类型，这些参数包含对游标的引用。</li></ul></blockquote><p>8）用户自定义数据类型</p><ul><li>语法格式如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_addtype [@typename=]type, [@phystype=]system_data_type[, [@nulltype=]'null_type'][, [@owner=]'owner_name']</span><br></pre></td></tr></table></figure><ul><li>举例：自定义一个地址(<code>address</code>)数据类型。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sp_addtype address, 'varchar(80)', 'not null'</span><br></pre></td></tr></table></figure><p>2，<strong>列的其他属性</strong></p><p>1）<code>NULL</code>，<code>NOT NULL</code>和默认值<br>在数据库中，<code>NULL</code>是一个特殊值，表示未知值的概念。默认值是指如果插入行时没有为列指定值，默认值则指定列中使用的值。</p><p>2）<code>IDENTITY</code>属性：实现标识符列。</p><blockquote><ul><li>一个表只能有一个使用<code>IDENTITY</code>属性定义的列，且必须通过使用<code>bigint</code>，<code>int</code>，<code>smallint</code>，<code>tinyint</code>或者<code>decimal</code>，<code>numeric</code>数据类型类定义该列；</li><li>可指定种子和增量，两者的默认值均为1；</li><li>标识符列不允许为空值，也不能包含<code>default</code>定义或者对象；</li><li>在设置<code>IDENTITY</code>属性后，可以使用<code>$IDENTITY</code>关键字在选择列表中引用该列，也可以通过名称引用该列；</li><li><code>objectproperty</code>函数可以用于确定一个表是否具有<code>IDENTITY</code>列，<code>columnproperty</code>函数可以确定<code>IDENTITY</code>列的名称；</li><li>通过使值能显示插入，<code>set identity_insert</code>可以用于禁用该列的<code>IDENTITY</code>属性。</li></ul></blockquote><p>3，<strong>表的创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student</span><br><span class="line">(</span><br><span class="line">studentID <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</span><br><span class="line">studentName <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">class</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">depart <span class="built_in">char</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">yearClass <span class="built_in">char</span>(<span class="number">6</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="三，维护表"><a href="#三，维护表" class="headerlink" title="三，维护表"></a>三，维护表</h2><p>1，<strong>修改表名与表结构</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表名，将studentcourse修改为course</span></span><br><span class="line">exec sp_rename 'studentcourse', 'course';</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 修改表结构</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> sex <span class="built_in">char</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> <span class="keyword">column</span> yearClass;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">alter</span> <span class="keyword">column</span> studentName <span class="built_in">char</span>(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>2，<strong>删除表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> course;</span><br></pre></td></tr></table></figure><p>3，<strong>表数据的维护</strong></p><p>1）添加数据（<code>insert</code>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="string">'10015'</span>, <span class="string">'计算机网络'</span>, <span class="string">'张三'</span>, <span class="number">2</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>2）更新表数据（<code>update</code>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> cname=<span class="string">'计算机组成原理'</span> <span class="keyword">where</span> cno=<span class="string">'10015'</span>;</span><br></pre></td></tr></table></figure><p>3）删除表数据（<code>delete</code>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> sno=<span class="number">200901020023</span>;</span><br></pre></td></tr></table></figure><h2 id="四，表数据完整性"><a href="#四，表数据完整性" class="headerlink" title="四，表数据完整性"></a>四，表数据完整性</h2><p>1，<strong><code>SQL Server</code>提供的数据类型完整性组件</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">完整性类型</th><th style="text-align:left">组件</th></tr></thead><tbody><tr><td style="text-align:left">实体完整性</td><td style="text-align:left">索引，unique约束，primary key约束和identity属性</td></tr><tr><td style="text-align:left">域完整性</td><td style="text-align:left">foreign key约束，check约束，default定义，not null定义和规则</td></tr><tr><td style="text-align:left">参照完整性</td><td style="text-align:left">foreign key约束，check约束和触发器</td></tr><tr><td style="text-align:left">用户定义完整性</td><td style="text-align:left">create table中的所有列级和表级约束，存储过程和触发器</td></tr></tbody></table></div><p>2，<strong><code>primary key</code>约束</strong></p><p>表通常具有一列或者一组列可以用于唯一标识表中的一行，这样的一列或者多列称为表的<code>主键</code>（<code>PK</code>），用于强制表的实体完整性。</p><p>3，<strong><code>foreign key</code>约束</strong></p><p><code>外键</code>是用于建立和加强两个表数据之间的链接的一列或者多列，用于强制参照完整性。</p><blockquote><ul><li>一个表 中最多可以有253个参照表，因此每个表最多可以有253个<code>foreign key</code>约束；</li><li>在<code>foreign key</code>约束中，只能参照同一个数据库中的表；</li><li><code>foreign key</code>子句中的列数目和每个列指定的数据类型必须和<code>reference</code>子句中的相同；</li><li><code>foreign key</code>约束不能自动创建索引；</li><li>参照同一个表中的列时，必须只使用<code>reference</code>子句，而不能使用<code>foreign key</code>子句；</li><li>在临时表中，不能使用<code>foreign key</code>约束。</li></ul></blockquote><p>4，<strong><code>check</code>约束</strong>：通过限制列可接受的值，<code>check</code>约束可以强制域的完整性。</p><p>5，<strong>表关系</strong>：显示某个表中的列如何链接到另一个表的列；可以防止出现冗余数据。</p><h2 id="五，视图"><a href="#五，视图" class="headerlink" title="五，视图"></a>五，视图</h2><p>1，<strong>视图概述</strong></p><p>1）<code>视图</code>是一个虚拟表，是由若干个表或者视图中导出的表，其结构和数据是建立在对表的查询基础上的，其内容由查询定义。</p><p>2）视图的<strong>主要优点</strong>和<strong>作用</strong>：</p><blockquote><p>i）着重于特定数据：视图使用户能够着重于他们所感兴趣的特定数据和所负责的特定任务，不必要的数据或者敏感数据可以不出现在视图中；<br>ii）简化数据操作：视图可以简化用户处理数据的方式；<br>iii）提供向后兼容性：视图能够在表的架构更改时为表创建向后兼容接口；<br>iv）自定义数据：视图允许用户以不同方式查看数据，即使在他们同时使用相同的数据时也是如此；<br>v）导出和导入数据：可使用视图将数据导出到其他应用程序；<br>vi）跨服务器组合分区数据：使用分区视图，可以使用多个服务器对数据进行分区。</p></blockquote><p>3）视图<strong>分类</strong>：</p><blockquote><p>i）标准视图：组合了一个或者多个表中的数据，可以获得使用视图的大多数好处，包括将重点放在特定数据上及简化数据操作。<br>ii）索引视图：被具体化了的视图，即它已经经过计算并存储，可以为视图创建唯一的聚集索引。<br>iii）分区视图：在一台或者多台服务器间水平连接一组成员表的分区数据。</p></blockquote><p>2，<strong>创建视图</strong></p><p>1）创建视图<strong>原则</strong></p><blockquote><p>i) 只能在当前数据库中创建视图；<br>ii) 视图名称必须遵循标志符的规则，且对每个用户必须唯一；<br>iii) 可以在其他视图和引用视图的过程之上创建视图；<br>iv) 定义视图的查询不能包括<code>order by</code>，<code>compute</code>，<code>compute by</code>子句或者<code>into</code>关键字；<br>v) 不能在视图上定义全文索引定义；<br>vi) 不能创建临时视图，也不能在临时表上创建视图；<br>vii) 不能对视图执行全文查询，但是如果查询所引用的表被配置为支持全文索引，就可以在视图定义中包含全文查询。</p></blockquote><ul><li>举例：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_teacher_choice <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> b.tname, a.chsu <span class="keyword">from</span> course a, teacher b <span class="keyword">where</span> a.tid=b.tid;</span><br></pre></td></tr></table></figure><p>3，<strong>使用视图</strong></p><p>1）使用视图进行数据检索</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> view_teacher_choice;</span><br></pre></td></tr></table></figure><p>2）通过视图修改数据</p><blockquote><ul><li>如果在视图定义中使用了<code>with check option</code>子句，则所有在视图上执行的数据修改语句都必须符合定义视图的<code>select</code>语句中所设定的条件。</li><li><code>SQL Server</code> 必须能够明确地解析对视图所引用基表中的特定行所做的修改操作。</li><li>对基表中须更新而又不允许空值的所有列，其值在<code>insert</code>语句或者<code>default</code>定义中指定。</li><li>如果在视图删除数据，在视图定义的<code>from</code>子句中只能列出一个表。</li><li>视图修图数据通过<code>insert</code>，<code>update</code>，<code>delete</code>语句来完成。</li></ul></blockquote><p>4，<strong>修改视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> view_teacher_choice <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> b.tname, a.chsu <span class="keyword">from</span> course a, teacher b <span class="keyword">where</span> a.tid=b.tid <span class="keyword">and</span> a.chsu &gt; <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>5，<strong>重命名视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sp_rename 'view_teacher_choice', 'view_teacher_choice_total';</span><br></pre></td></tr></table></figure><p>6，<strong>查看视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line">exec sp_helptext <span class="string">'view_teacher_choice_total'</span>;</span><br></pre></td></tr></table></figure><p>7，<strong>删除视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> view_teacher_choice_total;</span><br></pre></td></tr></table></figure><h2 id="六，索引"><a href="#六，索引" class="headerlink" title="六，索引"></a>六，索引</h2><p>1，<strong>索引概述</strong></p><p>1）<strong><code>索引</code>定义</strong>：<code>索引</code>是对数据库表中一个或者多个列的值进行排序而创建的一种存储结构。</p><p>2）索引分类：</p><blockquote><p>i）<code>聚集索引(clustered)</code>：保证数据库表中记录的物理顺序与索引顺序相同，一个表只能有一个聚集索引。<br>ii）<code>非聚集索引(nonclustered)</code>：数据库表中记录的物理顺序与索引顺序可以不相同，一个表可以有多个非聚集索引。<br>iii）<strong>唯一索引(<code>unique</code>)</strong>：表示表中的任何两个记录的索引值都不相同，与表的主键类似，确保索引列不包括重复的值；<br>iv）<strong>组合索引</strong>：将两个或者多个字段组合起来的索引，而单独的字段允许不是唯一的值。</p></blockquote><p>2，<strong>创建索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> stuSystem</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_time <span class="keyword">in</span> course(choice_time <span class="keyword">asc</span>);</span><br></pre></td></tr></table></figure><p>3，<strong>查看索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sp_helpindex idx_time;</span><br></pre></td></tr></table></figure><p>4，<strong>删除索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> course.idx_time;</span><br></pre></td></tr></table></figure><h2 id="七，SQL操作查询"><a href="#七，SQL操作查询" class="headerlink" title="七，SQL操作查询"></a>七，SQL操作查询</h2><p>1，<strong>简单查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,sn,age <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sno <span class="keyword">from</span> course;</span><br><span class="line"><span class="keyword">select</span> sn <span class="keyword">as</span> sname,sno,age <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> sn,age<span class="number">-5</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(age) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><p>2，<strong>带条件的列查询</strong></p><blockquote><ul><li>比较大小和确定范围</li><li>部分匹配查询</li><li>查询的排序</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,score <span class="keyword">from</span> sc <span class="keyword">where</span> cno=<span class="string">'C01'</span>;</span><br><span class="line"><span class="keyword">select</span> sno,cno,score <span class="keyword">from</span> sc <span class="keyword">where</span> score&gt;<span class="number">80</span>;</span><br><span class="line"><span class="keyword">select</span> sno,cno,score <span class="keyword">from</span> sc <span class="keyword">where</span> (cno=<span class="string">'C01'</span> <span class="keyword">or</span> cno=<span class="string">'C02'</span>) <span class="keyword">and</span> score&gt;<span class="number">80</span>;</span><br><span class="line"><span class="keyword">select</span> sno,sn <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span> sno,sn,cno <span class="keyword">from</span> student <span class="keyword">where</span> score <span class="keyword">is</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">select</span> sno,cno,score <span class="keyword">from</span> sc <span class="keyword">where</span> cno <span class="keyword">in</span>(<span class="string">'C01'</span>, <span class="string">'C02'</span>);</span><br><span class="line"><span class="keyword">select</span> sno,sn <span class="keyword">from</span> student <span class="keyword">where</span> sn <span class="keyword">like</span> <span class="string">'李%'</span>;</span><br><span class="line"><span class="keyword">select</span> sno,score <span class="keyword">from</span> sc <span class="keyword">where</span> cno=<span class="string">'C01'</span> <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(score) <span class="keyword">as</span> total_score, <span class="keyword">avg</span>(score) <span class="keyword">as</span> avg_score <span class="keyword">from</span> sc <span class="keyword">where</span> sno=<span class="string">'0001'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(score) <span class="keyword">as</span> max_score,<span class="keyword">min</span>(score) <span class="keyword">as</span> min_score,<span class="keyword">max</span>(score)-<span class="keyword">min</span>(score) <span class="keyword">as</span> diff <span class="keyword">from</span> sc <span class="keyword">where</span> cno=<span class="string">'C01'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> dept) <span class="keyword">as</span> dept_num <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> sno,<span class="keyword">sum</span>(score) aas total_score <span class="keyword">from</span> sc <span class="keyword">where</span> score &gt;= <span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span>(*) &gt;= <span class="number">3</span> <span class="keyword">order</span> bu <span class="keyword">sum</span>(score) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>3，<strong>多表查询</strong></p><p>所谓<code>多表查询</code>，即在两个或者两个以上的表中进行的查询操作，分为：<code>连接查询</code>和<code>子查询</code>（<code>嵌套查询</code>）。</p><ul><li><strong>连接查询</strong></li></ul><blockquote><p>1）内连接</p><blockquote><ul><li><code>等值连接</code>：在连接条件中使用等于号(<code>=</code>)运算符，与被连接列的列值进行比较，在查询结果中列出被连接表中的所有列，包括其中的重复列。</li><li><code>不等连接</code>：在连接条件中使用除等于号(<code>=</code>)以外的其他比较运算符，与被连接列的列值进行比较，这些运算符包括<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code>，<code>!&gt;</code>，<code>!&lt;</code>，<code>&lt;&gt;</code>。</li><li><code>自然连接</code>：在连接条件中使用等于号(<code>=</code>)运算符，与被连接列的列值进行比较，在查询结果中列出被连接表中的所有列，但会删除其中的重复列。</li></ul></blockquote></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student a <span class="keyword">inner</span> <span class="keyword">join</span> sc b <span class="keyword">on</span> a.sno=b.sno;</span><br></pre></td></tr></table></figure><blockquote><p>2）交叉连接（笛卡尔积）：两个关系中所有元组的任意组合。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">cross</span> <span class="keyword">join</span> sc;</span><br></pre></td></tr></table></figure><blockquote><p>3）自连接：如果在一个连接查询中，涉及的两个表都是同一张表，这种查询称为<code>自连接查询</code>。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> student a <span class="keyword">inner</span> <span class="keyword">join</span> student b <span class="keyword">on</span> a.cno=b.cno <span class="keyword">and</span> b.sno=<span class="string">'20090701027'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>4）外连接：其查询结果既包含那些满足条件的行，又包含其中某个表的全部行。</p><blockquote><ul><li>左外连接（<code>left join</code>）</li><li>右外连接（<code>right join</code>）</li><li>全外连接（<code>full join</code>）</li></ul></blockquote></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.sno,a.sname,a.class,a.cno,b.score <span class="keyword">from</span> student a <span class="keyword">left</span> <span class="keyword">join</span> sc b <span class="keyword">on</span> a.sno=b.sno;</span><br><span class="line"><span class="keyword">select</span> a.sno,a.sname,a.class,a.cno,b.score <span class="keyword">from</span> student a <span class="keyword">right</span> <span class="keyword">join</span> sc b <span class="keyword">on</span> a.sno=b.sno;</span><br><span class="line"><span class="keyword">select</span> a.sno,a.sname,a.class,a.cno,b.score <span class="keyword">from</span> student a <span class="keyword">full</span> <span class="keyword">join</span> sc b <span class="keyword">on</span> a.sno=b.sno;</span><br></pre></td></tr></table></figure><ul><li><strong>子查询</strong></li></ul><blockquote><ul><li>在where子句中包含一个形如select-from-where的查询块，此查询称为<code>子查询</code>或者<code>嵌套查询</code>，包含子查询的语句称为<code>父查询</code>或者<code>外部查询</code>。<br>基本关键字：<code>any</code>，<code>in</code>，<code>all</code>，<code>exists</code></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> tname <span class="keyword">from</span> teacher <span class="keyword">where</span> tno=<span class="keyword">any</span>(<span class="keyword">select</span> tno <span class="keyword">from</span> tc <span class="keyword">where</span> cno=<span class="string">'C05'</span>);</span><br><span class="line"><span class="keyword">select</span> tname <span class="keyword">from</span> teacher <span class="keyword">where</span> tno <span class="keyword">in</span> (<span class="keyword">select</span> tno <span class="keyword">from</span> tc <span class="keyword">where</span> cno=<span class="string">'C05'</span>);</span><br><span class="line"><span class="keyword">select</span> tname,sal <span class="keyword">from</span> teacher <span class="keyword">where</span> sal&gt;<span class="keyword">all</span>(<span class="keyword">select</span> sal <span class="keyword">from</span> teacher <span class="keyword">where</span> dept=<span class="string">'电力系'</span>) <span class="keyword">and</span> dept!=<span class="string">'电力系'</span>;</span><br><span class="line"><span class="keyword">select</span> tname <span class="keyword">from</span> teacher <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> tc <span class="keyword">where</span> teacher.tno=tc.tno <span class="keyword">and</span> cno=<span class="string">'C05'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;课本第09～10章主要知识点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，表的概述&quot;&gt;&lt;a href=&quot;#一
      
    
    </summary>
    
      <category term="数据库技术" scheme="https://zhangbc.github.io/categories/database/"/>
    
    
      <category term="数据库实践" scheme="https://zhangbc.github.io/tags/db-practice/"/>
    
  </entry>
  
  <entry>
    <title>【数据库实践】 数据库及其管理</title>
    <link href="https://zhangbc.github.io/2019/04/17/db_table_manager/"/>
    <id>https://zhangbc.github.io/2019/04/17/db_table_manager/</id>
    <published>2019-04-17T15:32:38.000Z</published>
    <updated>2019-04-18T11:37:54.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。</p><blockquote><p>课本第07～08章主要知识点</p></blockquote></blockquote><h2 id="一，SQL-Server-2005概述"><a href="#一，SQL-Server-2005概述" class="headerlink" title="一，SQL Server 2005概述"></a>一，SQL Server 2005概述</h2><p>1，<strong><code>SQL Server 2005</code> 新特性</strong></p><p><code>SQL Server</code> 是一个全面的，集成的数据库解决方案，为企业中的用户提供了用于企业数据管理和商业智能的一个安全，可靠和高效的平台。</p><p>1）<code>Service Broker</code></p><blockquote><ul><li>提供了一个功能强大的，异步编程的新模型。数据库应用程序通常使用异步编程来缩短交互式响应时间，并增加应用程序总吞吐量。</li><li>帮助数据库开发人员生成可靠且可扩展的应用程序。</li><li>在<code>SQL Server</code>实例之间提供可靠的消息传递服务。</li></ul></blockquote><p>2）<code>CLR</code>集成<br>3）专用管理员<code>DAC</code>：<code>SQL Server 2005</code>为管理员提供了一种特殊的诊断连接，以供在无法与服务器建立标准连接时使用。<br>4）用户与架构分离</p><blockquote><ul><li>简化删除数据库用户的操作</li><li>多个用户可以用户同一个架构</li></ul></blockquote><p>5）分区：<code>分区</code>是大型数据表和索引采取的优化存储性能和数据存储的技术。</p><p>2，<strong><code>SQL Server 2005</code> 体系结构</strong><br><img src="/images/db_table_manager_architecture_20190417.png" alt="SQL Server体系结构"></p><p>1）<strong>数据库引擎组件</strong>：为数据存储、处理和安全实现高可伸缩性和高可用性服务。<br>2）<strong>报表组件服务组件</strong>：提供了全面的报表解决方案，可创建、管理和发布传统的、可打印的报表和交互性的、基于<code>Web</code>的报表。<br>3）<strong>分析服务组件</strong>：提供数据分析服务。利用分析服务开发人员设计、创建和管理多种数据源和多种数据结构，通过数据分析规律，获取数据知识。<br>4）<strong>集成服务组件</strong>：用于构建高性能数据集成解决方案（包括为数据仓库提取、转换和加载（<code>ETL</code>）包）的平台。<br>5）<strong>其他组件</strong>：复制服务组件，通知服务组件，服务代理组件，全文搜索。</p><p>3，<strong><code>SQL Server 2005</code>安装</strong></p><p>1）<strong><code>SQL Server 2005</code>版本选择</strong></p><blockquote><ul><li><code>SQL Server 2005</code>企业版：支持<code>32位</code>和<code>64位</code>系统，适合超大型企业。包括联机事务处理，高度复杂的数据分析，数据仓库系统和网站所需的基本功能。</li><li><code>SQL Server 2005</code>标准版：支持<code>32位</code>和<code>64位</code>系统，适合中小型企业。包括电子商务，数据仓库和业务流解决方案所需的基本功能。</li><li><code>SQL Server 2005</code>工作组版：仅支持<code>32位</code>系统，适合小型企业使用。包括<code>SQL Server</code>产品系列的核心数据库功能，可升级至标准版或者企业版。</li><li><code>SQL Server 2005</code>开发版：支持<code>32位</code>和<code>64位</code>系统，仅适合于开发和测试系统使用。具备和企业版完全一样的功能，但有许可限制，只能用于开发和测试。</li><li><code>SQL Server 2005</code>简易版：仅支持<code>32位</code>系统，是一个免费的，使用简单，易于管理的数据库。</li><li><code>SQL Server 2005</code>精简版：仅支持<code>32位</code>系统，适合在移动智能设备上使用。</li></ul></blockquote><h2 id="二，数据库的类型"><a href="#二，数据库的类型" class="headerlink" title="二，数据库的类型"></a>二，数据库的类型</h2><p>1，<strong>系统数据库</strong></p><p><code>数据库</code>是表、视图、索引、存储过程等对象的集合，是数据库管理系统的核心，数据库与管理它的数据库管理系统统一组成数据库服务器。</p><p> 1）<strong><code>master</code></strong>：记录了<code>SQL Server</code>系统的所有服务器的系统信息，包括实例范围的元数据，端点，链接服务器和系统配置设置。</p><p> 2）<strong><code>model</code></strong>：用于在<code>SQL Server</code>实例上创建的所有数据库的模板。</p><p> 3）<strong><code>msdb</code></strong>：提供给<code>SQL Server</code>代理服务器使用的数据库，主要用于为警报，作业，任务调度及记录操作员的操作提供相应的支持。</p><p> 4）<strong><code>tempdb</code></strong>：连接到<code>SQL Server</code>实例的所有用户都可用的全局资源，保存所有临时表和临时存储过程。</p><p> 5）<strong><code>resource</code></strong>：是一个隐藏的只读数据库，包含了<code>SQL Server</code>中的所有系统对象，但不包含用户数据或者用户元数据。</p><p>2，<strong>用户数据库</strong></p><ul><li>数据库<code>命名规则</code>如下：<blockquote><ul><li>第一个字符必须是字母<code>a～z</code>和<code>A~Z</code>、汉字或者下画线(<code>_</code>)、符号<code>@</code>，<code>#</code>；</li><li>后续字符可以是字母<code>a～z</code>和<code>A~Z</code>、汉字、数字或者下画线(<code>_</code>)、符号<code>@</code>，<code>$</code>、数字符号；</li><li>标识符不能是<code>T-SQL</code>的保留字；</li><li>长度不能超过128。</li></ul></blockquote></li></ul><p>3，<strong>数据库快照</strong></p><p>1）<strong><code>数据库快照</code>的定义</strong>：<code>数据库快照</code>是用户数据库的只读、静态视图，不包括未提交的事务。</p><p>2）<strong><code>数据库快照</code>的特点</strong>：</p><blockquote><ul><li>反映某个时刻（完成数据库快照创建的时刻）数据库的数据；</li><li>不允许更新；</li><li>一个用户数据库可以创建多个数据库快照，并且必须与数据库在同一个服务器实例上。</li></ul></blockquote><h2 id="三，数据库存储文件"><a href="#三，数据库存储文件" class="headerlink" title="三，数据库存储文件"></a>三，数据库存储文件</h2><p><code>SQL Server 2005</code>数据库<strong>文件名称</strong>包括：</p><blockquote><ul><li><code>逻辑文件名</code>：在所有 <code>T-SQL</code> 语句中引用物理文件时所使用的名称，必须符合<code>SQL Server</code> 标识符规则，而且是唯一的。</li><li><code>物理文件名</code>：包括目录路径的物理文件名称，必须符合操作系统文件命名规则。</li></ul></blockquote><p><code>SQL Server 2005</code>数据库<strong>操作系统文件</strong>包括：</p><blockquote><ul><li><code>数据文件</code>：包括数据和对象，如表、索引、存储过程和视图。</li><li><code>日志文件</code>：包含恢复数据库中的所有事务所需的信息。</li></ul></blockquote><p>1，<strong>数据库文件</strong></p><blockquote><ul><li><strong>主要数据库文件（<code>.mdf</code>）</strong>：数据库的起点，包括数据库的启动信息，并指向数据库中其他文件。</li><li><strong>次要数据库文件（<code>.ndf</code>）</strong>：是可选的，由用户定义并存储用户数据。</li><li><strong>事务日志文件（<code>.ldf</code>）</strong>：用于恢复数据库的日志信息。</li></ul></blockquote><p>2，<strong>数据库文件组</strong></p><blockquote><ul><li><strong>主文件组</strong>：包含主要数据文件和任何没有明确分配给其他文件组的其他文件。<code>系统表</code>的所有页均分配在主文件组中。</li><li><strong>用户定义文件组</strong>：通过在 <code>create database</code> 或者 <code>alter database</code> 语句中使用 <code>filegroup</code> 关键字指定的任何文件组。</li><li><strong>默认文件组（<code>primary</code>文件组）</strong>：如果在数据库中创建对象时没有指定对象所属的文件组，对象将被分配给默认文件组。</li></ul></blockquote><p><strong><code>注意</code></strong>：日志文件包括在文件组内。</p><h2 id="四，数据库的对象"><a href="#四，数据库的对象" class="headerlink" title="四，数据库的对象"></a>四，数据库的对象</h2><p>1，<strong>数据库关系图</strong>：以<code>图形</code>方式来表示表之间的关系。</p><p>2，<strong>表</strong>：组织和存储数据。</p><p>3，<strong>索引</strong>：提高数据检索速度，但增加了系统存储空间的开销。</p><p>4，<strong>视图</strong>：实现用户对数据对查询，但是视图的结构和数据是建立在对表的查询基础上的。</p><p>5，<strong>存储过程和触发器</strong>：数据库中的对编程对象。</p><blockquote><ul><li><code>存储过程</code>独立于表，存储在服务器上，供客户端调用，提供应用程序的效率。</li><li><code>触发器</code>是一种特殊的存储过程，可以大大增强应用程序的健壮性，数据的可恢复性和可管理性。</li></ul></blockquote><p>6，<strong>规则和约束</strong>：对能够放入表中的内容进行限定。</p><blockquote><ul><li><code>规则</code>：用于在用户定义数据类型上加以限制。</li><li><code>约束</code>：本身并非实际的对象，而只是描述特定表的元数据。</li></ul></blockquote><p>7，<strong>默认值</strong>：</p><ul><li><code>默认值</code>有两种类型：<blockquote><ul><li>默认值默认其本身是一个对象；</li><li>默认值不是实际的对象，只描述表特定列的元数据。</li></ul></blockquote></li></ul><p>8，<strong>全文目录</strong>：<code>全文目录</code>是数据的映射，以加速对启用了全文搜索的列中特定文本块的搜索。</p><h2 id="五，创建数据库"><a href="#五，创建数据库" class="headerlink" title="五，创建数据库"></a>五，创建数据库</h2><ul><li>一个<code>SQL Server</code>实例，最多可以创建<code>32767</code>个数据库。</li></ul><p>1，<strong>使用<code>SQL Server</code>管理工具创建</strong></p><p>2，<strong>使用<code>T-SQL</code>创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> xsxk </span><br><span class="line"><span class="keyword">on</span> primary                   <span class="comment">-- 建立主要数据文件</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span> = <span class="string">'xsxk_data'</span>,         <span class="comment">-- 逻辑名称</span></span><br><span class="line">    filename = <span class="string">'E:\students\xsxk_data.mdf'</span>,   <span class="comment">-- 物理文件路径和名称</span></span><br><span class="line">    <span class="keyword">size</span> = <span class="number">1024</span>KB,         <span class="comment">-- 初始大小</span></span><br><span class="line">    <span class="keyword">maxsize</span> = <span class="keyword">unlimited</span>,   <span class="comment">-- 最大尺寸为无限大</span></span><br><span class="line">    filegrowth = <span class="number">10</span>%       <span class="comment">-- 增长速度</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">log</span> <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span> = <span class="string">'xsxk_log'</span>,         <span class="comment">-- 建立日志文件</span></span><br><span class="line">    filename = <span class="string">'E:\students\xsxk_log.ldf'</span>,   <span class="comment">-- 物理文件路径和名称</span></span><br><span class="line">    <span class="keyword">size</span> = <span class="number">1024</span>KB,         <span class="comment">-- 初始大小</span></span><br><span class="line">    <span class="keyword">maxsize</span> = <span class="number">5120</span>KB,  </span><br><span class="line">    filegrowth = <span class="number">1024</span>KB</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h2 id="六，维护数据库"><a href="#六，维护数据库" class="headerlink" title="六，维护数据库"></a>六，维护数据库</h2><p>1，<strong>查看数据库状态</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">master</span>;</span><br><span class="line">go</span><br><span class="line">​</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,state,state_desc <span class="keyword">from</span> sys.databases;</span><br></pre></td></tr></table></figure><p>2，<strong>修改数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> xsxk </span><br><span class="line"><span class="keyword">modify</span> <span class="keyword">file</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span> = <span class="string">'xsxk_data'</span>,         <span class="comment">-- 逻辑名称</span></span><br><span class="line">    <span class="keyword">size</span> = <span class="number">5</span>MB,         <span class="comment">-- 初始大小</span></span><br><span class="line">    <span class="keyword">maxsize</span> = <span class="number">50</span>MB,   </span><br><span class="line">    filegrowth = <span class="number">2</span>%       <span class="comment">-- 增长速度</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> xsxk</span><br><span class="line"><span class="keyword">log</span> <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span> = <span class="string">'xsxk_log'</span>,         <span class="comment">-- 建立日志文件</span></span><br><span class="line">    filename = <span class="string">'E:\students\xsxk_log.ldf'</span>,   <span class="comment">-- 物理文件路径和名称</span></span><br><span class="line">    <span class="keyword">size</span> = <span class="number">1024</span>KB,         <span class="comment">-- 初始大小</span></span><br><span class="line">    <span class="keyword">maxsize</span> = <span class="number">5120</span>KB,  </span><br><span class="line">    filegrowth = <span class="number">2</span>MB</span><br><span class="line"> )</span><br><span class="line"> <span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>3，<strong>删除数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> xsxk;</span><br></pre></td></tr></table></figure><p>4，<strong>分离和附加数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分离数据库</span></span><br><span class="line">sp_detach_db xsxk;</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 附加数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> xsxk <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">    filename = <span class="string">'E:\students\xsxk_data.mdf'</span></span><br><span class="line">),(</span><br><span class="line">    filename = <span class="string">'E:\students\xsxk_log.ldf'</span></span><br><span class="line">)</span><br><span class="line">    <span class="keyword">for</span> attach;</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>5，<strong>其他操作</strong></p><p>1）<strong>脱机用户数据库</strong></p><p>2）<strong>联机用户数据库</strong></p><p>3）<strong>重命名数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> xsxk <span class="keyword">modify</span> <span class="keyword">name</span> = xsxks</span><br></pre></td></tr></table></figure><p>4）<strong>收缩数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将userDB用户数据库中的文件减小，以使userDB中的文件有10%的可用空间</span></span><br><span class="line">dbcc sharinkdatabases(userDB, 10)</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 将userDB用户数据库中名为DataFile的文件大小收缩到7M</span></span><br><span class="line">DBCC shrinkfile(DataFile, 7)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;课本第07～08章主要知识点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，SQL-Server-2005概述
      
    
    </summary>
    
      <category term="数据库技术" scheme="https://zhangbc.github.io/categories/database/"/>
    
    
      <category term="数据库实践" scheme="https://zhangbc.github.io/tags/db-practice/"/>
    
  </entry>
  
  <entry>
    <title>【数据库理论】数据库的安全和保护</title>
    <link href="https://zhangbc.github.io/2019/04/14/db_security/"/>
    <id>https://zhangbc.github.io/2019/04/14/db_security/</id>
    <published>2019-04-14T11:05:17.000Z</published>
    <updated>2019-04-14T16:43:26.612Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。</p></blockquote><h2 id="一，安全与保护概述"><a href="#一，安全与保护概述" class="headerlink" title="一，安全与保护概述"></a>一，安全与保护概述</h2><p>1）<strong><code>数据安全性控制</code></strong>：防止未经授权的用户和存取数据库中的数据，避免数据的泄露，更改或破坏；</p><p>2）<strong><code>数据完整性控制</code></strong>：保证数据库中数据及语义的正确性和有效性，防止任何对数据库造成错误的操作；</p><p>3）<strong><code>数据库的并发控制</code></strong>：在多用户同时对一个个数据进行操作时，系统应能够加以控制，防止破坏数据库中的数据；</p><p>4）<strong><code>数据库的恢复</code></strong>：在数据库遭到破坏或者数据不正确时，系统有能力把数据库恢复到正确的状态。</p><h2 id="二，数据库的安全性"><a href="#二，数据库的安全性" class="headerlink" title="二，数据库的安全性"></a>二，数据库的安全性</h2><p>1，<strong>数据库安全性控制</strong></p><p>1）<strong>用户标识与鉴别</strong>：系统提供的最外层的安全保护措施，其方法是由系统提供一定的方式让用户标识自己的名字或身份。</p><p> 2）<strong>存取控制</strong>：</p><blockquote><p>（1）<code>定义用户权限</code>，并将用户权限等存储在数据字典中。<code>用户权限</code>是指不同等用户对不同对数据对象允许执行对操作权限，这些定义经过编译后存放在数据字典中，这些定义称为<code>安全规则</code>或<code>授权规则</code>；<br>（2）<code>合法权限检查</code>。用户权限定义和合法权限检查机制组成类<code>DBMS</code>的安全子系统。</p></blockquote><p>3）<strong>试图机制</strong>：数据安全性，逻辑数据独立性和操作简便性。</p><p>4）<strong>审计</strong>：<code>审计追踪</code>是一个对数据库进行更新对日志，还包括一些其他信息，如哪个用户执行了更新和什么时候执行的更新等。</p><p>5）<strong>数据加密</strong>：防止数据库中数据在存储和传输中失密的有效手段。</p><p>2，<strong>SQL Server的安全性措施</strong></p><p>1）<strong><code>SQL Server</code>安全控制概述</strong></p><blockquote><p>（1）操作系统安全验证（网络层）：通过设置安全模式来实现。<br>（2）<code>SQL Server</code>安全验证（服务器）：通过<code>SQL Server</code>服务器登录名管理来实现。<br>（3）<code>SQL Server</code>数据库安全验证：通过<code>SQL Server</code>数据库用户管理来实现。<br>（4）<code>SQL Server</code>数据库对象安全验证（处理权限）：通过权限管理来实现。</p></blockquote><p>2）<strong><code>SQL Server</code>的安全认证模式</strong></p><blockquote><p>（1）身份验证阶段：Windows身份验证，混合模式验证。<br>（2）权限认证阶段<br>（3）设置身份验证</p></blockquote><p>3）<strong>登录名和用户管理</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> &lt;<span class="keyword">DATABASE</span> <span class="keyword">NAME</span>&gt;</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> &lt;<span class="keyword">new</span> user_name&gt; <span class="keyword">FOR</span> LOGIN &lt;login <span class="keyword">name</span>&gt;;</span><br></pre></td></tr></table></figure></p><p>4）<strong>权限管理</strong></p><blockquote><p>（1）<strong>权限分类</strong>：<code>语句权限</code>，<code>对象权限</code>，<code>隐含权限</code>；<br>（2）<strong>角色分类</strong>：在<code>SQL Server</code>中，组是通过角色来实现的。角色分为<code>服务器角色</code>和<code>数据库角色</code>（预定义的数据库角色，用户自定义数据库角色和应用程序角色）。</p></blockquote><h2 id="三，数据库的完整性"><a href="#三，数据库的完整性" class="headerlink" title="三，数据库的完整性"></a>三，数据库的完整性</h2><p>1，<strong><code>数据库的完整性</code>定义</strong>：<code>数据库的完整性</code>是指数据的正确性（<code>Correctness</code>），有效性（<code>Validity</code>）和相容性（<code>Consistency</code>）。<code>正确性</code>是指数据的合法性；<code>有效性</code>是指数据是否属于所定义的有效范围；<code>相容性</code>是指表示同一事实的两个数据应一致，不一致就是不相容。</p><p><code>完整性检查</code>：在<code>DBMS</code>中，检查数据库中的数据是否满足语义规定的条件。</p><p>2，<strong>完整性约束条件</strong></p><p>1）<strong>完整性约束作用的对象</strong>可以是<code>列</code>，<code>元组</code>，<code>关系</code>。其中：<code>列的约束</code>主要是列的类型，取值范围，精度，排序等约束条件；<code>元组的约束</code>是元组中各个字段间的联系约束；<code>关系的约束</code>是若干元组间，关系集合上及关系之间的联系约束。</p><p>2）<strong><code>静态约束</code></strong>：指数据库在每个确定状态时的数据对象所应满足的约束条件，是反映数据库状态合理性的约束。</p><blockquote><p>（1）<code>静态列级约束</code>：对一个列的取值范围的说明，即对数据类型的约束（数据的类型，长度，单位，精度等），对数据格式的约束，对取值范围或者取值集合的约束，对空值的约束，其他约束。<br>（2）<code>静态元组约束</code>：规定元组的各个列之间的约束关系。<br>（3）<code>静态关系约束</code>：实体完整性约束，参照完整性约束，函数依赖约束，统计约束。</p></blockquote><p>3）<strong><code>动态约束</code></strong>：指数据库从一种状态转变为另一种状态时，新旧值之间所应满足的约束条件，是反映数据库状态变迁的约束。</p><blockquote><p>（1）<code>动态列级约束</code>：修改列定义或者列值时应满足的约束条件。<br>（2）<code>动态元组约束</code>：修改元组中各个字段间需要满足某种约束条件。<br>（3）<code>动态关系约束</code>：加在关系变化前后状态上的限制条件，如事务一致性，原子性等。</p></blockquote><p>3，<strong>完整性控制</strong></p><p>1）<strong>定义功能</strong>：提供定义完整性约束条件的机制。</p><p>2）<strong>检查功能</strong>：检查用户发出的操作请求是否违背列完整性约束条件。</p><p>3）如果发现用户的操作请求使数据违背了完整性约束条件，则采取恰当的操作。</p><p>4，<strong><code>SQL Server</code>的完整性实现</strong></p><p>1）<strong>声明型数据完整性约束</strong>：在 <code>create table</code> 和 <code>alter table</code> 定义中使用约束限制表中的值。</p><p>2）<strong>过程型数据完整性约束</strong>：由缺省，规则和触发器实现，由视图和存储过程支持。</p><p>（1）<strong><code>约束</code></strong>：是SQL Server提供的自动保持数据库完整性的一种方法。分为：<br>i）<code>空值约束</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CONSTRAINT constraint_name] [NULL/NOT NULL]</span><br></pre></td></tr></table></figure></p><p>ii）<code>主键约束</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列级</span></span><br><span class="line">[CONSTRAINT constraint_name] PRIMARY KEY  </span><br><span class="line"><span class="comment">-- 表级</span></span><br><span class="line">[CONSTRAINT constraint_name] PRIMARY KEY(&lt;column_name&gt;[&#123;,&lt;column_name&gt;&#125;])</span><br></pre></td></tr></table></figure></p><p>iii）<code>唯一约束</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列级</span></span><br><span class="line">[CONSTRAINT constraint_name] UNIQUE  </span><br><span class="line"><span class="comment">-- 表级</span></span><br><span class="line">[CONSTRAINT constraint_name] UNIQUE(&lt;column_name&gt;[&#123;,&lt;column_name&gt;&#125;])</span><br></pre></td></tr></table></figure></p><ul><li><code>唯一约束</code>和<code>主键约束</code>的区别：<blockquote><p>（1）在一个基本表中，只能定义在一个主键约束，但可以定义多个唯一约束；<br>（2）两者都为指定但列建立唯一索引，但主键约束限制更为严格，不但不允许有重复值，而且也不允许由空值；<br>（3）唯一约束与主键约束产生但约束可以是聚集索引，也可以是非聚集索引，在缺省情况下，唯一约束产生非聚集索引，主键约束产生聚集索引；<br>（4）不能同时为同一列或者一组列既定义唯一约束，又定义主键约束。</p></blockquote></li></ul><p>iv）<code>外键约束和参照约束</code><br> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CONSTRAINT constraint_name] [FOREIGN KEY] REFERENCES ref_table (ref_column[&#123;,&lt;trf_column&gt;&#125;])</span><br></pre></td></tr></table></figure></p><p>v）<code>缺省值约束</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CONSTRAINT constraint_name] DEFAULT constraint_expression</span><br></pre></td></tr></table></figure></p><p>vi）<code>检查约束</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CONSTRAINT constraint_name] <span class="keyword">CHECK</span>(logical_expression)</span><br></pre></td></tr></table></figure></p><ul><li>例如：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">master</span></span><br><span class="line"><span class="keyword">go</span> </span><br><span class="line">​</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Titles </span><br><span class="line">(</span><br><span class="line">    title_id <span class="built_in">varchar</span>(<span class="number">6</span>) <span class="keyword">constraint</span> pk_title_id primary <span class="keyword">key</span>,</span><br><span class="line">    title <span class="built_in">varchar</span>(<span class="number">80</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">constraint</span> uniq_title <span class="keyword">unique</span>,</span><br><span class="line">    [<span class="keyword">type</span>] <span class="built_in">char</span>(<span class="number">12</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">constraint</span> def_type <span class="keyword">default</span> <span class="string">'UNDECIDED'</span>,</span><br><span class="line">    pub_id <span class="built_in">char</span>(<span class="number">4</span>),</span><br><span class="line">    price money <span class="keyword">constraint</span> chk_price <span class="keyword">check</span>(price <span class="keyword">between</span> <span class="number">5</span> <span class="keyword">and</span> <span class="number">100</span>),</span><br><span class="line">    ytd_sales <span class="built_in">int</span>,</span><br><span class="line">    pub_date datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">constraint</span> def_pub_date <span class="keyword">default</span> <span class="keyword">getdate</span>()</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>（2）<strong><code>规则</code></strong>：当向表当某列（或使用与该规则绑定的用户定义数据类型的所有列）插入列或更新数据时，它指定限制输入新值的取值范围。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">master</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">create</span> rule rule_price <span class="keyword">as</span> @price &gt;= <span class="number">5</span> <span class="keyword">and</span> @price &lt;= <span class="number">100</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line">exec sp_bindrule <span class="string">'rule_price'</span>, <span class="string">'Titles.price'</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>（3）<strong><code>缺省</code></strong>：它指定在向数据库中的表插入数据时，如果用户没有明确给出某列的值，<code>SQL Server</code>自动为该列（使用与该缺省绑定的用户定义数据类型的所有列）输入值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">master</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">default</span> def_price <span class="keyword">as</span> <span class="number">50</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">​</span><br><span class="line">exec sp_bindefault def_price, <span class="string">'Titles.price'</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><h2 id="四，事务"><a href="#四，事务" class="headerlink" title="四，事务"></a>四，事务</h2><p>1，<strong>事务的概念</strong></p><p>1）<strong><code>事务</code>定义</strong>：用户定义的一个数据库操作序列，这些操作要么可全部成功执行，否则，将不执行其中任何一个操作。事务是一个不可分割的工作单元。</p><p>2）<strong>事务基本性质(<code>ACID</code>)</strong></p><blockquote><p>（1）<strong><code>原子性(Atomicity)</code></strong>：事务中包含的所有操作要么全做，要么一个也不做。<br>（2）<strong><code>一致性(Consistency)</code></strong>：定义在数据库上的各种完整性约束。<br>（3）<strong><code>隔离性(Ioslation)</code></strong>：确保事务并发执行后的系统状态与这些事务以某种次序串行执行后的状态是等价的。<br>（4）<strong><code>持久性(Durability)</code></strong>：一个事务一旦成功完成，它对数据库的改变必须是永久的，即使是在系统遇到故障的情况下也不会丢失。</p></blockquote><p>2，<strong>事务调度</strong></p><p>1）<code>事务调度</code>的定义：在一个大型的<code>DBMS</code>中，可能会同时存在多个事务处理请求，系统需要确定这组事务的执行次序，即每个事务的指令在系统中执行的时间顺序，这称为<code>事务的调度</code>。</p><p>2）<code>合法调度</code>须满足以下条件：</p><blockquote><p>i）调度必须包含所有的事务的指令；<br>ii）一个事务中指令的顺序在调度中必须保持不变。</p></blockquote><p>3）调度的<strong>基本形式</strong></p><p>i）<code>串行调度</code></p><blockquote><ul><li><code>串行调度</code>：在前一个事务完成之后，在开始另外一个事务，类似与操作系统中的单道批处理作业。</li><li><code>可串行化调度</code>：定义多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行它们时的结果相同，这种调度策略称为<code>可串行化调度</code>。</li></ul></blockquote><p>ii）<code>并行调度</code></p><blockquote><ul><li><code>并行调度可串行化</code>：如果一组事务并行调度的执行结果等价于这组事务中所有提交事务的某个串行调度，则称该<code>并行调度可串行化</code>。</li><li><code>级联回滚</code>：由于一个事务的故障而导致一系列其他事务的回滚。</li><li><code>无级联调度</code>：应该对调度做出某种限制以避免级联回滚发生，这样的调度称为<code>无级联调度</code>。</li><li><code>可恢复调度</code>：对每对事务$T_i$和$T_j$，如果$T_j$读取了由$T_i$所写的数据项，则$T_i$必须先于$T_j$提交。</li></ul></blockquote><p>3，<strong>事务隔离级别</strong></p><p>1）<strong>并发操作带来的问题</strong></p><blockquote><p>i）<code>丢失修改</code>：又称<code>写-写错误</code>，两个事务$T_1$和$T_2$读入同一数据并修改，$T_2$提交的结果破坏了$T_1$提交的结果，导致$T_1$的修改被丢失。<br>ii）<code>脏读</code>：又称<code>写-读错误</code>，事务$T_1$修改某一数据，并将其写回磁盘，事务$T_2$读取同一数据后，$T_1$由于某种原因被撤销，这时$T_1$已修改过的数据恢复原值，$T_2$读到的数据就与数据库中的数据不一致，则$T_2$读到的数据即为<code>“脏”数据</code>，即<code>不正确的数据</code>。<br>iii）<code>不可重复读</code>：又称<code>读-写错误</code>，事务$T_1$读取某一数据后，事务$T_2$对其做了修改，当$T_1$再次读取该数据时，得到与前次不同的值。<br>iv）<code>幻想读</code>：事务$T_2$按一定条件读取了某些数据后，事务$T_1$插入（删除）了一些满足这些条件的数据，当$T_2$再次按相同条件读取数据时，发现多（少）了一些记录。</p></blockquote><p>2）<strong>事务隔离级别的定义</strong></p><blockquote><p>i）<code>未提交读</code>：又称<code>脏读</code>，允许运行在该隔离级别上的事务读取当前数据页上的任何数据，而不管该数据是否已提交，解决了<code>丢失修改</code>问题。<br>ii）<code>提交读</code>：保证运行在该隔离级别上的事务不会读取其他未提交事务所修改的数据，解决了<code>丢失修改</code>和<code>脏读</code>的问题。<br>iii）<code>可重复读</code>：保证一个事务如果再次访问同一数据，与此前访问相比，数据不会发生修改，解决了<code>丢失修改</code>，<code>脏读</code>和<code>不可重复读</code>问题。<br>iv）<code>可串行化</code>：在这个级别上的一组事务的并发执行与它们的某个串行调度是等价的，解决了并发操作带来的四个不一致问题。</p></blockquote><p>4，<strong><code>SQL Server</code>中的事务定义</strong></p><p>1）<strong>事务定义模式</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义</span></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN[SACTION] [事务名[<span class="keyword">WITH</span> MARK[<span class="string">'事务描述'</span>]]]</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 提交1</span></span><br><span class="line"><span class="keyword">COMMIT</span> [TRAN[SACTION] [事务名]]</span><br><span class="line"><span class="comment">-- 提交2</span></span><br><span class="line"><span class="keyword">COMMIT</span>[<span class="keyword">WORK</span>]</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 回滚1</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> [TRAN[SACTION] [事务名|保存点名]]</span><br><span class="line"><span class="comment">-- 回滚2</span></span><br><span class="line"><span class="keyword">COMMIT</span>[<span class="keyword">WORK</span>]</span><br></pre></td></tr></table></figure></p><p>2）<strong>事务执行模式</strong></p><blockquote><p>i）<code>显式事务</code>：每个事务均以 <code>BEGIN TRANSACTION</code> 语句显式开始，以 <code>COMMIT</code> 或者 <code>ROLLBACK</code> 语句显式结束。<br>ii）<code>隐性事务</code>：每个事务无须描述事务的开始，但仍以 <code>COMMIT</code> 或 <code>ROLLBACK</code>语句显式完成。<br>iii）<code>自动提交事务</code>：<code>SQL Server</code> 的默认事务管理模式，意指每条单独的语句都是一个事务。在完成每个 <code>T-SQL</code> 语句时，都被提交或者回滚。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 隐性事务设置方法</span></span><br><span class="line"><span class="keyword">SET</span> IMPLICIT_TRANSACTIONS &#123;<span class="keyword">ON</span>|<span class="keyword">OFF</span>&#125;</span><br></pre></td></tr></table></figure><p>3）<strong>事务隔离级别的定义</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> committed;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">serializable</span>;</span><br></pre></td></tr></table></figure></p><p>4）<strong>批处理，触发器的事务</strong></p><p><code>批处理</code>是包含一个或者多个<code>SQL</code>语句的组，从应用程序一次性地发送到服务器执行。服务器将批处理语句编译成一个可执行单元，此单元称为<code>执行计划</code>。</p><h2 id="五，并发控制"><a href="#五，并发控制" class="headerlink" title="五，并发控制"></a>五，并发控制</h2><p>1，<strong>相关概念</strong></p><p><code>事务</code>是并发控制的基本单位，<code>事务</code>最基本的特征之一是<code>隔离性</code>。为保证事务的隔离性，系统必须对并发事务之间的相互作用加以控制，这称为<code>并发控制</code>。并发控制的主要技术是<code>封锁</code>。</p><p>2，<strong>封锁技术</strong></p><p>1）<code>封锁</code>：事务$T$在对某个数据库对象操作之前，先向系统发出请求，对其加锁。<strong>最基本</strong>的封锁模式有<code>排他锁(X锁)</code>和<code>共享锁(S锁)</code>。</p><blockquote><p>i）<code>排他锁</code>：又称<code>写锁</code>，如果事务$T$对数据对象$A$加上$X$锁，则只允许$T$读取和修改$A$，其他任何事务都不能再对$A$加任何类型的锁，直到$T$释放$A$上的锁。申请对$A$的排他锁可表示为$XLOCK(A)$。<br>ii）<code>共享锁</code>：又称<code>读锁</code>，如果事务$T$对数据对象$A$加上$S$锁，则只允许$T$读取$A$但不允许修改$A$，其他事务只能再对$A$加$S$锁而不能加$X$锁，直到$T$释放$A$上的$S$锁。申请对$A$的共享锁可表示为$SLOCK(A)$。</p></blockquote><p>3，<strong>事务隔离级别与封锁规则</strong></p><p>1）<code>封锁协议（Locking Protocol）</code>：在运用$X$锁和$S$锁这两种基本封锁对数据对象加锁时，还需要约定规则，如何时申请$X$锁或$S$锁，持锁时间，何时释放等，这些规则称为<code>封锁协议</code>。</p><p>2）<code>长锁</code>：保持到事务结束的锁；<code>短锁</code>：用完就释放的锁。</p><p>4，<strong>封锁粒度（<code>MGL</code>）</strong></p><p>1）<code>封锁粒度</code>定义：封锁对象的大小称为<code>粒度</code>。</p><blockquote><p>i）<code>多粒度封锁</code>：数据库中被封锁的资源按粒度大小会呈现处一种层次关系，元组隶属于关系，关系隶属于数据库，称为<code>粒度树</code>。当为某结点加上意向锁（$I$锁）时，就表明某些内层结点已发生事实上的封锁，防止其他事务再去封锁该结点，这种封锁方式称为<code>多粒度封锁（Multi Granularity Lock）</code>。<br>ii）<code>意向锁</code>：如果对一个结点加意向锁，则说明该节点的下层结点正在加锁；对任意节点加锁时，必须先对它所在的上层结点加意向锁。</p><blockquote><ul><li><code>意向共享锁（IS锁）</code>：如果对一个数据对象加<code>IS</code>锁，表示它的后裔结点拟（意向）加<code>S</code>锁。</li><li><code>意向排他锁（IX锁）</code>：如果对一个数据对象加<code>IX</code>锁，表示它的后裔结点拟（意向）加<code>X</code>锁。</li><li><code>共享意向排他锁（SIX锁）</code>：如果对一个数据对象加<code>SIX</code>锁，表示对它加<code>S</code>锁，再加<code>IX</code>锁。</li></ul></blockquote></blockquote><p>5，<strong>并发控制</strong></p><p>1）<strong><code>SQL Server</code>锁模式</strong>：共享锁（<code>S</code>锁），更新锁（<code>U</code>锁），排他锁（<code>X</code>锁），意向共享锁（<code>IS</code>锁）， 意向排他锁（<code>IX</code>锁），共享意向排他锁（<code>SIX</code>锁）。</p><p>2）<strong><code>SQL Server</code>锁粒度</strong>：行级（<code>Row</code>），页面级（<code>Page</code>），表级（<code>Table</code>）</p><p>3）<strong>强制封锁类型</strong><br>在通常情况下，数据封锁由<code>DBMS</code>控制，对用户是透明的，但可以在<code>SQL</code>语句中加入锁定提示来强制 <code>SQL Server</code> 使用特定类型但锁。</p><h2 id="六，数据库恢复技术"><a href="#六，数据库恢复技术" class="headerlink" title="六，数据库恢复技术"></a>六，数据库恢复技术</h2><p>1，<strong><code>恢复</code>的概念</strong>：负责将数据库从故障所造成的错误状态中恢复到某一已知的正确状态（也称为一致性状态或者完整状态）。</p><p>2，<strong>故障的种类</strong></p><p>1）<code>事务故障</code>：指事务的运行没达到预期对象终点就终止，有两种错误可能造成事务执行失败。</p><blockquote><p>i）<code>非预期故障</code>：是指不能由应用程序处理的故障，如运算溢出，但该事务可以在以后但某个时间重新执行。<br>ii）<code>可预期故障</code>：指应用程序可以发现的事务故障，并且可以控制让事务回滚。</p></blockquote><p>2）<code>系统故障</code>：又称<code>软故障</code>，指在硬件故障，软件错误的影响下，导致内存中的数据丢失，并使得事务处理终止，但未破坏外存中数据库。<br>由于硬件错误和软件漏洞致使系统终止，而不破坏外存内容但故障又称为<code>故障-停止假设</code>。</p><p>3）<code>介质故障</code>：又称<code>硬故障</code>，指由于磁盘的磁头碰撞，瞬时的强磁场干扰等造成磁盘的损坏，破坏外存上的数据库，并影响正在存取的这部分数据的所有事务。</p><p>4）恢复的<strong>基本原理</strong>是<code>冗余</code>，即数据库中任意部分的数据可以根据存储在系统别处的冗余数据来重建。一般的冗余形式：<code>副本</code>和<code>日志</code>。</p><p>3，<strong>恢复的实现技术</strong></p><p>1）<strong><code>数据转储</code></strong>：<code>DBA</code>定期将整个数据库复制到磁带或者在另一个磁盘上保存起来的过程。</p><blockquote><p>i）<code>静态转储</code>：在系统中无运行事务时进行的转储操作，即转储操作开始的时刻，数据库处于一致性状态，而转储期间不允许对数据库的任何存取，修改活动。<br>ii）<code>动态转储</code>：指在转储期间允许对数据库进行存取或修改，即转储与用户事务可以并发执行。<br>iii）全量转储：每次转储全部数据库。<br>iv）增量转储：每次只转储上一次转储后更新过的数据。</p></blockquote><p>2）<strong>登记日志文件</strong></p><p><code>日志</code>是以<code>事务</code>为单位记录数据库每次更新活动的文件，由系统自动记录。遵循以下<strong>原则</strong>：</p><blockquote><p>i）登记的次序严格按并发事务执行的时间次序；<br>ii）必须先写日志文件，然后写数据库。</p></blockquote><p><code>前像</code>：要撤消事务，日志中必须包含数据库发生变化前的所有记录的备份，这些记录称为<code>前像(Before-Images)</code>。</p><p><code>后像</code>：为了恢复事务，日志中必须包含数据库改变之后的所有记录的备份，这些记录称为<code>后像(After-Images)</code>。</p><p>3）<strong>基本日志结构</strong></p><p><code>日志</code>是日志记录(<code>Log Records</code>)的序列，主要包含：</p><blockquote><p>（1）事务开始标识，如&lt;$T_i$ start&gt;；<br>（2）更新日志记录，描述一次数据库写操作，如&lt;$T_i,X_i,V_1,V_2$&gt;</p><blockquote><p>事务标识$T_i$是执行WRITE操作的事务的唯一标识；<br>数据项标识$X_i$是所写数据项的唯一标识，通常是数据项在磁盘上的位置；<br>更新前数据的旧值$V_1$ (对插入操作而言此项为空值)；<br> 更新后数据的新值$V_2$ (对删除操作而言此项为空值)。<br>（3）事务结束标识<br>&lt;$T_i$ COMMIT&gt;，表示事务$T_i$提交；<br>&lt;$T_i$ ABORT&gt;，表示事务$T_i$中止。</p></blockquote></blockquote><p>4，<strong><code>SQL Server</code>基于日志的恢复策略</strong></p><p>1）<strong>事务分类</strong></p><blockquote><p>i）<code>圆满事务</code>：指日志文件中记录了事务的<code>COMMIT</code>标识，说明日志中已经完整地记录下事务所有的更新活动。<br>ii）<code>夭折事务</code>：指日志文件只有事务的开始标识，而无<code>COMMIT</code>标识，说明对事务更新活动的记录是不完整的，无法根据日志来重现事务。</p></blockquote><p>2）<strong>基本的恢复操作</strong></p><blockquote><p>i）<code>重做</code>：对圆满事务所做过的修改操作应执行<code>REDO</code>操作，即重新执行该操作，修改对象赋予其新记录值，这种方法称为<code>前滚</code>。<br>ii）<code>撤销</code>：对夭折事务所做过的修改操作应执行<code>UNDO</code>操作，即撤销该操作，修改对象赋予其旧记录值，这种方法又称为<code>回滚</code>。</p></blockquote><p>3）<strong>事务故障恢复</strong></p><blockquote><p>i）反向扫描日志文件，查找该事务的更新操作；<br>ii）对该事务的更新操作执行逆操作，即将事务更新前的旧值写入数据库；<br>iii）继续反向扫描日志文件，查找其他事务的其他更新操作，做同样处理；<br>iv）如此处理下去，直至读到该事务的开始标识，事务恢复故障完成。</p></blockquote><p>4）<strong>系统故障恢复</strong></p><blockquote><p>i）正向扫描日志文件，找出圆满事务，将其事务标识记入重做队列；找出夭折事务，将其事务标识记入撤销队列；<br>ii）对撤销队列中的各个事务进行撤销处理，即反向扫描日志文件，对每个撤销事务对更新操作执行逆操作；<br>iii）对重做队列中的各个事务进行重做处理，即正向扫描日志文件，对每个重做事务重新执行日志文件登记的操作。</p></blockquote><p>5）<strong>介质故障恢复</strong></p><blockquote><p>i）装入最新的数据库后备副本，将数据库恢复到最近一次转储时的一致性状态；<br>ii）装入相应的日志文件副本，重做已完成的事务。</p></blockquote><p>5，<strong><code>SQL Server</code>的备份与恢复</strong></p><p>1）<strong><code>SQL Server</code>的备份</strong></p><blockquote><p>i）数据库备份：即<code>完全备份</code>。</p></blockquote><ul><li><p>设置简单恢复模式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> <span class="keyword">master</span> <span class="keyword">set</span> <span class="keyword">recovery</span> simple;</span><br></pre></td></tr></table></figure></li><li><p>执行完全备份：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">master</span>;</span><br><span class="line">go</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- init:如果已存在bak文件，则首先删除，后执行</span></span><br><span class="line"><span class="keyword">backup</span> <span class="keyword">database</span> <span class="keyword">master</span> <span class="keyword">to</span> disk=<span class="string">'E:\mater_full.bak'</span> <span class="keyword">with</span> init;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>ii）<code>差异备份</code>：只存储上一次完备之后发生改变的数据。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">master</span>;</span><br><span class="line">go</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- init:如果已存在bak文件，则首先删除，后执行</span></span><br><span class="line"><span class="keyword">backup</span> <span class="keyword">database</span> <span class="keyword">master</span> <span class="keyword">to</span> disk=<span class="string">'E:\mater_diff.bak'</span> <span class="keyword">with</span> init, differential;</span><br></pre></td></tr></table></figure><blockquote><p>iii）<code>日志备份</code>：数据库的恢复模式必须设为完整恢复模式并且必须在数据更改为完整恢复模式后至少执行一次完整数据库备份。</p></blockquote><ul><li><p>设置完整恢复模式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> <span class="keyword">master</span> <span class="keyword">set</span> <span class="keyword">recovery</span> <span class="keyword">full</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行日志备份：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">master</span>;</span><br><span class="line">go</span><br><span class="line">​</span><br><span class="line"><span class="keyword">backup</span> <span class="keyword">log</span> <span class="keyword">master</span> <span class="keyword">to</span> disk=<span class="string">'E:\master_log.bak'</span></span><br></pre></td></tr></table></figure></li></ul><p>2）<strong><code>SQL Server</code>恢复</strong></p><blockquote><p>i）使用<code>SQL Server</code>管理工具还原数据库<br>ii）使用<code>T-SQL</code>语句从简单备份策略还原数据库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">restore</span> <span class="keyword">database</span> <span class="keyword">master</span> <span class="keyword">from</span> disk=<span class="string">'E:\master_full.bak'</span>;</span><br></pre></td></tr></table></figure></p><p>iii）使用<code>T-SQL</code>语句还原差异备份<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">restore</span> <span class="keyword">database</span> <span class="keyword">master</span> <span class="keyword">from</span> disk=<span class="string">'E:\master_full.bak'</span> <span class="keyword">with</span> norecovery;</span><br><span class="line"><span class="keyword">restore</span> <span class="keyword">database</span> <span class="keyword">master</span> <span class="keyword">from</span> disk=<span class="string">'E:\master_diff.bak'</span>;</span><br></pre></td></tr></table></figure></p><p>iv）使用<code>T-SQL</code>语句从完整备份策略还原数据库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">restore</span> <span class="keyword">database</span> <span class="keyword">master</span> <span class="keyword">from</span> disk=<span class="string">'E:\master_full.bak'</span> <span class="keyword">with</span> <span class="keyword">replace</span>, norecovery;</span><br><span class="line"><span class="keyword">restore</span> <span class="keyword">log</span> <span class="keyword">master</span> <span class="keyword">from</span> disk=<span class="string">'E:\master_log1.bak'</span> <span class="keyword">with</span> norecovery;</span><br><span class="line"><span class="keyword">restore</span> <span class="keyword">log</span> <span class="keyword">master</span> <span class="keyword">from</span> disk=<span class="string">'E:\master_log2.bak'</span>;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，安全与保护概述&quot;&gt;&lt;a href=&quot;#一，安全与保护概述&quot; class=&quot;headerlink&quot; title=&quot;一，安全与保护概述&quot;
      
    
    </summary>
    
      <category term="数据库技术" scheme="https://zhangbc.github.io/categories/database/"/>
    
    
      <category term="数据库理论" scheme="https://zhangbc.github.io/tags/db-theory/"/>
    
  </entry>
  
  <entry>
    <title>【数据库理论】数据库的设计与实施</title>
    <link href="https://zhangbc.github.io/2019/04/14/db_design/"/>
    <id>https://zhangbc.github.io/2019/04/14/db_design/</id>
    <published>2019-04-14T10:44:12.000Z</published>
    <updated>2019-04-14T10:46:42.548Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。</p></blockquote><h2 id="一，数据库设计概述"><a href="#一，数据库设计概述" class="headerlink" title="一，数据库设计概述"></a>一，数据库设计概述</h2><p><code>数据库技术</code>是信息资源开发，管理和服务的最有效手段，从小型 单项事务处理系统到大型的信息系统都利用了数据库技术来保证系统数据的整体性，完整性和共享性。</p><p>1，<strong>数据库设计的内容与特点</strong></p><p>1）<strong>数据库设计</strong>包括<code>结构特性设计</code>与<code>行为特性设计</code>。</p><blockquote><ul><li><code>结构特性设计</code>即数据库框架和数据库结构设计，其结果是得到一个合理的数据模型，以反映真实的事务间的联系，目的是汇总各用户的视图，尽量减少冗余，实现数据共享。结构特性是<code>静态的</code>。</li><li><code>行为特性设计</code>是指应用程序设计，如查询，报表处理等，结构特性必须适应行为特性。</li></ul></blockquote><p>2，<strong>数据库设计方法</strong></p><p>1）<code>新奥尔良方法</code>：将数据库设计分为需求分析，概念设计，逻辑设计，物理设计。</p><p>2）从本质上，规范设计法的<strong>基本思想</strong>是“<code>反复探寻，逐步求精</code>”。</p><p>3，<strong>数据库设计的步骤</strong></p><p>1）<strong>数据库设计的过程</strong>：<code>三大阶段六步骤</code>，即：数据库规范设计，需求分析，概念结构设计，逻辑结构设计，物理结构设计，数据库实施与维护（总体规划阶段，系统开发设计阶段，系统运行与维护阶段）。</p><p>2）<strong>六个步骤</strong>：</p><blockquote><p>（1）<code>数据规划设计</code>：明确数据库建设的总体目标和技术路线，得出数据库设计项目的可行性分析报告，对数据库设计的进度和人员分工做出安排。<br>（2）<code>需求分析</code>：准确弄清用户要求是数据库设计的基础。<br>（3）<code>概念结构设计</code>：数据库逻辑结构依赖于具体的<code>DBMS</code>。概念结构是各用户关心的系统信息结构，是对现实世界的第一层抽象。<br>（4）<code>逻辑结构设计</code>：使概念结构转换为某个<code>DBMS</code>所支持的数据模型，并进行优化。<br>（5）<code>物理结构设计</code>：设计目标是从一个满足用户要求的已确定的逻辑模型出发，设计一个在限定的软件，硬件条件和应用环境下可实现的，运行效率高的数据库结构。<br>（6）<code>数据库实施与维护</code></p></blockquote><h2 id="二，数据库规划"><a href="#二，数据库规划" class="headerlink" title="二，数据库规划"></a>二，数据库规划</h2><p>1，<strong>系统调查</strong>：搞清楚企业的组织层次，得到企业的组织结构图。</p><p>2，<strong>可行性分析</strong>：分析数据库建设是否具有可行性，即从经济，法律，技术等多方面进行可行性论证分析，在此基础上得到可行性报告。</p><p>3，<strong>数据库建设的总体目标和数据库建设的实施总安排</strong></p><h2 id="三，需求分析"><a href="#三，需求分析" class="headerlink" title="三，需求分析"></a>三，需求分析</h2><p>1，<strong>需求分析的任务</strong></p><p>1）<code>需求分析</code>的<strong>任务</strong>：通过详细调查现实世界要处理的对象，充分了解原系统工作概况，明确各用户需求，在此基础上确定新的功能。</p><p>2）<code>需求分析</code>的<strong>重点</strong>：调查，搜集用户在数据管理中的信息要求，处理要求，安全性与完整性要求。</p><blockquote><ul><li><code>信息要求</code>是指用户需要从数据库中获取信息的内容和性质，由用户的信息要求可以导出数据要求，即在数据库中需要存储哪些数据。</li><li><code>处理要求</code>是指用户要求完成什么样的处理功能，对处理的响应时间有什么要求，处理方式是批处理还是联机处理。</li><li><code>安全性要求</code>是指保护数据不被未授权的用户破坏。</li><li><code>完整性要求</code>是指保护数据不被授权的用户破坏。</li></ul></blockquote><p>2，<strong>需求分析的方法</strong></p><p>1）常用的调查方法</p><blockquote><p>（1）跟班作业<br>（2）开调查会<br>（3）查阅档案资料<br>（4）询问<br>（5）设计调查用表并请用户填写</p></blockquote><p>3，<strong>需求分析的步骤</strong></p><p>1）<strong>分析用户的活动</strong></p><p>2）<strong>确定系统的边界</strong></p><p>3）<strong>分析用户活动所设计的数据</strong><br><code>数据流图（DFD）</code>是描述各处理活动之间数据流动的有力工具，是一种从数据流的角度描述一个组织业务活动的图示。</p><p>4）<strong>分析系统数据</strong></p><p><code>数据字典（DD）</code>是描述每个数据流，每个文件，每个加工的集合，是对数据流图中出现的所有数据元素给出逻辑定义和描述。</p><p><code>数据字典</code>包括<code>数据项</code>，<code>数据文件</code>，<code>数据流</code>，<code>数据加工处理</code>。</p><blockquote><ul><li><code>数据项描述</code>={数据项名，别名，数据项含义，数据类型，字节长度，取值范围，取值含义，与其他数据项的逻辑关系}</li><li><code>数据文件描述</code>={数据文件名，所有数据项名，数据存取频度，存取方式}</li><li><code>数据流描述</code>={数据流名称，所有数据项名，数据流来源，数据流去向，平均流量，峰值流量}</li><li><code>数据加工处理描述</code>={加工处理名，说明，输入的数据流名，输出的数据流名，处理要求}</li></ul></blockquote><h2 id="四，概念结构设计"><a href="#四，概念结构设计" class="headerlink" title="四，概念结构设计"></a>四，概念结构设计</h2><p><code>概念结构设计阶段</code>是将用户需求抽象为信息结构（概念模型）的过程。</p><p>1，<strong>局部E-R图的设计</strong></p><p>2，<strong>全局E-R图的设计</strong></p><h2 id="五，逻辑结构设计"><a href="#五，逻辑结构设计" class="headerlink" title="五，逻辑结构设计"></a>五，逻辑结构设计</h2><p>逻辑模式设计的<strong>主要目标</strong>是产生一个具体<code>DBMS</code>可处理的数据模型和数据库模式，即把概念设计阶段的全局<code>E-R</code>图转换成<code>DBMS</code>支持的数据模型。一般步骤： </p><blockquote><p>（1）将概念结构转换为一般的关系模型，网状模型或层次模型。<br>（2）将转换来的关系模型，网状模型，层次模型向<code>DBMS</code>支持的数据模型转换，变成合适的数据库模式。<br>（3）对模式进行挑战和优化。</p></blockquote><h2 id="六，物理结构设计"><a href="#六，物理结构设计" class="headerlink" title="六，物理结构设计"></a>六，物理结构设计</h2><p>1）在进行数据库的物理结构设计时，首先确定数据库的物理结构，然后是对所设计的物理结构设计进行评价。<br>2）物理结构设计的重要目标是满足主要应用的性能要求。<br>3）就<code>RDBMS</code>而言，物理结构设计主要内容有：为关系模式选取存取方法，设计关系，索引等数据库文件的物理存储结构。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列为《数据库系统原理与应用（刘先锋等著）》的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，数据库设计概述&quot;&gt;&lt;a href=&quot;#一，数据库设计概述&quot; class=&quot;headerlink&quot; title=&quot;一，数据库设计概述&quot;
      
    
    </summary>
    
      <category term="数据库技术" scheme="https://zhangbc.github.io/categories/database/"/>
    
    
      <category term="数据库理论" scheme="https://zhangbc.github.io/tags/db-theory/"/>
    
  </entry>
  
</feed>
